ca65 V2.19 - Git 05a653d3f
Main file   : 6502_functional_test.ca65
Current file: 6502_functional_test.ca65

000000r 1               ;
000000r 1               ; 6 5 0 2   F U N C T I O N A L   T E S T
000000r 1               ;
000000r 1               ; Copyright (C) 2012-2020  Klaus Dormann
000000r 1               ;
000000r 1               ; This program is free software: you can redistribute it and/or modify
000000r 1               ; it under the terms of the GNU General Public License as published by
000000r 1               ; the Free Software Foundation, either version 3 of the License, or
000000r 1               ; (at your option) any later version.
000000r 1               ;
000000r 1               ; This program is distributed in the hope that it will be useful,
000000r 1               ; but WITHOUT ANY WARRANTY; without even the implied warranty of
000000r 1               ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
000000r 1               ; GNU General Public License for more details.
000000r 1               ;
000000r 1               ; You should have received a copy of the GNU General Public License
000000r 1               ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
000000r 1               
000000r 1               
000000r 1               ; This program is designed to test all opcodes of a 6502 emulator using all
000000r 1               ; addressing modes with focus on propper setting of the processor status
000000r 1               ; register bits.
000000r 1               ;
000000r 1               ; version 05-jan-2020
000000r 1               ; contact info at http://2m5.de or email K@2m5.de
000000r 1               ;
000000r 1               ; assembled with CA65, linked with LD65 (cc65.github.io):
000000r 1               ;  ca65 -l 6502_functional_test.lst 6502_functional_test.ca65
000000r 1               ;  ld65 6502_functional_test.o -o 6502_functional_test.bin \
000000r 1               ;   -m 6502_functional_test.map -C example.cfg
000000r 1               ; example linker config (example.cfg):
000000r 1               ;  MEMORY {
000000r 1               ;  RAM: start = $0000, size=$8000, type = rw, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  ROM: start = $8000, size=$7FFA, type = ro, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  ROM_VECTORS: start = $FFFA, size=6, type = ro, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  }
000000r 1               ;  SEGMENTS {
000000r 1               ;  ZEROPAGE: load=RAM, type=rw;
000000r 1               ;  DATA: load=RAM, type=rw, offset=$0200;
000000r 1               ;  CODE: load=RAM, type=rw, offset=$0400;
000000r 1               ;  VECTORS: load=ROM_VECTORS, type=ro;
000000r 1               ;  }
000000r 1               ;
000000r 1               ; No IO - should be run from a monitor with access to registers.
000000r 1               ; To run load intel hex image with a load command, than alter PC to 400 hex
000000r 1               ; (code_segment) and enter a go command.
000000r 1               ; Loop on program counter determines error or successful completion of test.
000000r 1               ; Check listing for relevant traps (jump/branch *).
000000r 1               ; Please note that in early tests some instructions will have to be used before
000000r 1               ; they are actually tested!
000000r 1               ;
000000r 1               ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
000000r 1               ; Tests documented behavior of the original NMOS 6502 only! No unofficial
000000r 1               ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
000000r 1               ; not be tested. Decimal ops will only be tested with valid BCD operands and
000000r 1               ; N V Z flags will be ignored.
000000r 1               ;
000000r 1               ; Debugging hints:
000000r 1               ;     Most of the code is written sequentially. if you hit a trap, check the
000000r 1               ;   immediately preceeding code for the instruction to be tested. Results are
000000r 1               ;   tested first, flags are checked second by pushing them onto the stack and
000000r 1               ;   pulling them to the accumulator after the result was checked. The "real"
000000r 1               ;   flags are no longer valid for the tested instruction at this time!
000000r 1               ;     If the tested instruction was indexed, the relevant index (X or Y) must
000000r 1               ;   also be checked. Opposed to the flags, X and Y registers are still valid.
000000r 1               ;
000000r 1               ; versions:
000000r 1               ;   28-jul-2012  1st version distributed for testing
000000r 1               ;   29-jul-2012  fixed references to location 0, now #0
000000r 1               ;                added license - GPLv3
000000r 1               ;   30-jul-2012  added configuration options
000000r 1               ;   01-aug-2012  added trap macro to allow user to change error handling
000000r 1               ;   01-dec-2012  fixed trap in branch field must be a branch
000000r 1               ;   02-mar-2013  fixed PLA flags not tested
000000r 1               ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
000000r 1               ;                added test sequence check to detect if tests jump their fence
000000r 1               ;   23-jul-2013  added RAM integrity check option
000000r 1               ;   16-aug-2013  added error report to standard output option
000000r 1               ;   13-dec-2014  added binary/decimal opcode table switch test
000000r 1               ;   14-dec-2014  improved relative address test
000000r 1               ;   23-aug-2015  added option to disable self modifying tests
000000r 1               ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
000000r 1               ;                added small branch offset pretest
000000r 1               ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
000000r 1               ;   04-dec-2017  fixed BRK only tested with interrupts enabled
000000r 1               ;                added option to skip the remainder of a failing test
000000r 1               ;                in report.i65
000000r 1               ;   05-jan-2020  fixed shifts not testing zero result and flag when last 1-bit
000000r 1               ;                is shifted out
000000r 1               
000000r 1               ; C O N F I G U R A T I O N
000000r 1               
000000r 1               ;ROM_vectors writable (0=no, 1=yes)
000000r 1               ;if ROM vectors can not be used interrupts will not be trapped
000000r 1               ;as a consequence BRK can not be tested but will be emulated to test RTI
000000r 1               ROM_vectors = 1
000000r 1               
000000r 1               ;load_data_direct (0=move from code segment, 1=load directly)
000000r 1               ;loading directly is preferred but may not be supported by your platform
000000r 1               ;0 produces only consecutive object code, 1 is not suitable for a binary image
000000r 1               load_data_direct = 1
000000r 1               
000000r 1               ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
000000r 1               ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
000000r 1               ;tested if you allow changing the interrupt status (I_flag = 3)
000000r 1               I_flag = 3
000000r 1               
000000r 1               ;configure memory - try to stay away from memory used by the system
000000r 1               ;zero_page memory start address, $52 (82) consecutive Bytes required
000000r 1               ;                                add 2 if I_flag = 2
000000r 1               zero_page = $a
000000r 1               
000000r 1               ;data_segment memory start address, $7B (123) consecutive Bytes required
000000r 1               ; check that this matches the linker configuration file
000000r 1               data_segment = $200
000000r 1                   .if (data_segment & $ff) <> 0
000000r 1                       .error "low byte of data_segment MUST be $00 !!"
000000r 1                   .endif
000000r 1               
000000r 1               ;code_segment memory start address, 13.1kB of consecutive space required
000000r 1               ;                                   add 2.5 kB if I_flag = 2
000000r 1               ; check that this matches the linker configuration file
000000r 1               code_segment = $400
000000r 1               
000000r 1               ;self modifying code may be disabled to allow running in ROM
000000r 1               ;0=part of the code is self modifying and must reside in RAM
000000r 1               ;1=tests disabled: branch range
000000r 1               disable_selfmod = 0
000000r 1               
000000r 1               ;report errors through I/O channel (0=use standard self trap loops, 1=include
000000r 1               ;report.i65 as I/O channel, add 3.5 kB)
000000r 1               report = 0
000000r 1               
000000r 1               ;RAM integrity test option. Checks for undesired RAM writes.
000000r 1               ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
000000r 1               ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
000000r 1               ram_top = -1
000000r 1               
000000r 1               ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
000000r 1               ;2=disable including decimal flag in processor status
000000r 1               disable_decimal = 2
000000r 1               
000000r 1               ;macros for error & success traps to allow user modification
000000r 1               ;example:
000000r 1               ;        .macro  trap
000000r 1               ;        jsr my_error_handler
000000r 1               ;        .endmacro
000000r 1               ;        .macro  trap_eq
000000r 1               ;        bne :+
000000r 1               ;        trap           ;failed equal (zero)
000000r 1               ;:
000000r 1               ;        .endmacro
000000r 1               ;
000000r 1               ; my_error_handler should pop the calling address from the stack and report it.
000000r 1               ; putting larger portions of code (more than 3 bytes) inside the trap macro
000000r 1               ; may lead to branch range problems for some tests.
000000r 1                   .if report = 0
000000r 1                       .macro  trap
000000r 1                       jmp *           ;failed anyway
000000r 1                       .endmacro
000000r 1                       .macro  trap_eq
000000r 1                       beq *           ;failed equal (zero)
000000r 1                       .endmacro
000000r 1                       .macro  trap_ne
000000r 1                       bne *           ;failed not equal (non zero)
000000r 1                       .endmacro
000000r 1                       .macro  trap_cs
000000r 1                       bcs *           ;failed carry set
000000r 1                       .endmacro
000000r 1                       .macro  trap_cc
000000r 1                       bcc *           ;failed carry clear
000000r 1                       .endmacro
000000r 1                       .macro  trap_mi
000000r 1                       bmi *           ;failed minus (bit 7 set)
000000r 1                       .endmacro
000000r 1                       .macro  trap_pl
000000r 1                       bpl *           ;failed plus (bit 7 clear)
000000r 1                       .endmacro
000000r 1                       .macro  trap_vs
000000r 1                       bvs *           ;failed overflow set
000000r 1                       .endmacro
000000r 1                       .macro  trap_vc
000000r 1                       bvc *           ;failed overflow clear
000000r 1                       .endmacro
000000r 1               ; please observe that during the test the stack gets invalidated
000000r 1               ; therefore a RTS inside the success macro is not possible
000000r 1                       .macro  success
000000r 1                       jmp *           ;test passed, no errors
000000r 1                       .endmacro
000000r 1                   .endif
000000r 1                   .if report = 1
000000r 1                       .macro  trap
000000r 1                       jsr report_error
000000r 1                       .endmacro
000000r 1                       .macro  trap_eq
000000r 1                       bne :+
000000r 1                       trap           ;failed equal (zero)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_ne
000000r 1                       beq :+
000000r 1                       trap            ;failed not equal (non zero)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_cs
000000r 1                       bcc :+
000000r 1                       trap            ;failed carry set
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_cc
000000r 1                       bcs :+
000000r 1                       trap            ;failed carry clear
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_mi
000000r 1                       bpl :+
000000r 1                       trap            ;failed minus (bit 7 set)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_pl
000000r 1                       bmi :+
000000r 1                       trap            ;failed plus (bit 7 clear)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_vs
000000r 1                       bvc :+
000000r 1                       trap            ;failed overflow set
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_vc
000000r 1                       bvs :+
000000r 1                       trap            ;failed overflow clear
000000r 1               :
000000r 1                       .endmacro
000000r 1               ; please observe that during the test the stack gets invalidated
000000r 1               ; therefore a RTS inside the success macro is not possible
000000r 1                       .macro  success
000000r 1                       jsr report_success
000000r 1                       .endmacro
000000r 1                   .endif
000000r 1               
000000r 1                   .define equ =
000000r 1               
000000r 1               carry   equ %00000001   ;flag bits in status
000000r 1               zero    equ %00000010
000000r 1               intdis  equ %00000100
000000r 1               decmode equ %00001000
000000r 1               break   equ %00010000
000000r 1               reserv  equ %00100000
000000r 1               overfl  equ %01000000
000000r 1               minus   equ %10000000
000000r 1               
000000r 1               fc      equ carry
000000r 1               fz      equ zero
000000r 1               fzc     equ carry+zero
000000r 1               fv      equ overfl
000000r 1               fvz     equ overfl+zero
000000r 1               fn      equ minus
000000r 1               fnc     equ minus+carry
000000r 1               fnz     equ minus+zero
000000r 1               fnzc    equ minus+zero+carry
000000r 1               fnv     equ minus+overfl
000000r 1               
000000r 1               fao     equ break+reserv    ;bits always on after PHP, BRK
000000r 1               fai     equ fao+intdis      ;+ forced interrupt disable
000000r 1               faod    equ fao+decmode     ;+ ignore decimal
000000r 1               faid    equ fai+decmode     ;+ ignore decimal
000000r 1               m8      equ $ff             ;8 bit mask
000000r 1               m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
000000r 1               
000000r 1               ;macros to allow masking of status bits.
000000r 1               ;masking test of decimal bit
000000r 1               ;masking of interrupt enable/disable on load and compare
000000r 1               ;masking of always on bits after PHP or BRK (unused & break) on compare
000000r 1                   .if disable_decimal < 2
000000r 1                       .if I_flag = 0
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1&m8i          ;force enable interrupts (mask I)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fao)&m8i   ;I_flag is always enabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #(p1&m8i|fao)   ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 1
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1|intdis      ;force disable interrupts
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fai)&m8    ;I_flag is always disabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #(p1|fai)       ;invert expected flags + always on bits + I
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 2
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1
000000r 1                           ora flag_I_on       ;restore I-flag
000000r 1                           and flag_I_off
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           cmp #(p1|fao)&m8i   ;expected flags + always on bits, mask I
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           eor #(p1&m8i|fao)   ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 3
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1             ;allow test to change I-flag (no mask)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fao)&m8    ;expected flags + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #p1|fao         ;invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                   .else
000000r 1                       .if I_flag = 0
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1&m8i         ;force enable interrupts (mask I)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8i  ;I_flag is always enabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1&m8i|faod)  ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 1
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1|intdis      ;force disable interrupts
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faid)&m8   ;I_flag is always disabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1|faid)      ;invert expected flags + always on bits + I
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 2
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1
000000r 1                           ora flag_I_on       ;restore I-flag
000000r 1                           and flag_I_off
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8i  ;expected flags + always on bits, mask I
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1&m8i|faod)  ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 3
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1             ;allow test to change I-flag (no mask)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8   ;expected flags + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #p1|faod        ;invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                   .endif
000000r 1               
000000r 1               ;macros to set (register|memory|zeropage) & status
000000r 1                           .macro      set_stat    p1          ;setting flags in the processor status register
000000r 1                           load_flag p1
000000r 1                           pha         ;use stack to load status
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_a       p1,p2       ;precharging accu & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda #p1     ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_x       p1,p2       ;precharging index & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           ldx #p1     ;precharge index x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_y       p1,p2       ;precharging index & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           ldy #p1     ;precharge index y
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_ax      p1,p2       ;precharging indexed accu & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_ay      p1,p2       ;precharging indexed accu & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,y    ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_z       p1,p2       ;precharging indexed zp & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to zeropage
000000r 1                           sta zpt
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_zx      p1,p2       ;precharging zp,x & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to indexed zeropage
000000r 1                           sta zpt,x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_abs     p1,p2       ;precharging indexed memory & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to memory
000000r 1                           sta abst
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_absx    p1,p2       ;precharging abs,x & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to indexed memory
000000r 1                           sta abst,x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1               ;macros to test (register|memory|zeropage) & status & (mask)
000000r 1                           .macro      tst_stat    p1          ;testing flags in the processor status register
000000r 1                           php         ;save status
000000r 1                           pla         ;use stack to retrieve status
000000r 1                           pha
000000r 1                           cmp_flag p1
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_a       p1,p2        ;testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_x       p1,p2       ;testing result in x index & flags
000000r 1                           php         ;save flags
000000r 1                           cpx #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_y       p1,p2       ;testing result in y index & flags
000000r 1                           php         ;save flags
000000r 1                           cpy #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_ax      p1,p2,p3    ;indexed testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne     ;
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_ay      p1,p2,p3    ;indexed testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp p1,y    ;test result
000000r 1                           trap_ne     ;
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,y    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_z       p1,p2,p3    ;indexed testing result in zp & flags
000000r 1                           php         ;save flags
000000r 1                           lda zpt
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_zx      p1,p2,p3    ;testing result in zp,x & flags
000000r 1                           php         ;save flags
000000r 1                           lda zpt,x
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_abs     p1,p2,p3    ;indexed testing result in memory & flags
000000r 1                           php         ;save flags
000000r 1                           lda abst
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_absx    p1,p2,p3    ;testing result in abs,x & flags
000000r 1                           php         ;save flags
000000r 1                           lda abst,x
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1               ; RAM integrity test
000000r 1               ;   verifies that none of the previous tests has altered RAM outside of the
000000r 1               ;   designated write areas.
000000r 1               ;   uses zpt word as indirect pointer, zpt+2 word as checksum
000000r 1                       .if ram_top > -1
000000r 1               check_ram   macro
000000r 1                           cld
000000r 1                           lda #0
000000r 1                           sta zpt         ;set low byte of indirect pointer
000000r 1                           sta zpt+3       ;checksum high byte
000000r 1                         .if disable_selfmod = 0
000000r 1                           sta range_adr   ;reset self modifying code
000000r 1                         .endif
000000r 1                           clc
000000r 1                           ldx #zp_bss-zero_page ;zeropage - write test area
000000r 1               ccs3:       adc zero_page,x
000000r 1                           bcc ccs2
000000r 1                           inc zpt+3       ;carry to high byte
000000r 1                           clc
000000r 1               ccs2:       inx
000000r 1                           bne ccs3
000000r 1                           ldx #hi(abs1)   ;set high byte of indirect pointer
000000r 1                           stx zpt+1
000000r 1                           ldy #lo(abs1)   ;data after write & execute test area
000000r 1               ccs5:       adc (zpt),y
000000r 1                           bcc ccs4
000000r 1                           inc zpt+3       ;carry to high byte
000000r 1                           clc
000000r 1               ccs4:       iny
000000r 1                           bne ccs5
000000r 1                           inx             ;advance RAM high address
000000r 1                           stx zpt+1
000000r 1                           cpx #ram_top
000000r 1                           bne ccs5
000000r 1                           sta zpt+2       ;checksum low is
000000r 1                           cmp ram_chksm   ;checksum low expected
000000r 1                           trap_ne         ;checksum mismatch
000000r 1                           lda zpt+3       ;checksum high is
000000r 1                           cmp ram_chksm+1 ;checksum high expected
000000r 1                           trap_ne         ;checksum mismatch
000000r 1                           .endmacro
000000r 1                       .else
000000r 1                           .macro  check_ram
000000r 1                           ;RAM check disabled - RAM size not set
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1               
000000r 1                           .macro  next_test   ;make sure, tests don't jump the fence
000000r 1                           lda test_case   ;previous test
000000r 1                           cmp #test_num
000000r 1                           trap_ne         ;test is out of sequence
000000r 1               test_num .set test_num + 1
000000r 1                           lda #test_num   ;*** next tests' number
000000r 1                           sta test_case
000000r 1                           ;check_ram       ;uncomment to find altered RAM after each test
000000r 1                           .endmacro
000000r 1               
000000r 1                       .ZEROPAGE
000000r 1  00 00 00 00  		.res zero_page, 0
000004r 1  00 00 00 00  
000008r 1  00 00        
00000Ar 1                       .org zero_page
00000A  1               
00000A  1               ;break test interrupt save
00000A  1  00           irq_a:  .res    1,0             ;a register
00000B  1  00           irq_x:  .res    1,0             ;x register
00000C  1                   .if I_flag = 2
00000C  1               ;masking for I bit in status
00000C  1               flag_I_on:  .res    1,0         ;or mask to load flags
00000C  1               flag_I_off: .res    1,0         ;and mask to load flags
00000C  1                   .endif
00000C  1               zpt:                        ;6 bytes store/modify test area
00000C  1               ;add/subtract operand generation and result/flag prediction
00000C  1  00           adfc:   .res    1,0             ;carry flag before op
00000D  1  00           ad1:    .res    1,0             ;operand 1 - accumulator
00000E  1  00           ad2:    .res    1,0             ;operand 2 - memory / immediate
00000F  1  00           adrl:   .res    1,0             ;expected result bits 0-7
000010  1  00           adrh:   .res    1,0             ;expected result bit 8 (carry)
000011  1  00           adrf:   .res    1,0             ;expected flags NV0000ZC (only binary mode)
000012  1  00           sb2:    .res    1,0             ;operand 2 complemented for subtract
000013  1               zp_bss:
000013  1  80 01        zps:    .byte   $80,1           ;additional shift pattern to test zero result & flag
000015  1  C3 82 41 00  zp1:    .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
000019  1  7F           zp7f:   .byte   $7f             ;test pattern for compare
00001A  1               ;logical zeropage operands
00001A  1  00 1F 71 80  zpOR:   .byte   0,$1f,$71,$80   ;test pattern for OR
00001E  1  0F FF 7F 80  zpAN:   .byte   $0f,$ff,$7f,$80 ;test pattern for AND
000022  1  FF 0F 8F 8F  zpEO:   .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
000026  1               ;indirect addressing pointers
000026  1  18 02        ind1:   .word   abs1            ;indirect pointer to pattern in absolute memory
000028  1  19 02                .word   abs1+1
00002A  1  1A 02                .word   abs1+2
00002C  1  1B 02                .word   abs1+3
00002E  1  1C 02                .word   abs7f
000030  1  20 01        inw1:   .word   abs1-$f8        ;indirect pointer for wrap-test pattern
000032  1  03 02        indt:   .word   abst            ;indirect pointer to store area in absolute memory
000034  1  04 02                .word   abst+1
000036  1  05 02                .word   abst+2
000038  1  06 02                .word   abst+3
00003A  1  0B 01        inwt:   .word   abst-$f8        ;indirect pointer for wrap-test store
00003C  1  5F 02        indAN:  .word   absAN           ;indirect pointer to AND pattern in absolute memory
00003E  1  60 02                .word   absAN+1
000040  1  61 02                .word   absAN+2
000042  1  62 02                .word   absAN+3
000044  1  63 02        indEO:  .word   absEO           ;indirect pointer to EOR pattern in absolute memory
000046  1  64 02                .word   absEO+1
000048  1  65 02                .word   absEO+2
00004A  1  66 02                .word   absEO+3
00004C  1  5B 02        indOR:  .word   absOR           ;indirect pointer to OR pattern in absolute memory
00004E  1  5C 02                .word   absOR+1
000050  1  5D 02                .word   absOR+2
000052  1  5E 02                .word   absOR+3
000054  1               ;add/subtract indirect pointers
000054  1  03 02        adi2:   .word   ada2            ;indirect pointer to operand 2 in absolute memory
000056  1  04 02        sbi2:   .word   sba2            ;indirect pointer to complemented operand 2 (SBC)
000058  1  04 01        adiy2:  .word   ada2-$ff        ;with offset for indirect indexed
00005A  1  05 01        sbiy2:  .word   sba2-$ff
00005C  1               zp_bss_end:
00005C  1               
00005C  1                       .DATA
00005C  1                       .org data_segment
000200  1               
000200  1  00           test_case:  .res    1,0         ;current test number
000201  1  00 00        ram_chksm:  .res    2,0         ;checksum for RAM integrity test
000203  1               ;add/subtract operand copy - abs tests write area
000203  1               abst:                           ;6 bytes store/modify test area
000203  1  00           ada2:   .res    1,0             ;operand 2
000204  1  00           sba2:   .res    1,0             ;operand 2 complemented for subtract
000205  1  00 00 00 00          .res    4,0             ;fill remaining bytes
000209  1               data_bss:
000209  1                   .if load_data_direct = 1
000209  1  29 00        ex_andi:and #0              ;execute immediate opcodes
00020B  1  60                   rts
00020C  1  49 00        ex_eori:eor #0              ;execute immediate opcodes
00020E  1  60                   rts
00020F  1  09 00        ex_orai:ora #0              ;execute immediate opcodes
000211  1  60                   rts
000212  1  69 00        ex_adci:adc #0              ;execute immediate opcodes
000214  1  60                   rts
000215  1  E9 00        ex_sbci:sbc #0              ;execute immediate opcodes
000217  1  60                   rts
000218  1                   .else
000218  1               ex_andi:.res    3
000218  1               ex_eori:.res    3
000218  1               ex_orai:.res    3
000218  1               ex_adci:.res    3
000218  1               ex_sbci:.res    3
000218  1                   .endif
000218  1               ;zps    .byte   $80,1           ;additional shift patterns test zero result & flag
000218  1  C3 82 41 00  abs1:   .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
00021C  1  7F           abs7f:  .byte   $7f             ;test pattern for compare
00021D  1               ;loads
00021D  1  80 80 00 02  fLDx:   .byte   fn,fn,0,fz              ;expected flags for load
000221  1               ;shifts
000221  1               rASL:                                   ;expected result ASL & ROL -carry
000221  1  00 02 86 04  rROL:   .byte   0,2,$86,$04,$82,0
000225  1  82 00        
000227  1  01 03 87 05  rROLc:  .byte   1,3,$87,$05,$83,1       ;expected result ROL +carry
00022B  1  83 01        
00022D  1               rLSR:                                   ;expected result LSR & ROR -carry
00022D  1  40 00 61 41  rROR:   .byte   $40,0,$61,$41,$20,0
000231  1  20 00        
000233  1  C0 80 E1 C1  rRORc:  .byte   $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
000237  1  A0 80        
000239  1               fASL:                                   ;expected flags for shifts
000239  1  03 00 81 01  fROL:   .byte   fzc,0,fnc,fc,fn,fz      ;no carry in
00023D  1  80 02        
00023F  1  01 00 81 01  fROLc:  .byte   fc,0,fnc,fc,fn,0        ;carry in
000243  1  80 00        
000245  1               fLSR:
000245  1  00 03 01 00  fROR:   .byte   0,fzc,fc,0,fc,fz        ;no carry in
000249  1  01 02        
00024B  1  80 81 81 80  fRORc:  .byte   fn,fnc,fnc,fn,fnc,fn    ;carry in
00024F  1  81 80        
000251  1               ;increments (decrements)
000251  1  7F 80 FF 00  rINC:   .byte   $7f,$80,$ff,0,1         ;expected result for INC/DEC
000255  1  01           
000256  1  00 80 80 02  fINC:   .byte   0,fn,fn,fz,0            ;expected flags for INC/DEC
00025A  1  00           
00025B  1               ;logical memory operand
00025B  1  00 1F 71 80  absOR:  .byte   0,$1f,$71,$80           ;test pattern for OR
00025F  1  0F FF 7F 80  absAN:  .byte   $0f,$ff,$7f,$80         ;test pattern for AND
000263  1  FF 0F 8F 8F  absEO:  .byte   $ff,$0f,$8f,$8f         ;test pattern for EOR
000267  1               ;logical accu operand
000267  1  00 F1 1F 00  absORa: .byte   0,$f1,$1f,0             ;test pattern for OR
00026B  1  F0 FF FF FF  absANa: .byte   $f0,$ff,$ff,$ff         ;test pattern for AND
00026F  1  FF F0 F0 0F  absEOa: .byte   $ff,$f0,$f0,$0f         ;test pattern for EOR
000273  1               ;logical results
000273  1  00 FF 7F 80  absrlo: .byte   0,$ff,$7f,$80
000277  1  02 80 00 80  absflo: .byte   fz,fn,0,fn
00027B  1               data_bss_end:
00027B  1               
00027B  1               
00027B  1                       .CODE
00027B  1                       .org code_segment
000400  1                       .P02            ; disable 65SC02, 65C02 and 65816 instructions
000400  1  D8           start:  cld
000401  1  A2 FF                ldx #$ff
000403  1  9A                   txs
000404  1  A9 00                lda #0          ;*** test 0 = initialize
000406  1  8D 00 02             sta test_case
000409  1               test_num .set 0
000409  1               
000409  1               ;stop interrupts before initializing BSS
000409  1                   .if I_flag = 1
000409  1                       sei
000409  1                   .endif
000409  1               
000409  1               ;initialize I/O for report channel
000409  1                   .if report = 1
000409  1                       jsr report_init
000409  1                   .endif
000409  1               
000409  1               ;pretest small branch offset
000409  1  A2 05                ldx #5
00040B  1  4C 33 04             jmp psb_test
00040E  1               psb_bwok:
00040E  1  A0 05                ldy #5
000410  1  D0 08                bne psb_forw
000412  1  4C 12 04             trap        ;branch should be taken
000415  1  88                   dey         ;forward landing zone
000416  1  88                   dey
000417  1  88                   dey
000418  1  88                   dey
000419  1  88                   dey
00041A  1               psb_forw:
00041A  1  88                   dey
00041B  1  88                   dey
00041C  1  88                   dey
00041D  1  88                   dey
00041E  1  88                   dey
00041F  1  F0 17                beq psb_fwok
000421  1  4C 21 04             trap        ;forward offset
000424  1               
000424  1  CA                   dex         ;backward landing zone
000425  1  CA                   dex
000426  1  CA                   dex
000427  1  CA                   dex
000428  1  CA                   dex
000429  1               psb_back:
000429  1  CA                   dex
00042A  1  CA                   dex
00042B  1  CA                   dex
00042C  1  CA                   dex
00042D  1  CA                   dex
00042E  1  F0 DE                beq psb_bwok
000430  1  4C 30 04             trap        ;backward offset
000433  1               psb_test:
000433  1  D0 F4                bne psb_back
000435  1  4C 35 04             trap        ;branch should be taken
000438  1               psb_fwok:
000438  1               
000438  1               ;initialize BSS segment
000438  1                   .if load_data_direct <> 1
000438  1                       ldx #zp_end-zp_init-1
000438  1               ld_zp:  lda zp_init,x
000438  1                       sta zp_bss,x
000438  1                       dex
000438  1                       bpl ld_zp
000438  1                       ldx #data_end-data_init-1
000438  1               ld_data:lda data_init,x
000438  1                       sta data_bss,x
000438  1                       dex
000438  1                       bpl ld_data
000438  1                     .if ROM_vectors = 1
000438  1                       ldx #5
000438  1               ld_vect:lda vec_init,x
000438  1                       sta vec_bss,x
000438  1                       dex
000438  1                       bpl ld_vect
000438  1                     .endif
000438  1                   .endif
000438  1               
000438  1               ;retain status of interrupt flag
000438  1                   .if I_flag = 2
000438  1                       php
000438  1                       pla
000438  1                       and #4          ;isolate flag
000438  1                       sta flag_I_on   ;or mask
000438  1                       eor #lo(~4)     ;reverse
000438  1                       sta flag_I_off  ;and mask
000438  1                   .endif
000438  1               
000438  1               ;generate checksum for RAM integrity test
000438  1                   .if ram_top > -1
000438  1                       lda #0
000438  1                       sta zpt         ;set low byte of indirect pointer
000438  1                       sta ram_chksm+1 ;checksum high byte
000438  1                     .if disable_selfmod = 0
000438  1                       sta range_adr   ;reset self modifying code
000438  1                     .endif
000438  1                       clc
000438  1                       ldx #zp_bss-zero_page ;zeropage - write test area
000438  1               gcs3:   adc zero_page,x
000438  1                       bcc gcs2
000438  1                       inc ram_chksm+1 ;carry to high byte
000438  1                       clc
000438  1               gcs2:   inx
000438  1                       bne gcs3
000438  1                       ldx #hi(abs1)   ;set high byte of indirect pointer
000438  1                       stx zpt+1
000438  1                       ldy #lo(abs1)   ;data after write & execute test area
000438  1               gcs5:   adc (zpt),y
000438  1                       bcc gcs4
000438  1                       inc ram_chksm+1 ;carry to high byte
000438  1                       clc
000438  1               gcs4:   iny
000438  1                       bne gcs5
000438  1                       inx             ;advance RAM high address
000438  1                       stx zpt+1
000438  1                       cpx #ram_top
000438  1                       bne gcs5
000438  1                       sta ram_chksm   ;checksum complete
000438  1                   .endif
000438  1  AD 00 02 C9          next_test
00043C  1  00 D0 FE A9  
000440  1  01 8D 00 02  
000444  1               
000444  1                   .if disable_selfmod = 0
000444  1               ;testing relative addressing with BEQ
000444  1  A0 FE                ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
000446  1               range_loop:
000446  1  88                   dey             ;next relative address
000447  1  98                   tya
000448  1  AA                   tax             ;precharge count to end of loop
000449  1  10 08                bpl range_fw    ;calculate relative address
00044B  1  18                   clc             ;avoid branch self or to relative address of branch
00044C  1  69 02                adc #2
00044E  1  EA                   nop             ;offset landing zone - tolerate +/-5 offset to branch
00044F  1  EA                   nop
000450  1  EA                   nop
000451  1  EA                   nop
000452  1  EA                   nop
000453  1               range_fw:
000453  1  EA                   nop
000454  1  EA                   nop
000455  1  EA                   nop
000456  1  EA                   nop
000457  1  EA                   nop
000458  1  49 7F                eor #$7f        ;complement except sign
00045A  1  8D E6 04             sta range_adr   ;load into test target
00045D  1  A9 00                lda #0          ;should set zero flag in status register
00045F  1  4C E5 04             jmp range_op
000462  1               
000462  1  CA                   dex             ; offset landing zone - backward branch too far
000463  1  CA                   dex
000464  1  CA                   dex
000465  1  CA                   dex
000466  1  CA                   dex
000467  1                       ;relative address target field with branch under test in the middle
000467  1  CA                   dex             ;-128 - max backward
000468  1  CA                   dex
000469  1  CA                   dex
00046A  1  CA                   dex
00046B  1  CA                   dex
00046C  1  CA                   dex
00046D  1  CA                   dex
00046E  1  CA                   dex
00046F  1  CA                   dex             ;-120
000470  1  CA                   dex
000471  1  CA                   dex
000472  1  CA                   dex
000473  1  CA                   dex
000474  1  CA                   dex
000475  1  CA                   dex
000476  1  CA                   dex
000477  1  CA                   dex
000478  1  CA                   dex
000479  1  CA                   dex             ;-110
00047A  1  CA                   dex
00047B  1  CA                   dex
00047C  1  CA                   dex
00047D  1  CA                   dex
00047E  1  CA                   dex
00047F  1  CA                   dex
000480  1  CA                   dex
000481  1  CA                   dex
000482  1  CA                   dex
000483  1  CA                   dex             ;-100
000484  1  CA                   dex
000485  1  CA                   dex
000486  1  CA                   dex
000487  1  CA                   dex
000488  1  CA                   dex
000489  1  CA                   dex
00048A  1  CA                   dex
00048B  1  CA                   dex
00048C  1  CA                   dex
00048D  1  CA                   dex             ;-90
00048E  1  CA                   dex
00048F  1  CA                   dex
000490  1  CA                   dex
000491  1  CA                   dex
000492  1  CA                   dex
000493  1  CA                   dex
000494  1  CA                   dex
000495  1  CA                   dex
000496  1  CA                   dex
000497  1  CA                   dex             ;-80
000498  1  CA                   dex
000499  1  CA                   dex
00049A  1  CA                   dex
00049B  1  CA                   dex
00049C  1  CA                   dex
00049D  1  CA                   dex
00049E  1  CA                   dex
00049F  1  CA                   dex
0004A0  1  CA                   dex
0004A1  1  CA                   dex             ;-70
0004A2  1  CA                   dex
0004A3  1  CA                   dex
0004A4  1  CA                   dex
0004A5  1  CA                   dex
0004A6  1  CA                   dex
0004A7  1  CA                   dex
0004A8  1  CA                   dex
0004A9  1  CA                   dex
0004AA  1  CA                   dex
0004AB  1  CA                   dex             ;-60
0004AC  1  CA                   dex
0004AD  1  CA                   dex
0004AE  1  CA                   dex
0004AF  1  CA                   dex
0004B0  1  CA                   dex
0004B1  1  CA                   dex
0004B2  1  CA                   dex
0004B3  1  CA                   dex
0004B4  1  CA                   dex
0004B5  1  CA                   dex             ;-50
0004B6  1  CA                   dex
0004B7  1  CA                   dex
0004B8  1  CA                   dex
0004B9  1  CA                   dex
0004BA  1  CA                   dex
0004BB  1  CA                   dex
0004BC  1  CA                   dex
0004BD  1  CA                   dex
0004BE  1  CA                   dex
0004BF  1  CA                   dex             ;-40
0004C0  1  CA                   dex
0004C1  1  CA                   dex
0004C2  1  CA                   dex
0004C3  1  CA                   dex
0004C4  1  CA                   dex
0004C5  1  CA                   dex
0004C6  1  CA                   dex
0004C7  1  CA                   dex
0004C8  1  CA                   dex
0004C9  1  CA                   dex             ;-30
0004CA  1  CA                   dex
0004CB  1  CA                   dex
0004CC  1  CA                   dex
0004CD  1  CA                   dex
0004CE  1  CA                   dex
0004CF  1  CA                   dex
0004D0  1  CA                   dex
0004D1  1  CA                   dex
0004D2  1  CA                   dex
0004D3  1  CA                   dex             ;-20
0004D4  1  CA                   dex
0004D5  1  CA                   dex
0004D6  1  CA                   dex
0004D7  1  CA                   dex
0004D8  1  CA                   dex
0004D9  1  CA                   dex
0004DA  1  CA                   dex
0004DB  1  CA                   dex
0004DC  1  CA                   dex
0004DD  1  CA                   dex             ;-10
0004DE  1  CA                   dex
0004DF  1  CA                   dex
0004E0  1  CA                   dex
0004E1  1  CA                   dex
0004E2  1  CA                   dex
0004E3  1  CA                   dex
0004E4  1  CA                   dex             ;-3
0004E5  1               range_op:               ;test target with zero flag=0, z=1 if previous dex
0004E5  1               range_adr   = *+1       ;modifiable relative address
0004E5  1  F0 3E                beq *+64        ;+64 if called without modification
0004E7  1  CA                   dex             ;+0
0004E8  1  CA                   dex
0004E9  1  CA                   dex
0004EA  1  CA                   dex
0004EB  1  CA                   dex
0004EC  1  CA                   dex
0004ED  1  CA                   dex
0004EE  1  CA                   dex
0004EF  1  CA                   dex
0004F0  1  CA                   dex
0004F1  1  CA                   dex             ;+10
0004F2  1  CA                   dex
0004F3  1  CA                   dex
0004F4  1  CA                   dex
0004F5  1  CA                   dex
0004F6  1  CA                   dex
0004F7  1  CA                   dex
0004F8  1  CA                   dex
0004F9  1  CA                   dex
0004FA  1  CA                   dex
0004FB  1  CA                   dex             ;+20
0004FC  1  CA                   dex
0004FD  1  CA                   dex
0004FE  1  CA                   dex
0004FF  1  CA                   dex
000500  1  CA                   dex
000501  1  CA                   dex
000502  1  CA                   dex
000503  1  CA                   dex
000504  1  CA                   dex
000505  1  CA                   dex             ;+30
000506  1  CA                   dex
000507  1  CA                   dex
000508  1  CA                   dex
000509  1  CA                   dex
00050A  1  CA                   dex
00050B  1  CA                   dex
00050C  1  CA                   dex
00050D  1  CA                   dex
00050E  1  CA                   dex
00050F  1  CA                   dex             ;+40
000510  1  CA                   dex
000511  1  CA                   dex
000512  1  CA                   dex
000513  1  CA                   dex
000514  1  CA                   dex
000515  1  CA                   dex
000516  1  CA                   dex
000517  1  CA                   dex
000518  1  CA                   dex
000519  1  CA                   dex             ;+50
00051A  1  CA                   dex
00051B  1  CA                   dex
00051C  1  CA                   dex
00051D  1  CA                   dex
00051E  1  CA                   dex
00051F  1  CA                   dex
000520  1  CA                   dex
000521  1  CA                   dex
000522  1  CA                   dex
000523  1  CA                   dex             ;+60
000524  1  CA                   dex
000525  1  CA                   dex
000526  1  CA                   dex
000527  1  CA                   dex
000528  1  CA                   dex
000529  1  CA                   dex
00052A  1  CA                   dex
00052B  1  CA                   dex
00052C  1  CA                   dex
00052D  1  CA                   dex             ;+70
00052E  1  CA                   dex
00052F  1  CA                   dex
000530  1  CA                   dex
000531  1  CA                   dex
000532  1  CA                   dex
000533  1  CA                   dex
000534  1  CA                   dex
000535  1  CA                   dex
000536  1  CA                   dex
000537  1  CA                   dex             ;+80
000538  1  CA                   dex
000539  1  CA                   dex
00053A  1  CA                   dex
00053B  1  CA                   dex
00053C  1  CA                   dex
00053D  1  CA                   dex
00053E  1  CA                   dex
00053F  1  CA                   dex
000540  1  CA                   dex
000541  1  CA                   dex             ;+90
000542  1  CA                   dex
000543  1  CA                   dex
000544  1  CA                   dex
000545  1  CA                   dex
000546  1  CA                   dex
000547  1  CA                   dex
000548  1  CA                   dex
000549  1  CA                   dex
00054A  1  CA                   dex
00054B  1  CA                   dex             ;+100
00054C  1  CA                   dex
00054D  1  CA                   dex
00054E  1  CA                   dex
00054F  1  CA                   dex
000550  1  CA                   dex
000551  1  CA                   dex
000552  1  CA                   dex
000553  1  CA                   dex
000554  1  CA                   dex
000555  1  CA                   dex             ;+110
000556  1  CA                   dex
000557  1  CA                   dex
000558  1  CA                   dex
000559  1  CA                   dex
00055A  1  CA                   dex
00055B  1  CA                   dex
00055C  1  CA                   dex
00055D  1  CA                   dex
00055E  1  CA                   dex
00055F  1  CA                   dex             ;+120
000560  1  CA                   dex
000561  1  CA                   dex
000562  1  CA                   dex
000563  1  CA                   dex
000564  1  CA                   dex
000565  1  CA                   dex
000566  1  EA                   nop             ;offset landing zone - forward branch too far
000567  1  EA                   nop
000568  1  EA                   nop
000569  1  EA                   nop
00056A  1  EA                   nop
00056B  1  F0 08                beq range_ok    ;+127 - max forward
00056D  1  4C 6D 05             trap            ; bad range
000570  1  EA                   nop             ;offset landing zone - tolerate +/-5 offset to branch
000571  1  EA                   nop
000572  1  EA                   nop
000573  1  EA                   nop
000574  1  EA                   nop
000575  1               range_ok:
000575  1  EA                   nop
000576  1  EA                   nop
000577  1  EA                   nop
000578  1  EA                   nop
000579  1  EA                   nop
00057A  1  C0 00                cpy #0
00057C  1  F0 03                beq range_end
00057E  1  4C 46 04             jmp range_loop
000581  1               range_end:              ;range test successful
000581  1                   .endif
000581  1  AD 00 02 C9          next_test
000585  1  01 D0 FE A9  
000589  1  02 8D 00 02  
00058D  1               
00058D  1               ;partial test BNE & CMP, CPX, CPY immediate
00058D  1  C0 01                cpy #1          ;testing BNE true
00058F  1  D0 03                bne test_bne
000591  1  4C 91 05             trap
000594  1               test_bne:
000594  1  A9 00                lda #0
000596  1  C9 00                cmp #0          ;test compare immediate
000598  1  D0 FE                trap_ne
00059A  1  90 FE                trap_cc
00059C  1  30 FE                trap_mi
00059E  1  C9 01                cmp #1
0005A0  1  F0 FE                trap_eq
0005A2  1  B0 FE                trap_cs
0005A4  1  10 FE                trap_pl
0005A6  1  AA                   tax
0005A7  1  E0 00                cpx #0          ;test compare x immediate
0005A9  1  D0 FE                trap_ne
0005AB  1  90 FE                trap_cc
0005AD  1  30 FE                trap_mi
0005AF  1  E0 01                cpx #1
0005B1  1  F0 FE                trap_eq
0005B3  1  B0 FE                trap_cs
0005B5  1  10 FE                trap_pl
0005B7  1  A8                   tay
0005B8  1  C0 00                cpy #0          ;test compare y immediate
0005BA  1  D0 FE                trap_ne
0005BC  1  90 FE                trap_cc
0005BE  1  30 FE                trap_mi
0005C0  1  C0 01                cpy #1
0005C2  1  F0 FE                trap_eq
0005C4  1  B0 FE                trap_cs
0005C6  1  10 FE                trap_pl
0005C8  1  AD 00 02 C9          next_test
0005CC  1  02 D0 FE A9  
0005D0  1  03 8D 00 02  
0005D4  1               ;testing stack operations PHA PHP PLA PLP
0005D4  1               
0005D4  1  A2 FF                ldx #$ff        ;initialize stack
0005D6  1  9A                   txs
0005D7  1  A9 55                lda #$55
0005D9  1  48                   pha
0005DA  1  A9 AA                lda #$aa
0005DC  1  48                   pha
0005DD  1  CD FE 01             cmp $1fe        ;on stack ?
0005E0  1  D0 FE                trap_ne
0005E2  1  BA                   tsx
0005E3  1  8A                   txa             ;overwrite accu
0005E4  1  C9 FD                cmp #$fd        ;sp decremented?
0005E6  1  D0 FE                trap_ne
0005E8  1  68                   pla
0005E9  1  C9 AA                cmp #$aa        ;successful retreived from stack?
0005EB  1  D0 FE                trap_ne
0005ED  1  68                   pla
0005EE  1  C9 55                cmp #$55
0005F0  1  D0 FE                trap_ne
0005F2  1  CD FF 01             cmp $1ff        ;remains on stack?
0005F5  1  D0 FE                trap_ne
0005F7  1  BA                   tsx
0005F8  1  E0 FF                cpx #$ff        ;sp incremented?
0005FA  1  D0 FE                trap_ne
0005FC  1  AD 00 02 C9          next_test
000600  1  03 D0 FE A9  
000604  1  04 8D 00 02  
000608  1               
000608  1               ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
000608  1  A9 FF 48 28          set_stat $ff    ;all on
00060C  1  10 1A                bpl nbr1        ;branches should not be taken
00060E  1  50 1B                bvc nbr2
000610  1  90 1C                bcc nbr3
000612  1  D0 1D                bne nbr4
000614  1  30 03                bmi br1         ;branches should be taken
000616  1  4C 16 06             trap
000619  1  70 03        br1:    bvs br2
00061B  1  4C 1B 06             trap
00061E  1  B0 03        br2:    bcs br3
000620  1  4C 20 06             trap
000623  1  F0 0F        br3:    beq br4
000625  1  4C 25 06             trap
000628  1               nbr1:
000628  1  4C 28 06             trap            ;previous bpl taken
00062B  1               nbr2:
00062B  1  4C 2B 06             trap            ;previous bvc taken
00062E  1               nbr3:
00062E  1  4C 2E 06             trap            ;previous bcc taken
000631  1               nbr4:
000631  1  4C 31 06             trap            ;previous bne taken
000634  1  08           br4:    php
000635  1  BA                   tsx
000636  1  E0 FE                cpx #$fe        ;sp after php?
000638  1  D0 FE                trap_ne
00063A  1  68                   pla
00063B  1  09 08 C9 FF          cmp_flag $ff    ;returned all flags on?
00063F  1  D0 FE                trap_ne
000641  1  BA                   tsx
000642  1  E0 FF                cpx #$ff        ;sp after php?
000644  1  D0 FE                trap_ne
000646  1  A9 00 48 28          set_stat 0      ;all off
00064A  1  30 1A                bmi nbr11       ;branches should not be taken
00064C  1  70 1B                bvs nbr12
00064E  1  B0 1C                bcs nbr13
000650  1  F0 1D                beq nbr14
000652  1  10 03                bpl br11        ;branches should be taken
000654  1  4C 54 06             trap
000657  1  50 03        br11:   bvc br12
000659  1  4C 59 06             trap
00065C  1  90 03        br12:   bcc br13
00065E  1  4C 5E 06             trap
000661  1  D0 0F        br13:   bne br14
000663  1  4C 63 06             trap
000666  1               nbr11:
000666  1  4C 66 06             trap            ;previous bmi taken
000669  1               nbr12:
000669  1  4C 69 06             trap            ;previous bvs taken
00066C  1               nbr13:
00066C  1  4C 6C 06             trap            ;previous bcs taken
00066F  1               nbr14:
00066F  1  4C 6F 06             trap            ;previous beq taken
000672  1  08           br14:   php
000673  1  68                   pla
000674  1  09 08 C9 38          cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
000678  1  D0 FE                trap_ne
00067A  1                       ;crosscheck flags
00067A  1  A9 02 48 28          set_stat zero
00067E  1  D0 02                bne brzs1
000680  1  F0 03                beq brzs2
000682  1               brzs1:
000682  1  4C 82 06             trap            ;branch zero/non zero
000685  1  B0 02        brzs2:  bcs brzs3
000687  1  90 03                bcc brzs4
000689  1               brzs3:
000689  1  4C 89 06             trap            ;branch carry/no carry
00068C  1  30 02        brzs4:  bmi brzs5
00068E  1  10 03                bpl brzs6
000690  1               brzs5:
000690  1  4C 90 06             trap            ;branch minus/plus
000693  1  70 02        brzs6:  bvs brzs7
000695  1  50 03                bvc brzs8
000697  1               brzs7:
000697  1  4C 97 06             trap            ;branch overflow/no overflow
00069A  1               brzs8:
00069A  1  A9 01 48 28          set_stat carry
00069E  1  F0 02                beq brcs1
0006A0  1  D0 03                bne brcs2
0006A2  1               brcs1:
0006A2  1  4C A2 06             trap            ;branch zero/non zero
0006A5  1  90 02        brcs2:  bcc brcs3
0006A7  1  B0 03                bcs brcs4
0006A9  1               brcs3:
0006A9  1  4C A9 06             trap            ;branch carry/no carry
0006AC  1  30 02        brcs4:  bmi brcs5
0006AE  1  10 03                bpl brcs6
0006B0  1               brcs5:
0006B0  1  4C B0 06             trap            ;branch minus/plus
0006B3  1  70 02        brcs6:  bvs brcs7
0006B5  1  50 03                bvc brcs8
0006B7  1               brcs7:
0006B7  1  4C B7 06             trap            ;branch overflow/no overflow
0006BA  1               
0006BA  1               brcs8:
0006BA  1  A9 80 48 28          set_stat minus
0006BE  1  F0 02                beq brmi1
0006C0  1  D0 03                bne brmi2
0006C2  1               brmi1:
0006C2  1  4C C2 06             trap            ;branch zero/non zero
0006C5  1  B0 02        brmi2:  bcs brmi3
0006C7  1  90 03                bcc brmi4
0006C9  1               brmi3:
0006C9  1  4C C9 06             trap            ;branch carry/no carry
0006CC  1  10 02        brmi4:  bpl brmi5
0006CE  1  30 03                bmi brmi6
0006D0  1               brmi5:
0006D0  1  4C D0 06             trap            ;branch minus/plus
0006D3  1  70 02        brmi6:  bvs brmi7
0006D5  1  50 03                bvc brmi8
0006D7  1               brmi7:
0006D7  1  4C D7 06             trap            ;branch overflow/no overflow
0006DA  1               brmi8:
0006DA  1  A9 40 48 28          set_stat overfl
0006DE  1  F0 02                beq brvs1
0006E0  1  D0 03                bne brvs2
0006E2  1               brvs1:
0006E2  1  4C E2 06             trap            ;branch zero/non zero
0006E5  1  B0 02        brvs2:  bcs brvs3
0006E7  1  90 03                bcc brvs4
0006E9  1               brvs3:
0006E9  1  4C E9 06             trap            ;branch carry/no carry
0006EC  1  30 02        brvs4:  bmi brvs5
0006EE  1  10 03                bpl brvs6
0006F0  1               brvs5:
0006F0  1  4C F0 06             trap            ;branch minus/plus
0006F3  1  50 02        brvs6:  bvc brvs7
0006F5  1  70 03                bvs brvs8
0006F7  1               brvs7:
0006F7  1  4C F7 06             trap            ;branch overflow/no overflow
0006FA  1               brvs8:
0006FA  1  A9 FD 48 28          set_stat $ff-zero
0006FE  1  F0 02                beq brzc1
000700  1  D0 03                bne brzc2
000702  1               brzc1:
000702  1  4C 02 07             trap            ;branch zero/non zero
000705  1  90 02        brzc2:  bcc brzc3
000707  1  B0 03                bcs brzc4
000709  1               brzc3:
000709  1  4C 09 07             trap            ;branch carry/no carry
00070C  1  10 02        brzc4:  bpl brzc5
00070E  1  30 03                bmi brzc6
000710  1               brzc5:
000710  1  4C 10 07             trap            ;branch minus/plus
000713  1  50 02        brzc6:  bvc brzc7
000715  1  70 03                bvs brzc8
000717  1               brzc7:
000717  1  4C 17 07             trap            ;branch overflow/no overflow
00071A  1               brzc8:
00071A  1  A9 FE 48 28          set_stat $ff-carry
00071E  1  D0 02                bne brcc1
000720  1  F0 03                beq brcc2
000722  1               brcc1:
000722  1  4C 22 07             trap            ;branch zero/non zero
000725  1  B0 02        brcc2:  bcs brcc3
000727  1  90 03                bcc brcc4
000729  1               brcc3:
000729  1  4C 29 07             trap            ;branch carry/no carry
00072C  1  10 02        brcc4:  bpl brcc5
00072E  1  30 03                bmi brcc6
000730  1               brcc5:
000730  1  4C 30 07             trap            ;branch minus/plus
000733  1  50 02        brcc6:  bvc brcc7
000735  1  70 03                bvs brcc8
000737  1               brcc7:
000737  1  4C 37 07             trap            ;branch overflow/no overflow
00073A  1               brcc8:
00073A  1  A9 7F 48 28          set_stat $ff-minus
00073E  1  D0 02                bne brpl1
000740  1  F0 03                beq brpl2
000742  1               brpl1:
000742  1  4C 42 07             trap            ;branch zero/non zero
000745  1  90 02        brpl2:  bcc brpl3
000747  1  B0 03                bcs brpl4
000749  1               brpl3:
000749  1  4C 49 07             trap            ;branch carry/no carry
00074C  1  30 02        brpl4:  bmi brpl5
00074E  1  10 03                bpl brpl6
000750  1               brpl5:
000750  1  4C 50 07             trap            ;branch minus/plus
000753  1  50 02        brpl6:  bvc brpl7
000755  1  70 03                bvs brpl8
000757  1               brpl7:
000757  1  4C 57 07             trap            ;branch overflow/no overflow
00075A  1               brpl8:
00075A  1  A9 BF 48 28          set_stat $ff-overfl
00075E  1  D0 02                bne brvc1
000760  1  F0 03                beq brvc2
000762  1               brvc1:
000762  1  4C 62 07             trap            ;branch zero/non zero
000765  1  90 02        brvc2:  bcc brvc3
000767  1  B0 03                bcs brvc4
000769  1               brvc3:
000769  1  4C 69 07             trap            ;branch carry/no carry
00076C  1  10 02        brvc4:  bpl brvc5
00076E  1  30 03                bmi brvc6
000770  1               brvc5:
000770  1  4C 70 07             trap            ;branch minus/plus
000773  1  70 02        brvc6:  bvs brvc7
000775  1  50 03                bvc brvc8
000777  1               brvc7:
000777  1  4C 77 07             trap            ;branch overflow/no overflow
00077A  1               brvc8:
00077A  1  AD 00 02 C9          next_test
00077E  1  04 D0 FE A9  
000782  1  05 8D 00 02  
000786  1               
000786  1               ; test PHA does not alter flags or accumulator but PLA does
000786  1  A2 55                ldx #$55        ;x & y protected
000788  1  A0 AA                ldy #$aa
00078A  1  A9 FF 48 A9          set_a 1,$ff     ;push
00078E  1  01 28        
000790  1  48                   pha
000791  1  08 C9 01 D0          tst_a 1,$ff
000795  1  FE 68 48 09  
000799  1  08 C9 FF D0  
00079F  1  A9 00 48 A9          set_a 0,0
0007A3  1  00 28        
0007A5  1  48                   pha
0007A6  1  08 C9 00 D0          tst_a 0,0
0007AA  1  FE 68 48 09  
0007AE  1  08 C9 38 D0  
0007B4  1  A9 FF 48 A9          set_a $ff,$ff
0007B8  1  FF 28        
0007BA  1  48                   pha
0007BB  1  08 C9 FF D0          tst_a $ff,$ff
0007BF  1  FE 68 48 09  
0007C3  1  08 C9 FF D0  
0007C9  1  A9 00 48 A9          set_a 1,0
0007CD  1  01 28        
0007CF  1  48                   pha
0007D0  1  08 C9 01 D0          tst_a 1,0
0007D4  1  FE 68 48 09  
0007D8  1  08 C9 38 D0  
0007DE  1  A9 FF 48 A9          set_a 0,$ff
0007E2  1  00 28        
0007E4  1  48                   pha
0007E5  1  08 C9 00 D0          tst_a 0,$ff
0007E9  1  FE 68 48 09  
0007ED  1  08 C9 FF D0  
0007F3  1  A9 00 48 A9          set_a $ff,0
0007F7  1  FF 28        
0007F9  1  48                   pha
0007FA  1  08 C9 FF D0          tst_a $ff,0
0007FE  1  FE 68 48 09  
000802  1  08 C9 38 D0  
000808  1  A9 FF 48 A9          set_a 0,$ff     ;pull
00080C  1  00 28        
00080E  1  68                   pla
00080F  1  08 C9 FF D0          tst_a $ff,$ff-zero
000813  1  FE 68 48 09  
000817  1  08 C9 FD D0  
00081D  1  A9 00 48 A9          set_a $ff,0
000821  1  FF 28        
000823  1  68                   pla
000824  1  08 C9 00 D0          tst_a 0,zero
000828  1  FE 68 48 09  
00082C  1  08 C9 3A D0  
000832  1  A9 FF 48 A9          set_a $fe,$ff
000836  1  FE 28        
000838  1  68                   pla
000839  1  08 C9 01 D0          tst_a 1,$ff-zero-minus
00083D  1  FE 68 48 09  
000841  1  08 C9 7D D0  
000847  1  A9 00 48 A9          set_a 0,0
00084B  1  00 28        
00084D  1  68                   pla
00084E  1  08 C9 FF D0          tst_a $ff,minus
000852  1  FE 68 48 09  
000856  1  08 C9 B8 D0  
00085C  1  A9 FF 48 A9          set_a $ff,$ff
000860  1  FF 28        
000862  1  68                   pla
000863  1  08 C9 00 D0          tst_a 0,$ff-minus
000867  1  FE 68 48 09  
00086B  1  08 C9 7F D0  
000871  1  A9 00 48 A9          set_a $fe,0
000875  1  FE 28        
000877  1  68                   pla
000878  1  08 C9 01 D0          tst_a 1,0
00087C  1  FE 68 48 09  
000880  1  08 C9 38 D0  
000886  1  E0 55                cpx #$55        ;x & y unchanged?
000888  1  D0 FE                trap_ne
00088A  1  C0 AA                cpy #$aa
00088C  1  D0 FE                trap_ne
00088E  1  AD 00 02 C9          next_test
000892  1  05 D0 FE A9  
000896  1  06 8D 00 02  
00089A  1               
00089A  1               ; partial pretest EOR #
00089A  1  A9 00 48 A9          set_a $3c,0
00089E  1  3C 28        
0008A0  1  49 C3                eor #$c3
0008A2  1  08 C9 FF D0          tst_a $ff,fn
0008A6  1  FE 68 48 09  
0008AA  1  08 C9 B8 D0  
0008B0  1  A9 00 48 A9          set_a $c3,0
0008B4  1  C3 28        
0008B6  1  49 C3                eor #$c3
0008B8  1  08 C9 00 D0          tst_a 0,fz
0008BC  1  FE 68 48 09  
0008C0  1  08 C9 3A D0  
0008C6  1  AD 00 02 C9          next_test
0008CA  1  06 D0 FE A9  
0008CE  1  07 8D 00 02  
0008D2  1               
0008D2  1               ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
0008D2  1               ; testing NOP
0008D2  1  A2 24                ldx #$24
0008D4  1  A0 42                ldy #$42
0008D6  1  A9 00 48 A9          set_a $18,0
0008DA  1  18 28        
0008DC  1  EA                   nop
0008DD  1  08 C9 18 D0          tst_a $18,0
0008E1  1  FE 68 48 09  
0008E5  1  08 C9 38 D0  
0008EB  1  E0 24                cpx #$24
0008ED  1  D0 FE                trap_ne
0008EF  1  C0 42                cpy #$42
0008F1  1  D0 FE                trap_ne
0008F3  1  A2 DB                ldx #$db
0008F5  1  A0 BD                ldy #$bd
0008F7  1  A9 FF 48 A9          set_a $e7,$ff
0008FB  1  E7 28        
0008FD  1  EA                   nop
0008FE  1  08 C9 E7 D0          tst_a $e7,$ff
000902  1  FE 68 48 09  
000906  1  08 C9 FF D0  
00090C  1  E0 DB                cpx #$db
00090E  1  D0 FE                trap_ne
000910  1  C0 BD                cpy #$bd
000912  1  D0 FE                trap_ne
000914  1  AD 00 02 C9          next_test
000918  1  07 D0 FE A9  
00091C  1  08 8D 00 02  
000920  1               
000920  1               ; jump absolute
000920  1  A9 00 48 28          set_stat $0
000924  1  A9 46                lda #'F'
000926  1  A2 41                ldx #'A'
000928  1  A0 52                ldy #'R'        ;N=0, V=0, Z=0, C=0
00092A  1  4C EC 37             jmp test_far
00092D  1  EA                   nop
00092E  1  EA                   nop
00092F  1  D0 FE                trap_ne         ;runover protection
000931  1  E8                   inx
000932  1  E8                   inx
000933  1               far_ret:
000933  1  F0 FE                trap_eq         ;returned flags OK?
000935  1  10 FE                trap_pl
000937  1  90 FE                trap_cc
000939  1  50 FE                trap_vc
00093B  1  C9 EC                cmp #('F'^$aa)  ;returned registers OK?
00093D  1  D0 FE                trap_ne
00093F  1  E0 42                cpx #('A'+1)
000941  1  D0 FE                trap_ne
000943  1  C0 4F                cpy #('R'-3)
000945  1  D0 FE                trap_ne
000947  1  CA                   dex
000948  1  C8                   iny
000949  1  C8                   iny
00094A  1  C8                   iny
00094B  1  49 AA                eor #$aa        ;N=0, V=1, Z=0, C=1
00094D  1  4C 56 09             jmp test_near
000950  1  EA                   nop
000951  1  EA                   nop
000952  1  D0 FE                trap_ne         ;runover protection
000954  1  E8                   inx
000955  1  E8                   inx
000956  1               test_near:
000956  1  F0 FE                trap_eq         ;passed flags OK?
000958  1  30 FE                trap_mi
00095A  1  90 FE                trap_cc
00095C  1  50 FE                trap_vc
00095E  1  C9 46                cmp #'F'        ;passed registers OK?
000960  1  D0 FE                trap_ne
000962  1  E0 41                cpx #'A'
000964  1  D0 FE                trap_ne
000966  1  C0 52                cpy #'R'
000968  1  D0 FE                trap_ne
00096A  1  AD 00 02 C9          next_test
00096E  1  08 D0 FE A9  
000972  1  09 8D 00 02  
000976  1               
000976  1               ; jump indirect
000976  1  A9 00 48 28          set_stat 0
00097A  1  A9 49                lda #'I'
00097C  1  A2 4E                ldx #'N'
00097E  1  A0 44                ldy #'D'        ;N=0, V=0, Z=0, C=0
000980  1  6C 1A 38             jmp (ptr_tst_ind)
000983  1  EA                   nop
000984  1  D0 FE                trap_ne         ;runover protection
000986  1  88                   dey
000987  1  88                   dey
000988  1               ind_ret:
000988  1  08                   php             ;either SP or Y count will fail, if we do not hit
000989  1  88                   dey
00098A  1  88                   dey
00098B  1  88                   dey
00098C  1  28                   plp
00098D  1  F0 FE                trap_eq         ;returned flags OK?
00098F  1  10 FE                trap_pl
000991  1  90 FE                trap_cc
000993  1  50 FE                trap_vc
000995  1  C9 E3                cmp #('I'^$aa)  ;returned registers OK?
000997  1  D0 FE                trap_ne
000999  1  E0 4F                cpx #('N'+1)
00099B  1  D0 FE                trap_ne
00099D  1  C0 3E                cpy #('D'-6)
00099F  1  D0 FE                trap_ne
0009A1  1  BA                   tsx             ;SP check
0009A2  1  E0 FF                cpx #$ff
0009A4  1  D0 FE                trap_ne
0009A6  1  AD 00 02 C9          next_test
0009AA  1  09 D0 FE A9  
0009AE  1  0A 8D 00 02  
0009B2  1               
0009B2  1               ; jump subroutine & return from subroutine
0009B2  1  A9 00 48 28          set_stat 0
0009B6  1  A9 4A                lda #'J'
0009B8  1  A2 53                ldx #'S'
0009BA  1  A0 52                ldy #'R'        ;N=0, V=0, Z=0, C=0
0009BC  1  20 59 38             jsr test_jsr
0009BF  1               jsr_ret = *-1           ;last address of jsr = return address
0009BF  1  08                   php             ;either SP or Y count will fail, if we do not hit
0009C0  1  88                   dey
0009C1  1  88                   dey
0009C2  1  88                   dey
0009C3  1  28                   plp
0009C4  1  F0 FE                trap_eq         ;returned flags OK?
0009C6  1  10 FE                trap_pl
0009C8  1  90 FE                trap_cc
0009CA  1  50 FE                trap_vc
0009CC  1  C9 E0                cmp #('J'^$aa)  ;returned registers OK?
0009CE  1  D0 FE                trap_ne
0009D0  1  E0 54                cpx #('S'+1)
0009D2  1  D0 FE                trap_ne
0009D4  1  C0 4C                cpy #('R'-6)
0009D6  1  D0 FE                trap_ne
0009D8  1  BA                   tsx             ;sp?
0009D9  1  E0 FF                cpx #$ff
0009DB  1  D0 FE                trap_ne
0009DD  1  AD 00 02 C9          next_test
0009E1  1  0A D0 FE A9  
0009E5  1  0B 8D 00 02  
0009E9  1               
0009E9  1               ; break & return from interrupt
0009E9  1                   .if ROM_vectors = 1
0009E9  1  A9 00                load_flag 0     ;with interrupts enabled if allowed!
0009EB  1  48                   pha
0009EC  1  A9 42                lda #'B'
0009EE  1  A2 52                ldx #'R'
0009F0  1  A0 4B                ldy #'K'
0009F2  1  28                   plp             ;N=0, V=0, Z=0, C=0
0009F3  1  00                   brk
0009F4  1                   .else
0009F4  1                       lda #>brk_ret0 ;emulated break
0009F4  1                       pha
0009F4  1                       lda #<brk_ret0
0009F4  1                       pha
0009F4  1                       load_flag fao    ;set break & unused on stack
0009F4  1                       pha
0009F4  1                       load_flag intdis ;during interrupt
0009F4  1                       pha
0009F4  1                       lda #'B'
0009F4  1                       ldx #'R'
0009F4  1                       ldy #'K'
0009F4  1                       plp             ;N=0, V=0, Z=0, C=0
0009F4  1                       jmp irq_trap
0009F4  1                   .endif
0009F4  1  88                   dey             ;should not be executed
0009F5  1               brk_ret0:               ;address of break return
0009F5  1  08                   php             ;either SP or Y count will fail, if we do not hit
0009F6  1  88                   dey
0009F7  1  88                   dey
0009F8  1  88                   dey
0009F9  1  C9 E8                cmp #'B'^$aa    ;returned registers OK?
0009FB  1                       ;the IRQ vector was never executed if A & X stay unmodified
0009FB  1  D0 FE                trap_ne
0009FD  1  E0 53                cpx #'R'+1
0009FF  1  D0 FE                trap_ne
000A01  1  C0 45                cpy #'K'-6
000A03  1  D0 FE                trap_ne
000A05  1  68                   pla             ;returned flags OK (unchanged)?
000A06  1  09 08 C9 38          cmp_flag 0
000A0A  1  D0 FE                trap_ne
000A0C  1  BA                   tsx             ;sp?
000A0D  1  E0 FF                cpx #$ff
000A0F  1  D0 FE                trap_ne
000A11  1                   .if ROM_vectors = 1
000A11  1  A9 FF                load_flag $ff   ;with interrupts disabled if allowed!
000A13  1  48                   pha
000A14  1  A9 BD                lda #$ff-'B'
000A16  1  A2 AD                ldx #$ff-'R'
000A18  1  A0 B4                ldy #$ff-'K'
000A1A  1  28                   plp             ;N=1, V=1, Z=1, C=1
000A1B  1  00                   brk
000A1C  1                   .else
000A1C  1                       lda #>brk_ret1 ;emulated break
000A1C  1                       pha
000A1C  1                       lda #<brk_ret1
000A1C  1                       pha
000A1C  1                       load_flag $ff
000A1C  1                       pha             ;set break & unused on stack
000A1C  1                       pha             ;actual flags
000A1C  1                       lda #$ff-'B'
000A1C  1                       ldx #$ff-'R'
000A1C  1                       ldy #$ff-'K'
000A1C  1                       plp             ;N=1, V=1, Z=1, C=1
000A1C  1                       jmp irq_trap
000A1C  1                   .endif
000A1C  1  88                   dey             ;should not be executed
000A1D  1               brk_ret1:               ;address of break return
000A1D  1  08                   php             ;either SP or Y count will fail, if we do not hit
000A1E  1  88                   dey
000A1F  1  88                   dey
000A20  1  88                   dey
000A21  1  C9 17                cmp #($ff-'B')^$aa  ;returned registers OK?
000A23  1                       ;the IRQ vector was never executed if A & X stay unmodified
000A23  1  D0 FE                trap_ne
000A25  1  E0 AE                cpx #$ff-'R'+1
000A27  1  D0 FE                trap_ne
000A29  1  C0 AE                cpy #$ff-'K'-6
000A2B  1  D0 FE                trap_ne
000A2D  1  68                   pla             ;returned flags OK (unchanged)?
000A2E  1  09 08 C9 FF          cmp_flag $ff
000A32  1  D0 FE                trap_ne
000A34  1  BA                   tsx             ;sp?
000A35  1  E0 FF                cpx #$ff
000A37  1  D0 FE                trap_ne
000A39  1  AD 00 02 C9          next_test
000A3D  1  0B D0 FE A9  
000A41  1  0C 8D 00 02  
000A45  1               
000A45  1               ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
000A45  1  A9 FF 48 28          set_stat $ff
000A49  1  18                   clc
000A4A  1  08 68 48 09          tst_stat $ff-carry
000A4E  1  08 C9 FE D0  
000A52  1  FE 28        
000A54  1  38                   sec
000A55  1  08 68 48 09          tst_stat $ff
000A59  1  08 C9 FF D0  
000A5D  1  FE 28        
000A5F  1                   .if I_flag = 3
000A5F  1  58                   cli
000A60  1  08 68 48 09          tst_stat $ff-intdis
000A64  1  08 C9 FB D0  
000A68  1  FE 28        
000A6A  1  78                   sei
000A6B  1  08 68 48 09          tst_stat $ff
000A6F  1  08 C9 FF D0  
000A73  1  FE 28        
000A75  1                   .endif
000A75  1  D8                   cld
000A76  1  08 68 48 09          tst_stat $ff-decmode
000A7A  1  08 C9 FF D0  
000A7E  1  FE 28        
000A80  1  F8                   sed
000A81  1  08 68 48 09          tst_stat $ff
000A85  1  08 C9 FF D0  
000A89  1  FE 28        
000A8B  1  B8                   clv
000A8C  1  08 68 48 09          tst_stat $ff-overfl
000A90  1  08 C9 BF D0  
000A94  1  FE 28        
000A96  1  A9 00 48 28          set_stat 0
000A9A  1  08 68 48 09          tst_stat 0
000A9E  1  08 C9 38 D0  
000AA2  1  FE 28        
000AA4  1  38                   sec
000AA5  1  08 68 48 09          tst_stat carry
000AA9  1  08 C9 39 D0  
000AAD  1  FE 28        
000AAF  1  18                   clc
000AB0  1  08 68 48 09          tst_stat 0
000AB4  1  08 C9 38 D0  
000AB8  1  FE 28        
000ABA  1                   .if I_flag = 3
000ABA  1  78                   sei
000ABB  1  08 68 48 09          tst_stat intdis
000ABF  1  08 C9 3C D0  
000AC3  1  FE 28        
000AC5  1  58                   cli
000AC6  1  08 68 48 09          tst_stat 0
000ACA  1  08 C9 38 D0  
000ACE  1  FE 28        
000AD0  1                   .endif
000AD0  1  F8                   sed
000AD1  1  08 68 48 09          tst_stat decmode
000AD5  1  08 C9 38 D0  
000AD9  1  FE 28        
000ADB  1  D8                   cld
000ADC  1  08 68 48 09          tst_stat 0
000AE0  1  08 C9 38 D0  
000AE4  1  FE 28        
000AE6  1  A9 40 48 28          set_stat overfl
000AEA  1  08 68 48 09          tst_stat overfl
000AEE  1  08 C9 78 D0  
000AF2  1  FE 28        
000AF4  1  B8                   clv
000AF5  1  08 68 48 09          tst_stat 0
000AF9  1  08 C9 38 D0  
000AFD  1  FE 28        
000AFF  1  AD 00 02 C9          next_test
000B03  1  0C D0 FE A9  
000B07  1  0D 8D 00 02  
000B0B  1               ; testing index register increment/decrement and transfer
000B0B  1               ; INX INY DEX DEY TAX TXA TAY TYA
000B0B  1  A2 FE                ldx #$fe
000B0D  1  A9 FF 48 28          set_stat $ff
000B11  1  E8                   inx             ;ff
000B12  1  08 E0 FF D0          tst_x $ff,$ff-zero
000B16  1  FE 68 48 09  
000B1A  1  08 C9 FD D0  
000B20  1  E8                   inx             ;00
000B21  1  08 E0 00 D0          tst_x 0,$ff-minus
000B25  1  FE 68 48 09  
000B29  1  08 C9 7F D0  
000B2F  1  E8                   inx             ;01
000B30  1  08 E0 01 D0          tst_x 1,$ff-minus-zero
000B34  1  FE 68 48 09  
000B38  1  08 C9 7D D0  
000B3E  1  CA                   dex             ;00
000B3F  1  08 E0 00 D0          tst_x 0,$ff-minus
000B43  1  FE 68 48 09  
000B47  1  08 C9 7F D0  
000B4D  1  CA                   dex             ;ff
000B4E  1  08 E0 FF D0          tst_x $ff,$ff-zero
000B52  1  FE 68 48 09  
000B56  1  08 C9 FD D0  
000B5C  1  CA                   dex             ;fe
000B5D  1  A9 00 48 28          set_stat 0
000B61  1  E8                   inx             ;ff
000B62  1  08 E0 FF D0          tst_x $ff,minus
000B66  1  FE 68 48 09  
000B6A  1  08 C9 B8 D0  
000B70  1  E8                   inx             ;00
000B71  1  08 E0 00 D0          tst_x 0,zero
000B75  1  FE 68 48 09  
000B79  1  08 C9 3A D0  
000B7F  1  E8                   inx             ;01
000B80  1  08 E0 01 D0          tst_x 1,0
000B84  1  FE 68 48 09  
000B88  1  08 C9 38 D0  
000B8E  1  CA                   dex             ;00
000B8F  1  08 E0 00 D0          tst_x 0,zero
000B93  1  FE 68 48 09  
000B97  1  08 C9 3A D0  
000B9D  1  CA                   dex             ;ff
000B9E  1  08 E0 FF D0          tst_x $ff,minus
000BA2  1  FE 68 48 09  
000BA6  1  08 C9 B8 D0  
000BAC  1               
000BAC  1  A0 FE                ldy #$fe
000BAE  1  A9 FF 48 28          set_stat $ff
000BB2  1  C8                   iny             ;ff
000BB3  1  08 C0 FF D0          tst_y $ff,$ff-zero
000BB7  1  FE 68 48 09  
000BBB  1  08 C9 FD D0  
000BC1  1  C8                   iny             ;00
000BC2  1  08 C0 00 D0          tst_y 0,$ff-minus
000BC6  1  FE 68 48 09  
000BCA  1  08 C9 7F D0  
000BD0  1  C8                   iny             ;01
000BD1  1  08 C0 01 D0          tst_y 1,$ff-minus-zero
000BD5  1  FE 68 48 09  
000BD9  1  08 C9 7D D0  
000BDF  1  88                   dey             ;00
000BE0  1  08 C0 00 D0          tst_y 0,$ff-minus
000BE4  1  FE 68 48 09  
000BE8  1  08 C9 7F D0  
000BEE  1  88                   dey             ;ff
000BEF  1  08 C0 FF D0          tst_y $ff,$ff-zero
000BF3  1  FE 68 48 09  
000BF7  1  08 C9 FD D0  
000BFD  1  88                   dey             ;fe
000BFE  1  A9 00 48 28          set_stat 0
000C02  1  C8                   iny             ;ff
000C03  1  08 C0 FF D0          tst_y $ff,0+minus
000C07  1  FE 68 48 09  
000C0B  1  08 C9 B8 D0  
000C11  1  C8                   iny             ;00
000C12  1  08 C0 00 D0          tst_y 0,zero
000C16  1  FE 68 48 09  
000C1A  1  08 C9 3A D0  
000C20  1  C8                   iny             ;01
000C21  1  08 C0 01 D0          tst_y 1,0
000C25  1  FE 68 48 09  
000C29  1  08 C9 38 D0  
000C2F  1  88                   dey             ;00
000C30  1  08 C0 00 D0          tst_y 0,zero
000C34  1  FE 68 48 09  
000C38  1  08 C9 3A D0  
000C3E  1  88                   dey             ;ff
000C3F  1  08 C0 FF D0          tst_y $ff,minus
000C43  1  FE 68 48 09  
000C47  1  08 C9 B8 D0  
000C4D  1               
000C4D  1  A2 FF                ldx #$ff
000C4F  1  A9 FF 48 28          set_stat $ff
000C53  1  8A                   txa
000C54  1  08 C9 FF D0          tst_a $ff,$ff-zero
000C58  1  FE 68 48 09  
000C5C  1  08 C9 FD D0  
000C62  1  08                   php
000C63  1  E8                   inx             ;00
000C64  1  28                   plp
000C65  1  8A                   txa
000C66  1  08 C9 00 D0          tst_a 0,$ff-minus
000C6A  1  FE 68 48 09  
000C6E  1  08 C9 7F D0  
000C74  1  08                   php
000C75  1  E8                   inx             ;01
000C76  1  28                   plp
000C77  1  8A                   txa
000C78  1  08 C9 01 D0          tst_a 1,$ff-minus-zero
000C7C  1  FE 68 48 09  
000C80  1  08 C9 7D D0  
000C86  1  A9 00 48 28          set_stat 0
000C8A  1  8A                   txa
000C8B  1  08 C9 01 D0          tst_a 1,0
000C8F  1  FE 68 48 09  
000C93  1  08 C9 38 D0  
000C99  1  08                   php
000C9A  1  CA                   dex             ;00
000C9B  1  28                   plp
000C9C  1  8A                   txa
000C9D  1  08 C9 00 D0          tst_a 0,zero
000CA1  1  FE 68 48 09  
000CA5  1  08 C9 3A D0  
000CAB  1  08                   php
000CAC  1  CA                   dex             ;ff
000CAD  1  28                   plp
000CAE  1  8A                   txa
000CAF  1  08 C9 FF D0          tst_a $ff,minus
000CB3  1  FE 68 48 09  
000CB7  1  08 C9 B8 D0  
000CBD  1               
000CBD  1  A0 FF                ldy #$ff
000CBF  1  A9 FF 48 28          set_stat $ff
000CC3  1  98                   tya
000CC4  1  08 C9 FF D0          tst_a $ff,$ff-zero
000CC8  1  FE 68 48 09  
000CCC  1  08 C9 FD D0  
000CD2  1  08                   php
000CD3  1  C8                   iny             ;00
000CD4  1  28                   plp
000CD5  1  98                   tya
000CD6  1  08 C9 00 D0          tst_a 0,$ff-minus
000CDA  1  FE 68 48 09  
000CDE  1  08 C9 7F D0  
000CE4  1  08                   php
000CE5  1  C8                   iny             ;01
000CE6  1  28                   plp
000CE7  1  98                   tya
000CE8  1  08 C9 01 D0          tst_a 1,$ff-minus-zero
000CEC  1  FE 68 48 09  
000CF0  1  08 C9 7D D0  
000CF6  1  A9 00 48 28          set_stat 0
000CFA  1  98                   tya
000CFB  1  08 C9 01 D0          tst_a 1,0
000CFF  1  FE 68 48 09  
000D03  1  08 C9 38 D0  
000D09  1  08                   php
000D0A  1  88                   dey             ;00
000D0B  1  28                   plp
000D0C  1  98                   tya
000D0D  1  08 C9 00 D0          tst_a 0,zero
000D11  1  FE 68 48 09  
000D15  1  08 C9 3A D0  
000D1B  1  08                   php
000D1C  1  88                   dey             ;ff
000D1D  1  28                   plp
000D1E  1  98                   tya
000D1F  1  08 C9 FF D0          tst_a $ff,minus
000D23  1  FE 68 48 09  
000D27  1  08 C9 B8 D0  
000D2D  1               
000D2D  1  A9 FF                load_flag $ff
000D2F  1  48                   pha
000D30  1  A2 FF                ldx #$ff        ;ff
000D32  1  8A                   txa
000D33  1  28                   plp
000D34  1  A8                   tay
000D35  1  08 C0 FF D0          tst_y $ff,$ff-zero
000D39  1  FE 68 48 09  
000D3D  1  08 C9 FD D0  
000D43  1  08                   php
000D44  1  E8                   inx             ;00
000D45  1  8A                   txa
000D46  1  28                   plp
000D47  1  A8                   tay
000D48  1  08 C0 00 D0          tst_y 0,$ff-minus
000D4C  1  FE 68 48 09  
000D50  1  08 C9 7F D0  
000D56  1  08                   php
000D57  1  E8                   inx             ;01
000D58  1  8A                   txa
000D59  1  28                   plp
000D5A  1  A8                   tay
000D5B  1  08 C0 01 D0          tst_y 1,$ff-minus-zero
000D5F  1  FE 68 48 09  
000D63  1  08 C9 7D D0  
000D69  1  A9 00                load_flag 0
000D6B  1  48                   pha
000D6C  1  A9 00                lda #0
000D6E  1  8A                   txa
000D6F  1  28                   plp
000D70  1  A8                   tay
000D71  1  08 C0 01 D0          tst_y 1,0
000D75  1  FE 68 48 09  
000D79  1  08 C9 38 D0  
000D7F  1  08                   php
000D80  1  CA                   dex             ;00
000D81  1  8A                   txa
000D82  1  28                   plp
000D83  1  A8                   tay
000D84  1  08 C0 00 D0          tst_y 0,zero
000D88  1  FE 68 48 09  
000D8C  1  08 C9 3A D0  
000D92  1  08                   php
000D93  1  CA                   dex             ;ff
000D94  1  8A                   txa
000D95  1  28                   plp
000D96  1  A8                   tay
000D97  1  08 C0 FF D0          tst_y $ff,minus
000D9B  1  FE 68 48 09  
000D9F  1  08 C9 B8 D0  
000DA5  1               
000DA5  1               
000DA5  1  A9 FF                load_flag $ff
000DA7  1  48                   pha
000DA8  1  A0 FF                ldy #$ff        ;ff
000DAA  1  98                   tya
000DAB  1  28                   plp
000DAC  1  AA                   tax
000DAD  1  08 E0 FF D0          tst_x $ff,$ff-zero
000DB1  1  FE 68 48 09  
000DB5  1  08 C9 FD D0  
000DBB  1  08                   php
000DBC  1  C8                   iny             ;00
000DBD  1  98                   tya
000DBE  1  28                   plp
000DBF  1  AA                   tax
000DC0  1  08 E0 00 D0          tst_x 0,$ff-minus
000DC4  1  FE 68 48 09  
000DC8  1  08 C9 7F D0  
000DCE  1  08                   php
000DCF  1  C8                   iny             ;01
000DD0  1  98                   tya
000DD1  1  28                   plp
000DD2  1  AA                   tax
000DD3  1  08 E0 01 D0          tst_x 1,$ff-minus-zero
000DD7  1  FE 68 48 09  
000DDB  1  08 C9 7D D0  
000DE1  1  A9 00                load_flag 0
000DE3  1  48                   pha
000DE4  1  A9 00                lda #0          ;preset status
000DE6  1  98                   tya
000DE7  1  28                   plp
000DE8  1  AA                   tax
000DE9  1  08 E0 01 D0          tst_x 1,0
000DED  1  FE 68 48 09  
000DF1  1  08 C9 38 D0  
000DF7  1  08                   php
000DF8  1  88                   dey             ;00
000DF9  1  98                   tya
000DFA  1  28                   plp
000DFB  1  AA                   tax
000DFC  1  08 E0 00 D0          tst_x 0,zero
000E00  1  FE 68 48 09  
000E04  1  08 C9 3A D0  
000E0A  1  08                   php
000E0B  1  88                   dey             ;ff
000E0C  1  98                   tya
000E0D  1  28                   plp
000E0E  1  AA                   tax
000E0F  1  08 E0 FF D0          tst_x $ff,minus
000E13  1  FE 68 48 09  
000E17  1  08 C9 B8 D0  
000E1D  1  AD 00 02 C9          next_test
000E21  1  0D D0 FE A9  
000E25  1  0E 8D 00 02  
000E29  1               
000E29  1               ;TSX sets NZ - TXS does not
000E29  1               ;  This section also tests for proper stack wrap around.
000E29  1  A2 01                ldx #1          ;01
000E2B  1  A9 FF 48 28          set_stat $ff
000E2F  1  9A                   txs
000E30  1  08                   php
000E31  1  AD 01 01             lda $101
000E34  1  09 08 C9 FF          cmp_flag $ff
000E38  1  D0 FE                trap_ne
000E3A  1  A9 00 48 28          set_stat 0
000E3E  1  9A                   txs
000E3F  1  08                   php
000E40  1  AD 01 01             lda $101
000E43  1  09 08 C9 38          cmp_flag 0
000E47  1  D0 FE                trap_ne
000E49  1  CA                   dex             ;00
000E4A  1  A9 FF 48 28          set_stat $ff
000E4E  1  9A                   txs
000E4F  1  08                   php
000E50  1  AD 00 01             lda $100
000E53  1  09 08 C9 FF          cmp_flag $ff
000E57  1  D0 FE                trap_ne
000E59  1  A9 00 48 28          set_stat 0
000E5D  1  9A                   txs
000E5E  1  08                   php
000E5F  1  AD 00 01             lda $100
000E62  1  09 08 C9 38          cmp_flag 0
000E66  1  D0 FE                trap_ne
000E68  1  CA                   dex             ;ff
000E69  1  A9 FF 48 28          set_stat $ff
000E6D  1  9A                   txs
000E6E  1  08                   php
000E6F  1  AD FF 01             lda $1ff
000E72  1  09 08 C9 FF          cmp_flag $ff
000E76  1  D0 FE                trap_ne
000E78  1  A9 00 48 28          set_stat 0
000E7C  1  9A                   txs
000E7D  1  08                   php
000E7E  1  AD FF 01             lda $1ff
000E81  1  09 08 C9 38          cmp_flag 0
000E85  1               
000E85  1  A2 01                ldx #1
000E87  1  9A                   txs             ;sp=01
000E88  1  A9 FF 48 28          set_stat $ff
000E8C  1  BA                   tsx             ;clears Z, N
000E8D  1  08                   php             ;sp=00
000E8E  1  E0 01                cpx #1
000E90  1  D0 FE                trap_ne
000E92  1  AD 01 01             lda $101
000E95  1  09 08 C9 7D          cmp_flag $ff-minus-zero
000E99  1  D0 FE                trap_ne
000E9B  1  A9 FF 48 28          set_stat $ff
000E9F  1  BA                   tsx             ;clears N, sets Z
000EA0  1  08                   php             ;sp=ff
000EA1  1  E0 00                cpx #0
000EA3  1  D0 FE                trap_ne
000EA5  1  AD 00 01             lda $100
000EA8  1  09 08 C9 7F          cmp_flag $ff-minus
000EAC  1  D0 FE                trap_ne
000EAE  1  A9 FF 48 28          set_stat $ff
000EB2  1  BA                   tsx             ;clears N, sets Z
000EB3  1  08                   php             ;sp=fe
000EB4  1  E0 FF                cpx #$ff
000EB6  1  D0 FE                trap_ne
000EB8  1  AD FF 01             lda $1ff
000EBB  1  09 08 C9 FD          cmp_flag $ff-zero
000EBF  1  D0 FE                trap_ne
000EC1  1               
000EC1  1  A2 01                ldx #1
000EC3  1  9A                   txs             ;sp=01
000EC4  1  A9 00 48 28          set_stat 0
000EC8  1  BA                   tsx             ;clears Z, N
000EC9  1  08                   php             ;sp=00
000ECA  1  E0 01                cpx #1
000ECC  1  D0 FE                trap_ne
000ECE  1  AD 01 01             lda $101
000ED1  1  09 08 C9 38          cmp_flag 0
000ED5  1  D0 FE                trap_ne
000ED7  1  A9 00 48 28          set_stat 0
000EDB  1  BA                   tsx             ;clears N, sets Z
000EDC  1  08                   php             ;sp=ff
000EDD  1  E0 00                cpx #0
000EDF  1  D0 FE                trap_ne
000EE1  1  AD 00 01             lda $100
000EE4  1  09 08 C9 3A          cmp_flag zero
000EE8  1  D0 FE                trap_ne
000EEA  1  A9 00 48 28          set_stat 0
000EEE  1  BA                   tsx             ;clears N, sets Z
000EEF  1  08                   php             ;sp=fe
000EF0  1  E0 FF                cpx #$ff
000EF2  1  D0 FE                trap_ne
000EF4  1  AD FF 01             lda $1ff
000EF7  1  09 08 C9 B8          cmp_flag minus
000EFB  1  D0 FE                trap_ne
000EFD  1  68                   pla             ;sp=ff
000EFE  1  AD 00 02 C9          next_test
000F02  1  0E D0 FE A9  
000F06  1  0F 8D 00 02  
000F0A  1               
000F0A  1               ; testing index register load & store LDY LDX STY STX all addressing modes
000F0A  1               ; LDX / STX - zp,y / abs,y
000F0A  1  A0 03                ldy #3
000F0C  1               tldx:
000F0C  1  A9 00 48 28          set_stat 0
000F10  1  B6 15                ldx zp1,y
000F12  1  08                   php         ;test stores do not alter flags
000F13  1  8A                   txa
000F14  1  49 C3                eor #$c3
000F16  1  28                   plp
000F17  1  99 03 02             sta abst,y
000F1A  1  08                   php         ;flags after load/store sequence
000F1B  1  49 C3                eor #$c3
000F1D  1  D9 18 02             cmp abs1,y  ;test result
000F20  1  D0 FE                trap_ne
000F22  1  68                   pla         ;load status
000F23  1  09 08 49 38          eor_flag 0
000F27  1  D9 1D 02             cmp fLDx,y  ;test flags
000F2A  1  D0 FE                trap_ne
000F2C  1  88                   dey
000F2D  1  10 DD                bpl tldx
000F2F  1               
000F2F  1  A0 03                ldy #3
000F31  1               tldx1:
000F31  1  A9 FF 48 28          set_stat $ff
000F35  1  B6 15                ldx zp1,y
000F37  1  08                   php         ;test stores do not alter flags
000F38  1  8A                   txa
000F39  1  49 C3                eor #$c3
000F3B  1  28                   plp
000F3C  1  99 03 02             sta abst,y
000F3F  1  08                   php         ;flags after load/store sequence
000F40  1  49 C3                eor #$c3
000F42  1  D9 18 02             cmp abs1,y  ;test result
000F45  1  D0 FE                trap_ne
000F47  1  68                   pla         ;load status
000F48  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
000F4C  1  D9 1D 02             cmp fLDx,y  ;test flags
000F4F  1  D0 FE                trap_ne
000F51  1  88                   dey
000F52  1  10 DD                bpl tldx1
000F54  1               
000F54  1  A0 03                ldy #3
000F56  1               tldx2:
000F56  1  A9 00 48 28          set_stat 0
000F5A  1  BE 18 02             ldx abs1,y
000F5D  1  08                   php         ;test stores do not alter flags
000F5E  1  8A                   txa
000F5F  1  49 C3                eor #$c3
000F61  1  AA                   tax
000F62  1  28                   plp
000F63  1  96 0C                stx zpt,y
000F65  1  08                   php         ;flags after load/store sequence
000F66  1  49 C3                eor #$c3
000F68  1  D9 15 00             cmp zp1,y   ;test result
000F6B  1  D0 FE                trap_ne
000F6D  1  68                   pla         ;load status
000F6E  1  09 08 49 38          eor_flag 0
000F72  1  D9 1D 02             cmp fLDx,y  ;test flags
000F75  1  D0 FE                trap_ne
000F77  1  88                   dey
000F78  1  10 DC                bpl tldx2
000F7A  1               
000F7A  1  A0 03                ldy #3
000F7C  1               tldx3:
000F7C  1  A9 FF 48 28          set_stat $ff
000F80  1  BE 18 02             ldx abs1,y
000F83  1  08                   php         ;test stores do not alter flags
000F84  1  8A                   txa
000F85  1  49 C3                eor #$c3
000F87  1  AA                   tax
000F88  1  28                   plp
000F89  1  96 0C                stx zpt,y
000F8B  1  08                   php         ;flags after load/store sequence
000F8C  1  49 C3                eor #$c3
000F8E  1  D9 15 00             cmp zp1,y   ;test result
000F91  1  D0 FE                trap_ne
000F93  1  68                   pla         ;load status
000F94  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
000F98  1  D9 1D 02             cmp fLDx,y  ;test flags
000F9B  1  D0 FE                trap_ne
000F9D  1  88                   dey
000F9E  1  10 DC                bpl tldx3
000FA0  1               
000FA0  1  A0 03                ldy #3      ;testing store result
000FA2  1  A2 00                ldx #0
000FA4  1  B9 0C 00     tstx:   lda zpt,y
000FA7  1  49 C3                eor #$c3
000FA9  1  D9 15 00             cmp zp1,y
000FAC  1  D0 FE                trap_ne     ;store to zp data
000FAE  1  96 0C                stx zpt,y   ;clear
000FB0  1  B9 03 02             lda abst,y
000FB3  1  49 C3                eor #$c3
000FB5  1  D9 18 02             cmp abs1,y
000FB8  1  D0 FE                trap_ne     ;store to abs data
000FBA  1  8A                   txa
000FBB  1  99 03 02             sta abst,y  ;clear
000FBE  1  88                   dey
000FBF  1  10 E3                bpl tstx
000FC1  1  AD 00 02 C9          next_test
000FC5  1  0F D0 FE A9  
000FC9  1  10 8D 00 02  
000FCD  1               
000FCD  1               ; indexed wraparound test (only zp should wrap)
000FCD  1  A0 FD                ldy #3+$fa
000FCF  1  B6 1B        tldx4:  ldx <(zp1-$fa),y   ;wrap on indexed zp
000FD1  1  8A                   txa
000FD2  1  99 09 01             sta abst-$fa,y      ;no STX abs,y!
000FD5  1  88                   dey
000FD6  1  C0 FA                cpy #$fa
000FD8  1  B0 F5                bcs tldx4
000FDA  1  A0 FD                ldy #3+$fa
000FDC  1  BE 1E 01     tldx5:  ldx abs1-$fa,y      ;no wrap on indexed abs
000FDF  1  96 12                stx <(zpt-$fa),y
000FE1  1  88                   dey
000FE2  1  C0 FA                cpy #$fa
000FE4  1  B0 F6                bcs tldx5
000FE6  1  A0 03                ldy #3      ;testing wraparound result
000FE8  1  A2 00                ldx #0
000FEA  1  B9 0C 00     tstx1:  lda zpt,y
000FED  1  D9 15 00             cmp zp1,y
000FF0  1  D0 FE                trap_ne     ;store to zp data
000FF2  1  96 0C                stx zpt,y   ;clear
000FF4  1  B9 03 02             lda abst,y
000FF7  1  D9 18 02             cmp abs1,y
000FFA  1  D0 FE                trap_ne     ;store to abs data
000FFC  1  8A                   txa
000FFD  1  99 03 02             sta abst,y  ;clear
001000  1  88                   dey
001001  1  10 E7                bpl tstx1
001003  1  AD 00 02 C9          next_test
001007  1  10 D0 FE A9  
00100B  1  11 8D 00 02  
00100F  1               
00100F  1               ; LDY / STY - zp,x / abs,x
00100F  1  A2 03                ldx #3
001011  1               tldy:
001011  1  A9 00 48 28          set_stat 0
001015  1  B4 15                ldy zp1,x
001017  1  08                   php         ;test stores do not alter flags
001018  1  98                   tya
001019  1  49 C3                eor #$c3
00101B  1  28                   plp
00101C  1  9D 03 02             sta abst,x
00101F  1  08                   php         ;flags after load/store sequence
001020  1  49 C3                eor #$c3
001022  1  DD 18 02             cmp abs1,x  ;test result
001025  1  D0 FE                trap_ne
001027  1  68                   pla         ;load status
001028  1  09 08 49 38          eor_flag 0
00102C  1  DD 1D 02             cmp fLDx,x  ;test flags
00102F  1  D0 FE                trap_ne
001031  1  CA                   dex
001032  1  10 DD                bpl tldy
001034  1               
001034  1  A2 03                ldx #3
001036  1               tldy1:
001036  1  A9 FF 48 28          set_stat $ff
00103A  1  B4 15                ldy zp1,x
00103C  1  08                   php         ;test stores do not alter flags
00103D  1  98                   tya
00103E  1  49 C3                eor #$c3
001040  1  28                   plp
001041  1  9D 03 02             sta abst,x
001044  1  08                   php         ;flags after load/store sequence
001045  1  49 C3                eor #$c3
001047  1  DD 18 02             cmp abs1,x  ;test result
00104A  1  D0 FE                trap_ne
00104C  1  68                   pla         ;load status
00104D  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001051  1  DD 1D 02             cmp fLDx,x  ;test flags
001054  1  D0 FE                trap_ne
001056  1  CA                   dex
001057  1  10 DD                bpl tldy1
001059  1               
001059  1  A2 03                ldx #3
00105B  1               tldy2:
00105B  1  A9 00 48 28          set_stat 0
00105F  1  BC 18 02             ldy abs1,x
001062  1  08                   php         ;test stores do not alter flags
001063  1  98                   tya
001064  1  49 C3                eor #$c3
001066  1  A8                   tay
001067  1  28                   plp
001068  1  94 0C                sty zpt,x
00106A  1  08                   php         ;flags after load/store sequence
00106B  1  49 C3                eor #$c3
00106D  1  D5 15                cmp zp1,x   ;test result
00106F  1  D0 FE                trap_ne
001071  1  68                   pla         ;load status
001072  1  09 08 49 38          eor_flag 0
001076  1  DD 1D 02             cmp fLDx,x  ;test flags
001079  1  D0 FE                trap_ne
00107B  1  CA                   dex
00107C  1  10 DD                bpl tldy2
00107E  1               
00107E  1  A2 03                ldx #3
001080  1               tldy3:
001080  1  A9 FF 48 28          set_stat $ff
001084  1  BC 18 02             ldy abs1,x
001087  1  08                   php         ;test stores do not alter flags
001088  1  98                   tya
001089  1  49 C3                eor #$c3
00108B  1  A8                   tay
00108C  1  28                   plp
00108D  1  94 0C                sty zpt,x
00108F  1  08                   php         ;flags after load/store sequence
001090  1  49 C3                eor #$c3
001092  1  D5 15                cmp zp1,x   ;test result
001094  1  D0 FE                trap_ne
001096  1  68                   pla         ;load status
001097  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
00109B  1  DD 1D 02             cmp fLDx,x  ;test flags
00109E  1  D0 FE                trap_ne
0010A0  1  CA                   dex
0010A1  1  10 DD                bpl tldy3
0010A3  1               
0010A3  1  A2 03                ldx #3      ;testing store result
0010A5  1  A0 00                ldy #0
0010A7  1  B5 0C        tsty:   lda zpt,x
0010A9  1  49 C3                eor #$c3
0010AB  1  D5 15                cmp zp1,x
0010AD  1  D0 FE                trap_ne     ;store to zp,x data
0010AF  1  94 0C                sty zpt,x   ;clear
0010B1  1  BD 03 02             lda abst,x
0010B4  1  49 C3                eor #$c3
0010B6  1  DD 18 02             cmp abs1,x
0010B9  1  D0 FE                trap_ne     ;store to abs,x data
0010BB  1  8A                   txa
0010BC  1  9D 03 02             sta abst,x  ;clear
0010BF  1  CA                   dex
0010C0  1  10 E5                bpl tsty
0010C2  1  AD 00 02 C9          next_test
0010C6  1  11 D0 FE A9  
0010CA  1  12 8D 00 02  
0010CE  1               
0010CE  1               ; indexed wraparound test (only zp should wrap)
0010CE  1  A2 FD                ldx #3+$fa
0010D0  1  B4 1B        tldy4:  ldy <(zp1-$fa),x   ;wrap on indexed zp
0010D2  1  98                   tya
0010D3  1  9D 09 01             sta abst-$fa,x      ;no STX abs,x!
0010D6  1  CA                   dex
0010D7  1  E0 FA                cpx #$fa
0010D9  1  B0 F5                bcs tldy4
0010DB  1  A2 FD                ldx #3+$fa
0010DD  1  BC 1E 01     tldy5:  ldy abs1-$fa,x      ;no wrap on indexed abs
0010E0  1  94 12                sty <(zpt-$fa),x
0010E2  1  CA                   dex
0010E3  1  E0 FA                cpx #$fa
0010E5  1  B0 F6                bcs tldy5
0010E7  1  A2 03                ldx #3      ;testing wraparound result
0010E9  1  A0 00                ldy #0
0010EB  1  B5 0C        tsty1:  lda zpt,x
0010ED  1  D5 15                cmp zp1,x
0010EF  1  D0 FE                trap_ne     ;store to zp,x data
0010F1  1  94 0C                sty zpt,x   ;clear
0010F3  1  BD 03 02             lda abst,x
0010F6  1  DD 18 02             cmp abs1,x
0010F9  1  D0 FE                trap_ne     ;store to abs,x data
0010FB  1  8A                   txa
0010FC  1  9D 03 02             sta abst,x  ;clear
0010FF  1  CA                   dex
001100  1  10 E9                bpl tsty1
001102  1  AD 00 02 C9          next_test
001106  1  12 D0 FE A9  
00110A  1  13 8D 00 02  
00110E  1               
00110E  1               ; LDX / STX - zp / abs / #
00110E  1  A9 00 48 28          set_stat 0
001112  1  A6 15                ldx zp1
001114  1  08                   php         ;test stores do not alter flags
001115  1  8A                   txa
001116  1  49 C3                eor #$c3
001118  1  AA                   tax
001119  1  28                   plp
00111A  1  8E 03 02             stx abst
00111D  1  08                   php         ;flags after load/store sequence
00111E  1  49 C3                eor #$c3
001120  1  AA                   tax
001121  1  E0 C3                cpx #$c3    ;test result
001123  1  D0 FE                trap_ne
001125  1  68                   pla         ;load status
001126  1  09 08 49 38          eor_flag 0
00112A  1  CD 1D 02             cmp fLDx    ;test flags
00112D  1  D0 FE                trap_ne
00112F  1  A9 00 48 28          set_stat 0
001133  1  A6 16                ldx zp1+1
001135  1  08                   php         ;test stores do not alter flags
001136  1  8A                   txa
001137  1  49 C3                eor #$c3
001139  1  AA                   tax
00113A  1  28                   plp
00113B  1  8E 04 02             stx abst+1
00113E  1  08                   php         ;flags after load/store sequence
00113F  1  49 C3                eor #$c3
001141  1  AA                   tax
001142  1  E0 82                cpx #$82    ;test result
001144  1  D0 FE                trap_ne
001146  1  68                   pla         ;load status
001147  1  09 08 49 38          eor_flag 0
00114B  1  CD 1E 02             cmp fLDx+1  ;test flags
00114E  1  D0 FE                trap_ne
001150  1  A9 00 48 28          set_stat 0
001154  1  A6 17                ldx zp1+2
001156  1  08                   php         ;test stores do not alter flags
001157  1  8A                   txa
001158  1  49 C3                eor #$c3
00115A  1  AA                   tax
00115B  1  28                   plp
00115C  1  8E 05 02             stx abst+2
00115F  1  08                   php         ;flags after load/store sequence
001160  1  49 C3                eor #$c3
001162  1  AA                   tax
001163  1  E0 41                cpx #$41    ;test result
001165  1  D0 FE                trap_ne
001167  1  68                   pla         ;load status
001168  1  09 08 49 38          eor_flag 0
00116C  1  CD 1F 02             cmp fLDx+2  ;test flags
00116F  1  D0 FE                trap_ne
001171  1  A9 00 48 28          set_stat 0
001175  1  A6 18                ldx zp1+3
001177  1  08                   php         ;test stores do not alter flags
001178  1  8A                   txa
001179  1  49 C3                eor #$c3
00117B  1  AA                   tax
00117C  1  28                   plp
00117D  1  8E 06 02             stx abst+3
001180  1  08                   php         ;flags after load/store sequence
001181  1  49 C3                eor #$c3
001183  1  AA                   tax
001184  1  E0 00                cpx #0      ;test result
001186  1  D0 FE                trap_ne
001188  1  68                   pla         ;load status
001189  1  09 08 49 38          eor_flag 0
00118D  1  CD 20 02             cmp fLDx+3  ;test flags
001190  1  D0 FE                trap_ne
001192  1               
001192  1  A9 FF 48 28          set_stat $ff
001196  1  A6 15                ldx zp1
001198  1  08                   php         ;test stores do not alter flags
001199  1  8A                   txa
00119A  1  49 C3                eor #$c3
00119C  1  AA                   tax
00119D  1  28                   plp
00119E  1  8E 03 02             stx abst
0011A1  1  08                   php         ;flags after load/store sequence
0011A2  1  49 C3                eor #$c3
0011A4  1  AA                   tax
0011A5  1  E0 C3                cpx #$c3    ;test result
0011A7  1  D0 FE                trap_ne     ;
0011A9  1  68                   pla         ;load status
0011AA  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0011AE  1  CD 1D 02             cmp fLDx    ;test flags
0011B1  1  D0 FE                trap_ne
0011B3  1  A9 FF 48 28          set_stat $ff
0011B7  1  A6 16                ldx zp1+1
0011B9  1  08                   php         ;test stores do not alter flags
0011BA  1  8A                   txa
0011BB  1  49 C3                eor #$c3
0011BD  1  AA                   tax
0011BE  1  28                   plp
0011BF  1  8E 04 02             stx abst+1
0011C2  1  08                   php         ;flags after load/store sequence
0011C3  1  49 C3                eor #$c3
0011C5  1  AA                   tax
0011C6  1  E0 82                cpx #$82    ;test result
0011C8  1  D0 FE                trap_ne
0011CA  1  68                   pla         ;load status
0011CB  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0011CF  1  CD 1E 02             cmp fLDx+1  ;test flags
0011D2  1  D0 FE                trap_ne
0011D4  1  A9 FF 48 28          set_stat $ff
0011D8  1  A6 17                ldx zp1+2
0011DA  1  08                   php         ;test stores do not alter flags
0011DB  1  8A                   txa
0011DC  1  49 C3                eor #$c3
0011DE  1  AA                   tax
0011DF  1  28                   plp
0011E0  1  8E 05 02             stx abst+2
0011E3  1  08                   php         ;flags after load/store sequence
0011E4  1  49 C3                eor #$c3
0011E6  1  AA                   tax
0011E7  1  E0 41                cpx #$41    ;test result
0011E9  1  D0 FE                trap_ne     ;
0011EB  1  68                   pla         ;load status
0011EC  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0011F0  1  CD 1F 02             cmp fLDx+2  ;test flags
0011F3  1  D0 FE                trap_ne
0011F5  1  A9 FF 48 28          set_stat $ff
0011F9  1  A6 18                ldx zp1+3
0011FB  1  08                   php         ;test stores do not alter flags
0011FC  1  8A                   txa
0011FD  1  49 C3                eor #$c3
0011FF  1  AA                   tax
001200  1  28                   plp
001201  1  8E 06 02             stx abst+3
001204  1  08                   php         ;flags after load/store sequence
001205  1  49 C3                eor #$c3
001207  1  AA                   tax
001208  1  E0 00                cpx #0      ;test result
00120A  1  D0 FE                trap_ne
00120C  1  68                   pla         ;load status
00120D  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001211  1  CD 20 02             cmp fLDx+3  ;test flags
001214  1  D0 FE                trap_ne
001216  1               
001216  1  A9 00 48 28          set_stat 0
00121A  1  AE 18 02             ldx abs1
00121D  1  08                   php         ;test stores do not alter flags
00121E  1  8A                   txa
00121F  1  49 C3                eor #$c3
001221  1  AA                   tax
001222  1  28                   plp
001223  1  86 0C                stx zpt
001225  1  08                   php         ;flags after load/store sequence
001226  1  49 C3                eor #$c3
001228  1  C5 15                cmp zp1     ;test result
00122A  1  D0 FE                trap_ne
00122C  1  68                   pla         ;load status
00122D  1  09 08 49 38          eor_flag 0
001231  1  CD 1D 02             cmp fLDx    ;test flags
001234  1  D0 FE                trap_ne
001236  1  A9 00 48 28          set_stat 0
00123A  1  AE 19 02             ldx abs1+1
00123D  1  08                   php         ;test stores do not alter flags
00123E  1  8A                   txa
00123F  1  49 C3                eor #$c3
001241  1  AA                   tax
001242  1  28                   plp
001243  1  86 0D                stx zpt+1
001245  1  08                   php         ;flags after load/store sequence
001246  1  49 C3                eor #$c3
001248  1  C5 16                cmp zp1+1   ;test result
00124A  1  D0 FE                trap_ne
00124C  1  68                   pla         ;load status
00124D  1  09 08 49 38          eor_flag 0
001251  1  CD 1E 02             cmp fLDx+1  ;test flags
001254  1  D0 FE                trap_ne
001256  1  A9 00 48 28          set_stat 0
00125A  1  AE 1A 02             ldx abs1+2
00125D  1  08                   php         ;test stores do not alter flags
00125E  1  8A                   txa
00125F  1  49 C3                eor #$c3
001261  1  AA                   tax
001262  1  28                   plp
001263  1  86 0E                stx zpt+2
001265  1  08                   php         ;flags after load/store sequence
001266  1  49 C3                eor #$c3
001268  1  C5 17                cmp zp1+2   ;test result
00126A  1  D0 FE                trap_ne
00126C  1  68                   pla         ;load status
00126D  1  09 08 49 38          eor_flag 0
001271  1  CD 1F 02             cmp fLDx+2  ;test flags
001274  1  D0 FE                trap_ne
001276  1  A9 00 48 28          set_stat 0
00127A  1  AE 1B 02             ldx abs1+3
00127D  1  08                   php         ;test stores do not alter flags
00127E  1  8A                   txa
00127F  1  49 C3                eor #$c3
001281  1  AA                   tax
001282  1  28                   plp
001283  1  86 0F                stx zpt+3
001285  1  08                   php         ;flags after load/store sequence
001286  1  49 C3                eor #$c3
001288  1  C5 18                cmp zp1+3   ;test result
00128A  1  D0 FE                trap_ne
00128C  1  68                   pla         ;load status
00128D  1  09 08 49 38          eor_flag 0
001291  1  CD 20 02             cmp fLDx+3  ;test flags
001294  1  D0 FE                trap_ne
001296  1               
001296  1  A9 FF 48 28          set_stat $ff
00129A  1  AE 18 02             ldx abs1
00129D  1  08                   php         ;test stores do not alter flags
00129E  1  8A                   txa
00129F  1  49 C3                eor #$c3
0012A1  1  AA                   tax
0012A2  1  28                   plp
0012A3  1  86 0C                stx zpt
0012A5  1  08                   php         ;flags after load/store sequence
0012A6  1  49 C3                eor #$c3
0012A8  1  AA                   tax
0012A9  1  E4 15                cpx zp1     ;test result
0012AB  1  D0 FE                trap_ne
0012AD  1  68                   pla         ;load status
0012AE  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0012B2  1  CD 1D 02             cmp fLDx    ;test flags
0012B5  1  D0 FE                trap_ne
0012B7  1  A9 FF 48 28          set_stat $ff
0012BB  1  AE 19 02             ldx abs1+1
0012BE  1  08                   php         ;test stores do not alter flags
0012BF  1  8A                   txa
0012C0  1  49 C3                eor #$c3
0012C2  1  AA                   tax
0012C3  1  28                   plp
0012C4  1  86 0D                stx zpt+1
0012C6  1  08                   php         ;flags after load/store sequence
0012C7  1  49 C3                eor #$c3
0012C9  1  AA                   tax
0012CA  1  E4 16                cpx zp1+1   ;test result
0012CC  1  D0 FE                trap_ne
0012CE  1  68                   pla         ;load status
0012CF  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0012D3  1  CD 1E 02             cmp fLDx+1  ;test flags
0012D6  1  D0 FE                trap_ne
0012D8  1  A9 FF 48 28          set_stat $ff
0012DC  1  AE 1A 02             ldx abs1+2
0012DF  1  08                   php         ;test stores do not alter flags
0012E0  1  8A                   txa
0012E1  1  49 C3                eor #$c3
0012E3  1  AA                   tax
0012E4  1  28                   plp
0012E5  1  86 0E                stx zpt+2
0012E7  1  08                   php         ;flags after load/store sequence
0012E8  1  49 C3                eor #$c3
0012EA  1  AA                   tax
0012EB  1  E4 17                cpx zp1+2   ;test result
0012ED  1  D0 FE                trap_ne
0012EF  1  68                   pla         ;load status
0012F0  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0012F4  1  CD 1F 02             cmp fLDx+2  ;test flags
0012F7  1  D0 FE                trap_ne
0012F9  1  A9 FF 48 28          set_stat $ff
0012FD  1  AE 1B 02             ldx abs1+3
001300  1  08                   php         ;test stores do not alter flags
001301  1  8A                   txa
001302  1  49 C3                eor #$c3
001304  1  AA                   tax
001305  1  28                   plp
001306  1  86 0F                stx zpt+3
001308  1  08                   php         ;flags after load/store sequence
001309  1  49 C3                eor #$c3
00130B  1  AA                   tax
00130C  1  E4 18                cpx zp1+3   ;test result
00130E  1  D0 FE                trap_ne
001310  1  68                   pla         ;load status
001311  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001315  1  CD 20 02             cmp fLDx+3  ;test flags
001318  1  D0 FE                trap_ne
00131A  1               
00131A  1  A9 00 48 28          set_stat 0
00131E  1  A2 C3                ldx #$c3
001320  1  08                   php
001321  1  EC 18 02             cpx abs1    ;test result
001324  1  D0 FE                trap_ne
001326  1  68                   pla         ;load status
001327  1  09 08 49 38          eor_flag 0
00132B  1  CD 1D 02             cmp fLDx    ;test flags
00132E  1  D0 FE                trap_ne
001330  1  A9 00 48 28          set_stat 0
001334  1  A2 82                ldx #$82
001336  1  08                   php
001337  1  EC 19 02             cpx abs1+1  ;test result
00133A  1  D0 FE                trap_ne
00133C  1  68                   pla         ;load status
00133D  1  09 08 49 38          eor_flag 0
001341  1  CD 1E 02             cmp fLDx+1  ;test flags
001344  1  D0 FE                trap_ne
001346  1  A9 00 48 28          set_stat 0
00134A  1  A2 41                ldx #$41
00134C  1  08                   php
00134D  1  EC 1A 02             cpx abs1+2  ;test result
001350  1  D0 FE                trap_ne
001352  1  68                   pla         ;load status
001353  1  09 08 49 38          eor_flag 0
001357  1  CD 1F 02             cmp fLDx+2  ;test flags
00135A  1  D0 FE                trap_ne
00135C  1  A9 00 48 28          set_stat 0
001360  1  A2 00                ldx #0
001362  1  08                   php
001363  1  EC 1B 02             cpx abs1+3  ;test result
001366  1  D0 FE                trap_ne
001368  1  68                   pla         ;load status
001369  1  09 08 49 38          eor_flag 0
00136D  1  CD 20 02             cmp fLDx+3  ;test flags
001370  1  D0 FE                trap_ne
001372  1               
001372  1  A9 FF 48 28          set_stat $ff
001376  1  A2 C3                ldx #$c3
001378  1  08                   php
001379  1  EC 18 02             cpx abs1    ;test result
00137C  1  D0 FE                trap_ne
00137E  1  68                   pla         ;load status
00137F  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001383  1  CD 1D 02             cmp fLDx    ;test flags
001386  1  D0 FE                trap_ne
001388  1  A9 FF 48 28          set_stat $ff
00138C  1  A2 82                ldx #$82
00138E  1  08                   php
00138F  1  EC 19 02             cpx abs1+1  ;test result
001392  1  D0 FE                trap_ne
001394  1  68                   pla         ;load status
001395  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001399  1  CD 1E 02             cmp fLDx+1  ;test flags
00139C  1  D0 FE                trap_ne
00139E  1  A9 FF 48 28          set_stat $ff
0013A2  1  A2 41                ldx #$41
0013A4  1  08                   php
0013A5  1  EC 1A 02             cpx abs1+2  ;test result
0013A8  1  D0 FE                trap_ne
0013AA  1  68                   pla         ;load status
0013AB  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0013AF  1  CD 1F 02             cmp fLDx+2  ;test flags
0013B2  1  D0 FE                trap_ne
0013B4  1  A9 FF 48 28          set_stat $ff
0013B8  1  A2 00                ldx #0
0013BA  1  08                   php
0013BB  1  EC 1B 02             cpx abs1+3  ;test result
0013BE  1  D0 FE                trap_ne
0013C0  1  68                   pla         ;load status
0013C1  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0013C5  1  CD 20 02             cmp fLDx+3  ;test flags
0013C8  1  D0 FE                trap_ne
0013CA  1               
0013CA  1  A2 00                ldx #0
0013CC  1  A5 0C                lda zpt
0013CE  1  49 C3                eor #$c3
0013D0  1  C5 15                cmp zp1
0013D2  1  D0 FE                trap_ne     ;store to zp data
0013D4  1  86 0C                stx zpt     ;clear
0013D6  1  AD 03 02             lda abst
0013D9  1  49 C3                eor #$c3
0013DB  1  CD 18 02             cmp abs1
0013DE  1  D0 FE                trap_ne     ;store to abs data
0013E0  1  8E 03 02             stx abst    ;clear
0013E3  1  A5 0D                lda zpt+1
0013E5  1  49 C3                eor #$c3
0013E7  1  C5 16                cmp zp1+1
0013E9  1  D0 FE                trap_ne     ;store to zp data
0013EB  1  86 0D                stx zpt+1   ;clear
0013ED  1  AD 04 02             lda abst+1
0013F0  1  49 C3                eor #$c3
0013F2  1  CD 19 02             cmp abs1+1
0013F5  1  D0 FE                trap_ne     ;store to abs data
0013F7  1  8E 04 02             stx abst+1  ;clear
0013FA  1  A5 0E                lda zpt+2
0013FC  1  49 C3                eor #$c3
0013FE  1  C5 17                cmp zp1+2
001400  1  D0 FE                trap_ne     ;store to zp data
001402  1  86 0E                stx zpt+2   ;clear
001404  1  AD 05 02             lda abst+2
001407  1  49 C3                eor #$c3
001409  1  CD 1A 02             cmp abs1+2
00140C  1  D0 FE                trap_ne     ;store to abs data
00140E  1  8E 05 02             stx abst+2  ;clear
001411  1  A5 0F                lda zpt+3
001413  1  49 C3                eor #$c3
001415  1  C5 18                cmp zp1+3
001417  1  D0 FE                trap_ne     ;store to zp data
001419  1  86 0F                stx zpt+3   ;clear
00141B  1  AD 06 02             lda abst+3
00141E  1  49 C3                eor #$c3
001420  1  CD 1B 02             cmp abs1+3
001423  1  D0 FE                trap_ne     ;store to abs data
001425  1  8E 06 02             stx abst+3  ;clear
001428  1  AD 00 02 C9          next_test
00142C  1  13 D0 FE A9  
001430  1  14 8D 00 02  
001434  1               
001434  1               ; LDY / STY - zp / abs / #
001434  1  A9 00 48 28          set_stat 0
001438  1  A4 15                ldy zp1
00143A  1  08                   php         ;test stores do not alter flags
00143B  1  98                   tya
00143C  1  49 C3                eor #$c3
00143E  1  A8                   tay
00143F  1  28                   plp
001440  1  8C 03 02             sty abst
001443  1  08                   php         ;flags after load/store sequence
001444  1  49 C3                eor #$c3
001446  1  A8                   tay
001447  1  C0 C3                cpy #$c3    ;test result
001449  1  D0 FE                trap_ne
00144B  1  68                   pla         ;load status
00144C  1  09 08 49 38          eor_flag 0
001450  1  CD 1D 02             cmp fLDx    ;test flags
001453  1  D0 FE                trap_ne
001455  1  A9 00 48 28          set_stat 0
001459  1  A4 16                ldy zp1+1
00145B  1  08                   php         ;test stores do not alter flags
00145C  1  98                   tya
00145D  1  49 C3                eor #$c3
00145F  1  A8                   tay
001460  1  28                   plp
001461  1  8C 04 02             sty abst+1
001464  1  08                   php         ;flags after load/store sequence
001465  1  49 C3                eor #$c3
001467  1  A8                   tay
001468  1  C0 82                cpy #$82    ;test result
00146A  1  D0 FE                trap_ne
00146C  1  68                   pla         ;load status
00146D  1  09 08 49 38          eor_flag 0
001471  1  CD 1E 02             cmp fLDx+1  ;test flags
001474  1  D0 FE                trap_ne
001476  1  A9 00 48 28          set_stat 0
00147A  1  A4 17                ldy zp1+2
00147C  1  08                   php         ;test stores do not alter flags
00147D  1  98                   tya
00147E  1  49 C3                eor #$c3
001480  1  A8                   tay
001481  1  28                   plp
001482  1  8C 05 02             sty abst+2
001485  1  08                   php         ;flags after load/store sequence
001486  1  49 C3                eor #$c3
001488  1  A8                   tay
001489  1  C0 41                cpy #$41    ;test result
00148B  1  D0 FE                trap_ne
00148D  1  68                   pla         ;load status
00148E  1  09 08 49 38          eor_flag 0
001492  1  CD 1F 02             cmp fLDx+2  ;test flags
001495  1  D0 FE                trap_ne
001497  1  A9 00 48 28          set_stat 0
00149B  1  A4 18                ldy zp1+3
00149D  1  08                   php         ;test stores do not alter flags
00149E  1  98                   tya
00149F  1  49 C3                eor #$c3
0014A1  1  A8                   tay
0014A2  1  28                   plp
0014A3  1  8C 06 02             sty abst+3
0014A6  1  08                   php         ;flags after load/store sequence
0014A7  1  49 C3                eor #$c3
0014A9  1  A8                   tay
0014AA  1  C0 00                cpy #0      ;test result
0014AC  1  D0 FE                trap_ne
0014AE  1  68                   pla         ;load status
0014AF  1  09 08 49 38          eor_flag 0
0014B3  1  CD 20 02             cmp fLDx+3  ;test flags
0014B6  1  D0 FE                trap_ne
0014B8  1               
0014B8  1  A9 FF 48 28          set_stat $ff
0014BC  1  A4 15                ldy zp1
0014BE  1  08                   php         ;test stores do not alter flags
0014BF  1  98                   tya
0014C0  1  49 C3                eor #$c3
0014C2  1  A8                   tay
0014C3  1  28                   plp
0014C4  1  8C 03 02             sty abst
0014C7  1  08                   php         ;flags after load/store sequence
0014C8  1  49 C3                eor #$c3
0014CA  1  A8                   tay
0014CB  1  C0 C3                cpy #$c3    ;test result
0014CD  1  D0 FE                trap_ne
0014CF  1  68                   pla         ;load status
0014D0  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0014D4  1  CD 1D 02             cmp fLDx    ;test flags
0014D7  1  D0 FE                trap_ne
0014D9  1  A9 FF 48 28          set_stat $ff
0014DD  1  A4 16                ldy zp1+1
0014DF  1  08                   php         ;test stores do not alter flags
0014E0  1  98                   tya
0014E1  1  49 C3                eor #$c3
0014E3  1  A8                   tay
0014E4  1  28                   plp
0014E5  1  8C 04 02             sty abst+1
0014E8  1  08                   php         ;flags after load/store sequence
0014E9  1  49 C3                eor #$c3
0014EB  1  A8                   tay
0014EC  1  C0 82                cpy #$82   ;test result
0014EE  1  D0 FE                trap_ne
0014F0  1  68                   pla         ;load status
0014F1  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0014F5  1  CD 1E 02             cmp fLDx+1  ;test flags
0014F8  1  D0 FE                trap_ne
0014FA  1  A9 FF 48 28          set_stat $ff
0014FE  1  A4 17                ldy zp1+2
001500  1  08                   php         ;test stores do not alter flags
001501  1  98                   tya
001502  1  49 C3                eor #$c3
001504  1  A8                   tay
001505  1  28                   plp
001506  1  8C 05 02             sty abst+2
001509  1  08                   php         ;flags after load/store sequence
00150A  1  49 C3                eor #$c3
00150C  1  A8                   tay
00150D  1  C0 41                cpy #$41    ;test result
00150F  1  D0 FE                trap_ne
001511  1  68                   pla         ;load status
001512  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001516  1  CD 1F 02             cmp fLDx+2  ;test flags
001519  1  D0 FE                trap_ne
00151B  1  A9 FF 48 28          set_stat $ff
00151F  1  A4 18                ldy zp1+3
001521  1  08                   php         ;test stores do not alter flags
001522  1  98                   tya
001523  1  49 C3                eor #$c3
001525  1  A8                   tay
001526  1  28                   plp
001527  1  8C 06 02             sty abst+3
00152A  1  08                   php         ;flags after load/store sequence
00152B  1  49 C3                eor #$c3
00152D  1  A8                   tay
00152E  1  C0 00                cpy #0      ;test result
001530  1  D0 FE                trap_ne
001532  1  68                   pla         ;load status
001533  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001537  1  CD 20 02             cmp fLDx+3  ;test flags
00153A  1  D0 FE                trap_ne
00153C  1               
00153C  1  A9 00 48 28          set_stat 0
001540  1  AC 18 02             ldy abs1
001543  1  08                   php         ;test stores do not alter flags
001544  1  98                   tya
001545  1  49 C3                eor #$c3
001547  1  A8                   tay
001548  1  28                   plp
001549  1  84 0C                sty zpt
00154B  1  08                   php         ;flags after load/store sequence
00154C  1  49 C3                eor #$c3
00154E  1  A8                   tay
00154F  1  C4 15                cpy zp1     ;test result
001551  1  D0 FE                trap_ne
001553  1  68                   pla         ;load status
001554  1  09 08 49 38          eor_flag 0
001558  1  CD 1D 02             cmp fLDx    ;test flags
00155B  1  D0 FE                trap_ne
00155D  1  A9 00 48 28          set_stat 0
001561  1  AC 19 02             ldy abs1+1
001564  1  08                   php         ;test stores do not alter flags
001565  1  98                   tya
001566  1  49 C3                eor #$c3
001568  1  A8                   tay
001569  1  28                   plp
00156A  1  84 0D                sty zpt+1
00156C  1  08                   php         ;flags after load/store sequence
00156D  1  49 C3                eor #$c3
00156F  1  A8                   tay
001570  1  C4 16                cpy zp1+1   ;test result
001572  1  D0 FE                trap_ne
001574  1  68                   pla         ;load status
001575  1  09 08 49 38          eor_flag 0
001579  1  CD 1E 02             cmp fLDx+1  ;test flags
00157C  1  D0 FE                trap_ne
00157E  1  A9 00 48 28          set_stat 0
001582  1  AC 1A 02             ldy abs1+2
001585  1  08                   php         ;test stores do not alter flags
001586  1  98                   tya
001587  1  49 C3                eor #$c3
001589  1  A8                   tay
00158A  1  28                   plp
00158B  1  84 0E                sty zpt+2
00158D  1  08                   php         ;flags after load/store sequence
00158E  1  49 C3                eor #$c3
001590  1  A8                   tay
001591  1  C4 17                cpy zp1+2   ;test result
001593  1  D0 FE                trap_ne
001595  1  68                   pla         ;load status
001596  1  09 08 49 38          eor_flag 0
00159A  1  CD 1F 02             cmp fLDx+2  ;test flags
00159D  1  D0 FE                trap_ne
00159F  1  A9 00 48 28          set_stat 0
0015A3  1  AC 1B 02             ldy abs1+3
0015A6  1  08                   php         ;test stores do not alter flags
0015A7  1  98                   tya
0015A8  1  49 C3                eor #$c3
0015AA  1  A8                   tay
0015AB  1  28                   plp
0015AC  1  84 0F                sty zpt+3
0015AE  1  08                   php         ;flags after load/store sequence
0015AF  1  49 C3                eor #$c3
0015B1  1  A8                   tay
0015B2  1  C4 18                cpy zp1+3   ;test result
0015B4  1  D0 FE                trap_ne
0015B6  1  68                   pla         ;load status
0015B7  1  09 08 49 38          eor_flag 0
0015BB  1  CD 20 02             cmp fLDx+3  ;test flags
0015BE  1  D0 FE                trap_ne
0015C0  1               
0015C0  1  A9 FF 48 28          set_stat $ff
0015C4  1  AC 18 02             ldy abs1
0015C7  1  08                   php         ;test stores do not alter flags
0015C8  1  98                   tya
0015C9  1  49 C3                eor #$c3
0015CB  1  A8                   tay
0015CC  1  28                   plp
0015CD  1  84 0C                sty zpt
0015CF  1  08                   php         ;flags after load/store sequence
0015D0  1  49 C3                eor #$c3
0015D2  1  A8                   tay
0015D3  1  C5 15                cmp zp1     ;test result
0015D5  1  D0 FE                trap_ne
0015D7  1  68                   pla         ;load status
0015D8  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0015DC  1  CD 1D 02             cmp fLDx    ;test flags
0015DF  1  D0 FE                trap_ne
0015E1  1  A9 FF 48 28          set_stat $ff
0015E5  1  AC 19 02             ldy abs1+1
0015E8  1  08                   php         ;test stores do not alter flags
0015E9  1  98                   tya
0015EA  1  49 C3                eor #$c3
0015EC  1  A8                   tay
0015ED  1  28                   plp
0015EE  1  84 0D                sty zpt+1
0015F0  1  08                   php         ;flags after load/store sequence
0015F1  1  49 C3                eor #$c3
0015F3  1  A8                   tay
0015F4  1  C5 16                cmp zp1+1   ;test result
0015F6  1  D0 FE                trap_ne
0015F8  1  68                   pla         ;load status
0015F9  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0015FD  1  CD 1E 02             cmp fLDx+1  ;test flags
001600  1  D0 FE                trap_ne
001602  1  A9 FF 48 28          set_stat $ff
001606  1  AC 1A 02             ldy abs1+2
001609  1  08                   php         ;test stores do not alter flags
00160A  1  98                   tya
00160B  1  49 C3                eor #$c3
00160D  1  A8                   tay
00160E  1  28                   plp
00160F  1  84 0E                sty zpt+2
001611  1  08                   php         ;flags after load/store sequence
001612  1  49 C3                eor #$c3
001614  1  A8                   tay
001615  1  C5 17                cmp zp1+2   ;test result
001617  1  D0 FE                trap_ne
001619  1  68                   pla         ;load status
00161A  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
00161E  1  CD 1F 02             cmp fLDx+2  ;test flags
001621  1  D0 FE                trap_ne
001623  1  A9 FF 48 28          set_stat $ff
001627  1  AC 1B 02             ldy abs1+3
00162A  1  08                   php         ;test stores do not alter flags
00162B  1  98                   tya
00162C  1  49 C3                eor #$c3
00162E  1  A8                   tay
00162F  1  28                   plp
001630  1  84 0F                sty zpt+3
001632  1  08                   php         ;flags after load/store sequence
001633  1  49 C3                eor #$c3
001635  1  A8                   tay
001636  1  C5 18                cmp zp1+3   ;test result
001638  1  D0 FE                trap_ne
00163A  1  68                   pla         ;load status
00163B  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
00163F  1  CD 20 02             cmp fLDx+3  ;test flags
001642  1  D0 FE                trap_ne
001644  1               
001644  1               
001644  1  A9 00 48 28          set_stat 0
001648  1  A0 C3                ldy #$c3
00164A  1  08                   php
00164B  1  CC 18 02             cpy abs1    ;test result
00164E  1  D0 FE                trap_ne
001650  1  68                   pla         ;load status
001651  1  09 08 49 38          eor_flag 0
001655  1  CD 1D 02             cmp fLDx    ;test flags
001658  1  D0 FE                trap_ne
00165A  1  A9 00 48 28          set_stat 0
00165E  1  A0 82                ldy #$82
001660  1  08                   php
001661  1  CC 19 02             cpy abs1+1  ;test result
001664  1  D0 FE                trap_ne
001666  1  68                   pla         ;load status
001667  1  09 08 49 38          eor_flag 0
00166B  1  CD 1E 02             cmp fLDx+1  ;test flags
00166E  1  D0 FE                trap_ne
001670  1  A9 00 48 28          set_stat 0
001674  1  A0 41                ldy #$41
001676  1  08                   php
001677  1  CC 1A 02             cpy abs1+2  ;test result
00167A  1  D0 FE                trap_ne
00167C  1  68                   pla         ;load status
00167D  1  09 08 49 38          eor_flag 0
001681  1  CD 1F 02             cmp fLDx+2  ;test flags
001684  1  D0 FE                trap_ne
001686  1  A9 00 48 28          set_stat 0
00168A  1  A0 00                ldy #0
00168C  1  08                   php
00168D  1  CC 1B 02             cpy abs1+3  ;test result
001690  1  D0 FE                trap_ne
001692  1  68                   pla         ;load status
001693  1  09 08 49 38          eor_flag 0
001697  1  CD 20 02             cmp fLDx+3  ;test flags
00169A  1  D0 FE                trap_ne
00169C  1               
00169C  1  A9 FF 48 28          set_stat $ff
0016A0  1  A0 C3                ldy #$c3
0016A2  1  08                   php
0016A3  1  CC 18 02             cpy abs1    ;test result
0016A6  1  D0 FE                trap_ne
0016A8  1  68                   pla         ;load status
0016A9  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0016AD  1  CD 1D 02             cmp fLDx    ;test flags
0016B0  1  D0 FE                trap_ne
0016B2  1  A9 FF 48 28          set_stat $ff
0016B6  1  A0 82                ldy #$82
0016B8  1  08                   php
0016B9  1  CC 19 02             cpy abs1+1  ;test result
0016BC  1  D0 FE                trap_ne
0016BE  1  68                   pla         ;load status
0016BF  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0016C3  1  CD 1E 02             cmp fLDx+1  ;test flags
0016C6  1  D0 FE                trap_ne
0016C8  1  A9 FF 48 28          set_stat $ff
0016CC  1  A0 41                ldy #$41
0016CE  1  08                   php
0016CF  1  CC 1A 02             cpy abs1+2   ;test result
0016D2  1  D0 FE                trap_ne
0016D4  1  68                   pla         ;load status
0016D5  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0016D9  1  CD 1F 02             cmp fLDx+2  ;test flags
0016DC  1  D0 FE                trap_ne
0016DE  1  A9 FF 48 28          set_stat $ff
0016E2  1  A0 00                ldy #0
0016E4  1  08                   php
0016E5  1  CC 1B 02             cpy abs1+3  ;test result
0016E8  1  D0 FE                trap_ne
0016EA  1  68                   pla         ;load status
0016EB  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0016EF  1  CD 20 02             cmp fLDx+3  ;test flags
0016F2  1  D0 FE                trap_ne
0016F4  1               
0016F4  1  A0 00                ldy #0
0016F6  1  A5 0C                lda zpt
0016F8  1  49 C3                eor #$c3
0016FA  1  C5 15                cmp zp1
0016FC  1  D0 FE                trap_ne     ;store to zp   data
0016FE  1  84 0C                sty zpt     ;clear
001700  1  AD 03 02             lda abst
001703  1  49 C3                eor #$c3
001705  1  CD 18 02             cmp abs1
001708  1  D0 FE                trap_ne     ;store to abs   data
00170A  1  8C 03 02             sty abst    ;clear
00170D  1  A5 0D                lda zpt+1
00170F  1  49 C3                eor #$c3
001711  1  C5 16                cmp zp1+1
001713  1  D0 FE                trap_ne     ;store to zp+1 data
001715  1  84 0D                sty zpt+1   ;clear
001717  1  AD 04 02             lda abst+1
00171A  1  49 C3                eor #$c3
00171C  1  CD 19 02             cmp abs1+1
00171F  1  D0 FE                trap_ne     ;store to abs+1 data
001721  1  8C 04 02             sty abst+1  ;clear
001724  1  A5 0E                lda zpt+2
001726  1  49 C3                eor #$c3
001728  1  C5 17                cmp zp1+2
00172A  1  D0 FE                trap_ne     ;store to zp+2 data
00172C  1  84 0E                sty zpt+2   ;clear
00172E  1  AD 05 02             lda abst+2
001731  1  49 C3                eor #$c3
001733  1  CD 1A 02             cmp abs1+2
001736  1  D0 FE                trap_ne     ;store to abs+2 data
001738  1  8C 05 02             sty abst+2  ;clear
00173B  1  A5 0F                lda zpt+3
00173D  1  49 C3                eor #$c3
00173F  1  C5 18                cmp zp1+3
001741  1  D0 FE                trap_ne     ;store to zp+3 data
001743  1  84 0F                sty zpt+3   ;clear
001745  1  AD 06 02             lda abst+3
001748  1  49 C3                eor #$c3
00174A  1  CD 1B 02             cmp abs1+3
00174D  1  D0 FE                trap_ne     ;store to abs+3 data
00174F  1  8C 06 02             sty abst+3  ;clear
001752  1  AD 00 02 C9          next_test
001756  1  14 D0 FE A9  
00175A  1  15 8D 00 02  
00175E  1               
00175E  1               ; testing load / store accumulator LDA / STA all addressing modes
00175E  1               ; LDA / STA - zp,x / abs,x
00175E  1  A2 03                ldx #3
001760  1               tldax:
001760  1  A9 00 48 28          set_stat 0
001764  1  B5 15                lda zp1,x
001766  1  08                   php         ;test stores do not alter flags
001767  1  49 C3                eor #$c3
001769  1  28                   plp
00176A  1  9D 03 02             sta abst,x
00176D  1  08                   php         ;flags after load/store sequence
00176E  1  49 C3                eor #$c3
001770  1  DD 18 02             cmp abs1,x  ;test result
001773  1  D0 FE                trap_ne
001775  1  68                   pla         ;load status
001776  1  09 08 49 38          eor_flag 0
00177A  1  DD 1D 02             cmp fLDx,x  ;test flags
00177D  1  D0 FE                trap_ne
00177F  1  CA                   dex
001780  1  10 DE                bpl tldax
001782  1               
001782  1  A2 03                ldx #3
001784  1               tldax1:
001784  1  A9 FF 48 28          set_stat $ff
001788  1  B5 15                lda zp1,x
00178A  1  08                   php         ;test stores do not alter flags
00178B  1  49 C3                eor #$c3
00178D  1  28                   plp
00178E  1  9D 03 02             sta abst,x
001791  1  08                   php         ;flags after load/store sequence
001792  1  49 C3                eor #$c3
001794  1  DD 18 02             cmp abs1,x   ;test result
001797  1  D0 FE                trap_ne
001799  1  68                   pla         ;load status
00179A  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
00179E  1  DD 1D 02             cmp fLDx,x  ;test flags
0017A1  1  D0 FE                trap_ne
0017A3  1  CA                   dex
0017A4  1  10 DE                bpl tldax1
0017A6  1               
0017A6  1  A2 03                ldx #3
0017A8  1               tldax2:
0017A8  1  A9 00 48 28          set_stat 0
0017AC  1  BD 18 02             lda abs1,x
0017AF  1  08                   php         ;test stores do not alter flags
0017B0  1  49 C3                eor #$c3
0017B2  1  28                   plp
0017B3  1  95 0C                sta zpt,x
0017B5  1  08                   php         ;flags after load/store sequence
0017B6  1  49 C3                eor #$c3
0017B8  1  D5 15                cmp zp1,x   ;test result
0017BA  1  D0 FE                trap_ne
0017BC  1  68                   pla         ;load status
0017BD  1  09 08 49 38          eor_flag 0
0017C1  1  DD 1D 02             cmp fLDx,x  ;test flags
0017C4  1  D0 FE                trap_ne
0017C6  1  CA                   dex
0017C7  1  10 DF                bpl tldax2
0017C9  1               
0017C9  1  A2 03                ldx #3
0017CB  1               tldax3:
0017CB  1  A9 FF 48 28          set_stat $ff
0017CF  1  BD 18 02             lda abs1,x
0017D2  1  08                   php         ;test stores do not alter flags
0017D3  1  49 C3                eor #$c3
0017D5  1  28                   plp
0017D6  1  95 0C                sta zpt,x
0017D8  1  08                   php         ;flags after load/store sequence
0017D9  1  49 C3                eor #$c3
0017DB  1  D5 15                cmp zp1,x   ;test result
0017DD  1  D0 FE                trap_ne
0017DF  1  68                   pla         ;load status
0017E0  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0017E4  1  DD 1D 02             cmp fLDx,x  ;test flags
0017E7  1  D0 FE                trap_ne
0017E9  1  CA                   dex
0017EA  1  10 DF                bpl tldax3
0017EC  1               
0017EC  1  A2 03                ldx #3      ;testing store result
0017EE  1  A0 00                ldy #0
0017F0  1  B5 0C        tstax:  lda zpt,x
0017F2  1  49 C3                eor #$c3
0017F4  1  D5 15                cmp zp1,x
0017F6  1  D0 FE                trap_ne     ;store to zp,x data
0017F8  1  94 0C                sty zpt,x   ;clear
0017FA  1  BD 03 02             lda abst,x
0017FD  1  49 C3                eor #$c3
0017FF  1  DD 18 02             cmp abs1,x
001802  1  D0 FE                trap_ne     ;store to abs,x data
001804  1  8A                   txa
001805  1  9D 03 02             sta abst,x  ;clear
001808  1  CA                   dex
001809  1  10 E5                bpl tstax
00180B  1  AD 00 02 C9          next_test
00180F  1  15 D0 FE A9  
001813  1  16 8D 00 02  
001817  1               
001817  1               ; LDA / STA - (zp),y / abs,y / (zp,x)
001817  1  A0 03                ldy #3
001819  1               tlday:
001819  1  A9 00 48 28          set_stat 0
00181D  1  B1 26                lda (ind1),y
00181F  1  08                   php         ;test stores do not alter flags
001820  1  49 C3                eor #$c3
001822  1  28                   plp
001823  1  99 03 02             sta abst,y
001826  1  08                   php         ;flags after load/store sequence
001827  1  49 C3                eor #$c3
001829  1  D9 18 02             cmp abs1,y  ;test result
00182C  1  D0 FE                trap_ne
00182E  1  68                   pla         ;load status
00182F  1  09 08 49 38          eor_flag 0
001833  1  D9 1D 02             cmp fLDx,y  ;test flags
001836  1  D0 FE                trap_ne
001838  1  88                   dey
001839  1  10 DE                bpl tlday
00183B  1               
00183B  1  A0 03                ldy #3
00183D  1               tlday1:
00183D  1  A9 FF 48 28          set_stat $ff
001841  1  B1 26                lda (ind1),y
001843  1  08                   php         ;test stores do not alter flags
001844  1  49 C3                eor #$c3
001846  1  28                   plp
001847  1  99 03 02             sta abst,y
00184A  1  08                   php         ;flags after load/store sequence
00184B  1  49 C3                eor #$c3
00184D  1  D9 18 02             cmp abs1,y  ;test result
001850  1  D0 FE                trap_ne
001852  1  68                   pla         ;load status
001853  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001857  1  D9 1D 02             cmp fLDx,y  ;test flags
00185A  1  D0 FE                trap_ne
00185C  1  88                   dey
00185D  1  10 DE                bpl tlday1
00185F  1               
00185F  1  A0 03                ldy #3      ;testing store result
001861  1  A2 00                ldx #0
001863  1  B9 03 02     tstay:  lda abst,y
001866  1  49 C3                eor #$c3
001868  1  D9 18 02             cmp abs1,y
00186B  1  D0 FE                trap_ne     ;store to abs data
00186D  1  8A                   txa
00186E  1  99 03 02             sta abst,y  ;clear
001871  1  88                   dey
001872  1  10 EF                bpl tstay
001874  1               
001874  1  A0 03                ldy #3
001876  1               tlday2:
001876  1  A9 00 48 28          set_stat 0
00187A  1  B9 18 02             lda abs1,y
00187D  1  08                   php         ;test stores do not alter flags
00187E  1  49 C3                eor #$c3
001880  1  28                   plp
001881  1  91 32                sta (indt),y
001883  1  08                   php         ;flags after load/store sequence
001884  1  49 C3                eor #$c3
001886  1  D1 26                cmp (ind1),y    ;test result
001888  1  D0 FE                trap_ne
00188A  1  68                   pla         ;load status
00188B  1  09 08 49 38          eor_flag 0
00188F  1  D9 1D 02             cmp fLDx,y  ;test flags
001892  1  D0 FE                trap_ne
001894  1  88                   dey
001895  1  10 DF                bpl tlday2
001897  1               
001897  1  A0 03                ldy #3
001899  1               tlday3:
001899  1  A9 FF 48 28          set_stat $ff
00189D  1  B9 18 02             lda abs1,y
0018A0  1  08                   php         ;test stores do not alter flags
0018A1  1  49 C3                eor #$c3
0018A3  1  28                   plp
0018A4  1  91 32                sta (indt),y
0018A6  1  08                   php         ;flags after load/store sequence
0018A7  1  49 C3                eor #$c3
0018A9  1  D1 26                cmp (ind1),y   ;test result
0018AB  1  D0 FE                trap_ne
0018AD  1  68                   pla         ;load status
0018AE  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0018B2  1  D9 1D 02             cmp fLDx,y  ;test flags
0018B5  1  D0 FE                trap_ne
0018B7  1  88                   dey
0018B8  1  10 DF                bpl tlday3
0018BA  1               
0018BA  1  A0 03                ldy #3      ;testing store result
0018BC  1  A2 00                ldx #0
0018BE  1  B9 03 02     tstay1: lda abst,y
0018C1  1  49 C3                eor #$c3
0018C3  1  D9 18 02             cmp abs1,y
0018C6  1  D0 FE                trap_ne     ;store to abs data
0018C8  1  8A                   txa
0018C9  1  99 03 02             sta abst,y  ;clear
0018CC  1  88                   dey
0018CD  1  10 EF                bpl tstay1
0018CF  1               
0018CF  1  A2 06                ldx #6
0018D1  1  A0 03                ldy #3
0018D3  1               tldax4:
0018D3  1  A9 00 48 28          set_stat 0
0018D7  1  A1 26                lda (ind1,x)
0018D9  1  08                   php         ;test stores do not alter flags
0018DA  1  49 C3                eor #$c3
0018DC  1  28                   plp
0018DD  1  81 32                sta (indt,x)
0018DF  1  08                   php         ;flags after load/store sequence
0018E0  1  49 C3                eor #$c3
0018E2  1  D9 18 02             cmp abs1,y  ;test result
0018E5  1  D0 FE                trap_ne
0018E7  1  68                   pla         ;load status
0018E8  1  09 08 49 38          eor_flag 0
0018EC  1  D9 1D 02             cmp fLDx,y  ;test flags
0018EF  1  D0 FE                trap_ne
0018F1  1  CA                   dex
0018F2  1  CA                   dex
0018F3  1  88                   dey
0018F4  1  10 DD                bpl tldax4
0018F6  1               
0018F6  1  A2 06                ldx #6
0018F8  1  A0 03                ldy #3
0018FA  1               tldax5:
0018FA  1  A9 FF 48 28          set_stat $ff
0018FE  1  A1 26                lda (ind1,x)
001900  1  08                   php         ;test stores do not alter flags
001901  1  49 C3                eor #$c3
001903  1  28                   plp
001904  1  81 32                sta (indt,x)
001906  1  08                   php         ;flags after load/store sequence
001907  1  49 C3                eor #$c3
001909  1  D9 18 02             cmp abs1,y  ;test result
00190C  1  D0 FE                trap_ne
00190E  1  68                   pla         ;load status
00190F  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001913  1  D9 1D 02             cmp fLDx,y  ;test flags
001916  1  D0 FE                trap_ne
001918  1  CA                   dex
001919  1  CA                   dex
00191A  1  88                   dey
00191B  1  10 DD                bpl tldax5
00191D  1               
00191D  1  A0 03                ldy #3      ;testing store result
00191F  1  A2 00                ldx #0
001921  1  B9 03 02     tstay2: lda abst,y
001924  1  49 C3                eor #$c3
001926  1  D9 18 02             cmp abs1,y
001929  1  D0 FE                trap_ne     ;store to abs data
00192B  1  8A                   txa
00192C  1  99 03 02             sta abst,y  ;clear
00192F  1  88                   dey
001930  1  10 EF                bpl tstay2
001932  1  AD 00 02 C9          next_test
001936  1  16 D0 FE A9  
00193A  1  17 8D 00 02  
00193E  1               
00193E  1               ; indexed wraparound test (only zp should wrap)
00193E  1  A2 FD                ldx #3+$fa
001940  1  B5 1B        tldax6: lda <(zp1-$fa),x   ;wrap on indexed zp
001942  1  9D 09 01             sta abst-$fa,x      ;no STX abs,x!
001945  1  CA                   dex
001946  1  E0 FA                cpx #$fa
001948  1  B0 F6                bcs tldax6
00194A  1  A2 FD                ldx #3+$fa
00194C  1  BD 1E 01     tldax7: lda abs1-$fa,x      ;no wrap on indexed abs
00194F  1  95 12                sta <(zpt-$fa),x
001951  1  CA                   dex
001952  1  E0 FA                cpx #$fa
001954  1  B0 F6                bcs tldax7
001956  1               
001956  1  A2 03                ldx #3      ;testing wraparound result
001958  1  A0 00                ldy #0
00195A  1  B5 0C        tstax1: lda zpt,x
00195C  1  D5 15                cmp zp1,x
00195E  1  D0 FE                trap_ne     ;store to zp,x data
001960  1  94 0C                sty zpt,x   ;clear
001962  1  BD 03 02             lda abst,x
001965  1  DD 18 02             cmp abs1,x
001968  1  D0 FE                trap_ne     ;store to abs,x data
00196A  1  8A                   txa
00196B  1  9D 03 02             sta abst,x  ;clear
00196E  1  CA                   dex
00196F  1  10 E9                bpl tstax1
001971  1               
001971  1  A0 FB                ldy #3+$f8
001973  1  A2 FE                ldx #6+$f8
001975  1  A1 2E        tlday4: lda (<(ind1-$f8),x) ;wrap on indexed zp indirect
001977  1  99 0B 01             sta abst-$f8,y
00197A  1  CA                   dex
00197B  1  CA                   dex
00197C  1  88                   dey
00197D  1  C0 F8                cpy #$f8
00197F  1  B0 F4                bcs tlday4
001981  1  A0 03                ldy #3      ;testing wraparound result
001983  1  A2 00                ldx #0
001985  1  B9 03 02     tstay4: lda abst,y
001988  1  D9 18 02             cmp abs1,y
00198B  1  D0 FE                trap_ne     ;store to abs data
00198D  1  8A                   txa
00198E  1  99 03 02             sta abst,y  ;clear
001991  1  88                   dey
001992  1  10 F1                bpl tstay4
001994  1               
001994  1  A0 FB                ldy #3+$f8
001996  1  B9 20 01     tlday5: lda abs1-$f8,y  ;no wrap on indexed abs
001999  1  91 3A                sta (inwt),y
00199B  1  88                   dey
00199C  1  C0 F8                cpy #$f8
00199E  1  B0 F6                bcs tlday5
0019A0  1  A0 03                ldy #3      ;testing wraparound result
0019A2  1  A2 00                ldx #0
0019A4  1  B9 03 02     tstay5: lda abst,y
0019A7  1  D9 18 02             cmp abs1,y
0019AA  1  D0 FE                trap_ne     ;store to abs data
0019AC  1  8A                   txa
0019AD  1  99 03 02             sta abst,y  ;clear
0019B0  1  88                   dey
0019B1  1  10 F1                bpl tstay5
0019B3  1               
0019B3  1  A0 FB                ldy #3+$f8
0019B5  1  A2 FE                ldx #6+$f8
0019B7  1  B1 30        tlday6: lda (inw1),y    ;no wrap on zp indirect indexed
0019B9  1  81 3A                sta (<(indt-$f8),x)
0019BB  1  CA                   dex
0019BC  1  CA                   dex
0019BD  1  88                   dey
0019BE  1  C0 F8                cpy #$f8
0019C0  1  B0 F5                bcs tlday6
0019C2  1  A0 03                ldy #3      ;testing wraparound result
0019C4  1  A2 00                ldx #0
0019C6  1  B9 03 02     tstay6: lda abst,y
0019C9  1  D9 18 02             cmp abs1,y
0019CC  1  D0 FE                trap_ne     ;store to abs data
0019CE  1  8A                   txa
0019CF  1  99 03 02             sta abst,y  ;clear
0019D2  1  88                   dey
0019D3  1  10 F1                bpl tstay6
0019D5  1  AD 00 02 C9          next_test
0019D9  1  17 D0 FE A9  
0019DD  1  18 8D 00 02  
0019E1  1               
0019E1  1               ; LDA / STA - zp / abs / #
0019E1  1  A9 00 48 28          set_stat 0
0019E5  1  A5 15                lda zp1
0019E7  1  08                   php         ;test stores do not alter flags
0019E8  1  49 C3                eor #$c3
0019EA  1  28                   plp
0019EB  1  8D 03 02             sta abst
0019EE  1  08                   php         ;flags after load/store sequence
0019EF  1  49 C3                eor #$c3
0019F1  1  C9 C3                cmp #$c3    ;test result
0019F3  1  D0 FE                trap_ne
0019F5  1  68                   pla         ;load status
0019F6  1  09 08 49 38          eor_flag 0
0019FA  1  CD 1D 02             cmp fLDx    ;test flags
0019FD  1  D0 FE                trap_ne
0019FF  1  A9 00 48 28          set_stat 0
001A03  1  A5 16                lda zp1+1
001A05  1  08                   php         ;test stores do not alter flags
001A06  1  49 C3                eor #$c3
001A08  1  28                   plp
001A09  1  8D 04 02             sta abst+1
001A0C  1  08                   php         ;flags after load/store sequence
001A0D  1  49 C3                eor #$c3
001A0F  1  C9 82                cmp #$82    ;test result
001A11  1  D0 FE                trap_ne
001A13  1  68                   pla         ;load status
001A14  1  09 08 49 38          eor_flag 0
001A18  1  CD 1E 02             cmp fLDx+1  ;test flags
001A1B  1  D0 FE                trap_ne
001A1D  1  A9 00 48 28          set_stat 0
001A21  1  A5 17                lda zp1+2
001A23  1  08                   php         ;test stores do not alter flags
001A24  1  49 C3                eor #$c3
001A26  1  28                   plp
001A27  1  8D 05 02             sta abst+2
001A2A  1  08                   php         ;flags after load/store sequence
001A2B  1  49 C3                eor #$c3
001A2D  1  C9 41                cmp #$41    ;test result
001A2F  1  D0 FE                trap_ne
001A31  1  68                   pla         ;load status
001A32  1  09 08 49 38          eor_flag 0
001A36  1  CD 1F 02             cmp fLDx+2  ;test flags
001A39  1  D0 FE                trap_ne
001A3B  1  A9 00 48 28          set_stat 0
001A3F  1  A5 18                lda zp1+3
001A41  1  08                   php         ;test stores do not alter flags
001A42  1  49 C3                eor #$c3
001A44  1  28                   plp
001A45  1  8D 06 02             sta abst+3
001A48  1  08                   php         ;flags after load/store sequence
001A49  1  49 C3                eor #$c3
001A4B  1  C9 00                cmp #0      ;test result
001A4D  1  D0 FE                trap_ne
001A4F  1  68                   pla         ;load status
001A50  1  09 08 49 38          eor_flag 0
001A54  1  CD 20 02             cmp fLDx+3  ;test flags
001A57  1  D0 FE                trap_ne
001A59  1  A9 FF 48 28          set_stat $ff
001A5D  1  A5 15                lda zp1
001A5F  1  08                   php         ;test stores do not alter flags
001A60  1  49 C3                eor #$c3
001A62  1  28                   plp
001A63  1  8D 03 02             sta abst
001A66  1  08                   php         ;flags after load/store sequence
001A67  1  49 C3                eor #$c3
001A69  1  C9 C3                cmp #$c3    ;test result
001A6B  1  D0 FE                trap_ne
001A6D  1  68                   pla         ;load status
001A6E  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001A72  1  CD 1D 02             cmp fLDx    ;test flags
001A75  1  D0 FE                trap_ne
001A77  1  A9 FF 48 28          set_stat $ff
001A7B  1  A5 16                lda zp1+1
001A7D  1  08                   php         ;test stores do not alter flags
001A7E  1  49 C3                eor #$c3
001A80  1  28                   plp
001A81  1  8D 04 02             sta abst+1
001A84  1  08                   php         ;flags after load/store sequence
001A85  1  49 C3                eor #$c3
001A87  1  C9 82                cmp #$82    ;test result
001A89  1  D0 FE                trap_ne
001A8B  1  68                   pla         ;load status
001A8C  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001A90  1  CD 1E 02             cmp fLDx+1  ;test flags
001A93  1  D0 FE                trap_ne
001A95  1  A9 FF 48 28          set_stat $ff
001A99  1  A5 17                lda zp1+2
001A9B  1  08                   php         ;test stores do not alter flags
001A9C  1  49 C3                eor #$c3
001A9E  1  28                   plp
001A9F  1  8D 05 02             sta abst+2
001AA2  1  08                   php         ;flags after load/store sequence
001AA3  1  49 C3                eor #$c3
001AA5  1  C9 41                cmp #$41    ;test result
001AA7  1  D0 FE                trap_ne
001AA9  1  68                   pla         ;load status
001AAA  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001AAE  1  CD 1F 02             cmp fLDx+2  ;test flags
001AB1  1  D0 FE                trap_ne
001AB3  1  A9 FF 48 28          set_stat $ff
001AB7  1  A5 18                lda zp1+3
001AB9  1  08                   php         ;test stores do not alter flags
001ABA  1  49 C3                eor #$c3
001ABC  1  28                   plp
001ABD  1  8D 06 02             sta abst+3
001AC0  1  08                   php         ;flags after load/store sequence
001AC1  1  49 C3                eor #$c3
001AC3  1  C9 00                cmp #0      ;test result
001AC5  1  D0 FE                trap_ne
001AC7  1  68                   pla         ;load status
001AC8  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001ACC  1  CD 20 02             cmp fLDx+3  ;test flags
001ACF  1  D0 FE                trap_ne
001AD1  1  A9 00 48 28          set_stat 0
001AD5  1  AD 18 02             lda abs1
001AD8  1  08                   php         ;test stores do not alter flags
001AD9  1  49 C3                eor #$c3
001ADB  1  28                   plp
001ADC  1  85 0C                sta zpt
001ADE  1  08                   php         ;flags after load/store sequence
001ADF  1  49 C3                eor #$c3
001AE1  1  C5 15                cmp zp1     ;test result
001AE3  1  D0 FE                trap_ne
001AE5  1  68                   pla         ;load status
001AE6  1  09 08 49 38          eor_flag 0
001AEA  1  CD 1D 02             cmp fLDx    ;test flags
001AED  1  D0 FE                trap_ne
001AEF  1  A9 00 48 28          set_stat 0
001AF3  1  AD 19 02             lda abs1+1
001AF6  1  08                   php         ;test stores do not alter flags
001AF7  1  49 C3                eor #$c3
001AF9  1  28                   plp
001AFA  1  85 0D                sta zpt+1
001AFC  1  08                   php         ;flags after load/store sequence
001AFD  1  49 C3                eor #$c3
001AFF  1  C5 16                cmp zp1+1   ;test result
001B01  1  D0 FE                trap_ne
001B03  1  68                   pla         ;load status
001B04  1  09 08 49 38          eor_flag 0
001B08  1  CD 1E 02             cmp fLDx+1  ;test flags
001B0B  1  D0 FE                trap_ne
001B0D  1  A9 00 48 28          set_stat 0
001B11  1  AD 1A 02             lda abs1+2
001B14  1  08                   php         ;test stores do not alter flags
001B15  1  49 C3                eor #$c3
001B17  1  28                   plp
001B18  1  85 0E                sta zpt+2
001B1A  1  08                   php         ;flags after load/store sequence
001B1B  1  49 C3                eor #$c3
001B1D  1  C5 17                cmp zp1+2   ;test result
001B1F  1  D0 FE                trap_ne
001B21  1  68                   pla         ;load status
001B22  1  09 08 49 38          eor_flag 0
001B26  1  CD 1F 02             cmp fLDx+2  ;test flags
001B29  1  D0 FE                trap_ne
001B2B  1  A9 00 48 28          set_stat 0
001B2F  1  AD 1B 02             lda abs1+3
001B32  1  08                   php         ;test stores do not alter flags
001B33  1  49 C3                eor #$c3
001B35  1  28                   plp
001B36  1  85 0F                sta zpt+3
001B38  1  08                   php         ;flags after load/store sequence
001B39  1  49 C3                eor #$c3
001B3B  1  C5 18                cmp zp1+3   ;test result
001B3D  1  D0 FE                trap_ne
001B3F  1  68                   pla         ;load status
001B40  1  09 08 49 38          eor_flag 0
001B44  1  CD 20 02             cmp fLDx+3  ;test flags
001B47  1  D0 FE                trap_ne
001B49  1  A9 FF 48 28          set_stat $ff
001B4D  1  AD 18 02             lda abs1
001B50  1  08                   php         ;test stores do not alter flags
001B51  1  49 C3                eor #$c3
001B53  1  28                   plp
001B54  1  85 0C                sta zpt
001B56  1  08                   php         ;flags after load/store sequence
001B57  1  49 C3                eor #$c3
001B59  1  C5 15                cmp zp1     ;test result
001B5B  1  D0 FE                trap_ne
001B5D  1  68                   pla         ;load status
001B5E  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001B62  1  CD 1D 02             cmp fLDx    ;test flags
001B65  1  D0 FE                trap_ne
001B67  1  A9 FF 48 28          set_stat $ff
001B6B  1  AD 19 02             lda abs1+1
001B6E  1  08                   php         ;test stores do not alter flags
001B6F  1  49 C3                eor #$c3
001B71  1  28                   plp
001B72  1  85 0D                sta zpt+1
001B74  1  08                   php         ;flags after load/store sequence
001B75  1  49 C3                eor #$c3
001B77  1  C5 16                cmp zp1+1   ;test result
001B79  1  D0 FE                trap_ne
001B7B  1  68                   pla         ;load status
001B7C  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001B80  1  CD 1E 02             cmp fLDx+1  ;test flags
001B83  1  D0 FE                trap_ne
001B85  1  A9 FF 48 28          set_stat $ff
001B89  1  AD 1A 02             lda abs1+2
001B8C  1  08                   php         ;test stores do not alter flags
001B8D  1  49 C3                eor #$c3
001B8F  1  28                   plp
001B90  1  85 0E                sta zpt+2
001B92  1  08                   php         ;flags after load/store sequence
001B93  1  49 C3                eor #$c3
001B95  1  C5 17                cmp zp1+2   ;test result
001B97  1  D0 FE                trap_ne
001B99  1  68                   pla         ;load status
001B9A  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001B9E  1  CD 1F 02             cmp fLDx+2  ;test flags
001BA1  1  D0 FE                trap_ne
001BA3  1  A9 FF 48 28          set_stat $ff
001BA7  1  AD 1B 02             lda abs1+3
001BAA  1  08                   php         ;test stores do not alter flags
001BAB  1  49 C3                eor #$c3
001BAD  1  28                   plp
001BAE  1  85 0F                sta zpt+3
001BB0  1  08                   php         ;flags after load/store sequence
001BB1  1  49 C3                eor #$c3
001BB3  1  C5 18                cmp zp1+3   ;test result
001BB5  1  D0 FE                trap_ne
001BB7  1  68                   pla         ;load status
001BB8  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001BBC  1  CD 20 02             cmp fLDx+3  ;test flags
001BBF  1  D0 FE                trap_ne
001BC1  1  A9 00 48 28          set_stat 0
001BC5  1  A9 C3                lda #$c3
001BC7  1  08                   php
001BC8  1  CD 18 02             cmp abs1    ;test result
001BCB  1  D0 FE                trap_ne
001BCD  1  68                   pla         ;load status
001BCE  1  09 08 49 38          eor_flag 0
001BD2  1  CD 1D 02             cmp fLDx    ;test flags
001BD5  1  D0 FE                trap_ne
001BD7  1  A9 00 48 28          set_stat 0
001BDB  1  A9 82                lda #$82
001BDD  1  08                   php
001BDE  1  CD 19 02             cmp abs1+1  ;test result
001BE1  1  D0 FE                trap_ne
001BE3  1  68                   pla         ;load status
001BE4  1  09 08 49 38          eor_flag 0
001BE8  1  CD 1E 02             cmp fLDx+1  ;test flags
001BEB  1  D0 FE                trap_ne
001BED  1  A9 00 48 28          set_stat 0
001BF1  1  A9 41                lda #$41
001BF3  1  08                   php
001BF4  1  CD 1A 02             cmp abs1+2  ;test result
001BF7  1  D0 FE                trap_ne
001BF9  1  68                   pla         ;load status
001BFA  1  09 08 49 38          eor_flag 0
001BFE  1  CD 1F 02             cmp fLDx+2  ;test flags
001C01  1  D0 FE                trap_ne
001C03  1  A9 00 48 28          set_stat 0
001C07  1  A9 00                lda #0
001C09  1  08                   php
001C0A  1  CD 1B 02             cmp abs1+3  ;test result
001C0D  1  D0 FE                trap_ne
001C0F  1  68                   pla         ;load status
001C10  1  09 08 49 38          eor_flag 0
001C14  1  CD 20 02             cmp fLDx+3  ;test flags
001C17  1  D0 FE                trap_ne
001C19  1               
001C19  1  A9 FF 48 28          set_stat $ff
001C1D  1  A9 C3                lda #$c3
001C1F  1  08                   php
001C20  1  CD 18 02             cmp abs1    ;test result
001C23  1  D0 FE                trap_ne
001C25  1  68                   pla         ;load status
001C26  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001C2A  1  CD 1D 02             cmp fLDx    ;test flags
001C2D  1  D0 FE                trap_ne
001C2F  1  A9 FF 48 28          set_stat $ff
001C33  1  A9 82                lda #$82
001C35  1  08                   php
001C36  1  CD 19 02             cmp abs1+1  ;test result
001C39  1  D0 FE                trap_ne
001C3B  1  68                   pla         ;load status
001C3C  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001C40  1  CD 1E 02             cmp fLDx+1  ;test flags
001C43  1  D0 FE                trap_ne
001C45  1  A9 FF 48 28          set_stat $ff
001C49  1  A9 41                lda #$41
001C4B  1  08                   php
001C4C  1  CD 1A 02             cmp abs1+2  ;test result
001C4F  1  D0 FE                trap_ne
001C51  1  68                   pla         ;load status
001C52  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001C56  1  CD 1F 02             cmp fLDx+2  ;test flags
001C59  1  D0 FE                trap_ne
001C5B  1  A9 FF 48 28          set_stat $ff
001C5F  1  A9 00                lda #0
001C61  1  08                   php
001C62  1  CD 1B 02             cmp abs1+3  ;test result
001C65  1  D0 FE                trap_ne
001C67  1  68                   pla         ;load status
001C68  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001C6C  1  CD 20 02             cmp fLDx+3  ;test flags
001C6F  1  D0 FE                trap_ne
001C71  1               
001C71  1  A2 00                ldx #0
001C73  1  A5 0C                lda zpt
001C75  1  49 C3                eor #$c3
001C77  1  C5 15                cmp zp1
001C79  1  D0 FE                trap_ne     ;store to zp data
001C7B  1  86 0C                stx zpt     ;clear
001C7D  1  AD 03 02             lda abst
001C80  1  49 C3                eor #$c3
001C82  1  CD 18 02             cmp abs1
001C85  1  D0 FE                trap_ne     ;store to abs data
001C87  1  8E 03 02             stx abst    ;clear
001C8A  1  A5 0D                lda zpt+1
001C8C  1  49 C3                eor #$c3
001C8E  1  C5 16                cmp zp1+1
001C90  1  D0 FE                trap_ne     ;store to zp data
001C92  1  86 0D                stx zpt+1   ;clear
001C94  1  AD 04 02             lda abst+1
001C97  1  49 C3                eor #$c3
001C99  1  CD 19 02             cmp abs1+1
001C9C  1  D0 FE                trap_ne     ;store to abs data
001C9E  1  8E 04 02             stx abst+1  ;clear
001CA1  1  A5 0E                lda zpt+2
001CA3  1  49 C3                eor #$c3
001CA5  1  C5 17                cmp zp1+2
001CA7  1  D0 FE                trap_ne     ;store to zp data
001CA9  1  86 0E                stx zpt+2   ;clear
001CAB  1  AD 05 02             lda abst+2
001CAE  1  49 C3                eor #$c3
001CB0  1  CD 1A 02             cmp abs1+2
001CB3  1  D0 FE                trap_ne     ;store to abs data
001CB5  1  8E 05 02             stx abst+2  ;clear
001CB8  1  A5 0F                lda zpt+3
001CBA  1  49 C3                eor #$c3
001CBC  1  C5 18                cmp zp1+3
001CBE  1  D0 FE                trap_ne     ;store to zp data
001CC0  1  86 0F                stx zpt+3   ;clear
001CC2  1  AD 06 02             lda abst+3
001CC5  1  49 C3                eor #$c3
001CC7  1  CD 1B 02             cmp abs1+3
001CCA  1  D0 FE                trap_ne     ;store to abs data
001CCC  1  8E 06 02             stx abst+3  ;clear
001CCF  1  AD 00 02 C9          next_test
001CD3  1  18 D0 FE A9  
001CD7  1  19 8D 00 02  
001CDB  1               
001CDB  1               ; testing bit test & compares BIT CPX CPY CMP all addressing modes
001CDB  1               ; BIT - zp / abs
001CDB  1  A9 00 48 A9          set_a $ff,0
001CDF  1  FF 28        
001CE1  1  24 18                bit zp1+3   ;00 - should set Z / clear  NV
001CE3  1  08 C9 FF D0          tst_a $ff,fz
001CE7  1  FE 68 48 09  
001CEB  1  08 C9 3A D0  
001CF1  1  A9 00 48 A9          set_a 1,0
001CF5  1  01 28        
001CF7  1  24 17                bit zp1+2   ;41 - should set V (M6) / clear NZ
001CF9  1  08 C9 01 D0          tst_a 1,fv
001CFD  1  FE 68 48 09  
001D01  1  08 C9 78 D0  
001D07  1  A9 00 48 A9          set_a 1,0
001D0B  1  01 28        
001D0D  1  24 16                bit zp1+1   ;82 - should set N (M7) & Z / clear V
001D0F  1  08 C9 01 D0          tst_a 1,fnz
001D13  1  FE 68 48 09  
001D17  1  08 C9 BA D0  
001D1D  1  A9 00 48 A9          set_a 1,0
001D21  1  01 28        
001D23  1  24 15                bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
001D25  1  08 C9 01 D0          tst_a 1,fnv
001D29  1  FE 68 48 09  
001D2D  1  08 C9 F8 D0  
001D33  1               
001D33  1  A9 FF 48 A9          set_a $ff,$ff
001D37  1  FF 28        
001D39  1  24 18                bit zp1+3   ;00 - should set Z / clear  NV
001D3B  1  08 C9 FF D0          tst_a $ff,~fnv
001D3F  1  FE 68 48 09  
001D43  1  08 C9 3F D0  
001D49  1  A9 FF 48 A9          set_a 1,$ff
001D4D  1  01 28        
001D4F  1  24 17                bit zp1+2   ;41 - should set V (M6) / clear NZ
001D51  1  08 C9 01 D0          tst_a 1,~fnz
001D55  1  FE 68 48 09  
001D59  1  08 C9 7D D0  
001D5F  1  A9 FF 48 A9          set_a 1,$ff
001D63  1  01 28        
001D65  1  24 16                bit zp1+1   ;82 - should set N (M7) & Z / clear V
001D67  1  08 C9 01 D0          tst_a 1,~fv
001D6B  1  FE 68 48 09  
001D6F  1  08 C9 BF D0  
001D75  1  A9 FF 48 A9          set_a 1,$ff
001D79  1  01 28        
001D7B  1  24 15                bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
001D7D  1  08 C9 01 D0          tst_a 1,~fz
001D81  1  FE 68 48 09  
001D85  1  08 C9 FD D0  
001D8B  1               
001D8B  1  A9 00 48 A9          set_a $ff,0
001D8F  1  FF 28        
001D91  1  2C 1B 02             bit abs1+3  ;00 - should set Z / clear  NV
001D94  1  08 C9 FF D0          tst_a $ff,fz
001D98  1  FE 68 48 09  
001D9C  1  08 C9 3A D0  
001DA2  1  A9 00 48 A9          set_a 1,0
001DA6  1  01 28        
001DA8  1  2C 1A 02             bit abs1+2  ;41 - should set V (M6) / clear NZ
001DAB  1  08 C9 01 D0          tst_a 1,fv
001DAF  1  FE 68 48 09  
001DB3  1  08 C9 78 D0  
001DB9  1  A9 00 48 A9          set_a 1,0
001DBD  1  01 28        
001DBF  1  2C 19 02             bit abs1+1  ;82 - should set N (M7) & Z / clear V
001DC2  1  08 C9 01 D0          tst_a 1,fnz
001DC6  1  FE 68 48 09  
001DCA  1  08 C9 BA D0  
001DD0  1  A9 00 48 A9          set_a 1,0
001DD4  1  01 28        
001DD6  1  2C 18 02             bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
001DD9  1  08 C9 01 D0          tst_a 1,fnv
001DDD  1  FE 68 48 09  
001DE1  1  08 C9 F8 D0  
001DE7  1               
001DE7  1  A9 FF 48 A9          set_a $ff,$ff
001DEB  1  FF 28        
001DED  1  2C 1B 02             bit abs1+3  ;00 - should set Z / clear  NV
001DF0  1  08 C9 FF D0          tst_a $ff,~fnv
001DF4  1  FE 68 48 09  
001DF8  1  08 C9 3F D0  
001DFE  1  A9 FF 48 A9          set_a 1,$ff
001E02  1  01 28        
001E04  1  2C 1A 02             bit abs1+2  ;41 - should set V (M6) / clear NZ
001E07  1  08 C9 01 D0          tst_a 1,~fnz
001E0B  1  FE 68 48 09  
001E0F  1  08 C9 7D D0  
001E15  1  A9 FF 48 A9          set_a 1,$ff
001E19  1  01 28        
001E1B  1  2C 19 02             bit abs1+1  ;82 - should set N (M7) & Z / clear V
001E1E  1  08 C9 01 D0          tst_a 1,~fv
001E22  1  FE 68 48 09  
001E26  1  08 C9 BF D0  
001E2C  1  A9 FF 48 A9          set_a 1,$ff
001E30  1  01 28        
001E32  1  2C 18 02             bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
001E35  1  08 C9 01 D0          tst_a 1,~fz
001E39  1  FE 68 48 09  
001E3D  1  08 C9 FD D0  
001E43  1  AD 00 02 C9          next_test
001E47  1  19 D0 FE A9  
001E4B  1  1A 8D 00 02  
001E4F  1               
001E4F  1               ; CPX - zp / abs / #
001E4F  1  A9 00 48 A2          set_x $80,0
001E53  1  80 28        
001E55  1  E4 19                cpx zp7f
001E57  1  08 68 48 09          tst_stat fc
001E5B  1  08 C9 39 D0  
001E5F  1  FE 28        
001E61  1  CA                   dex
001E62  1  E4 19                cpx zp7f
001E64  1  08 68 48 09          tst_stat fzc
001E68  1  08 C9 3B D0  
001E6C  1  FE 28        
001E6E  1  CA                   dex
001E6F  1  E4 19                cpx zp7f
001E71  1  08 E0 7E D0          tst_x $7e,fn
001E75  1  FE 68 48 09  
001E79  1  08 C9 B8 D0  
001E7F  1  A9 FF 48 A2          set_x $80,$ff
001E83  1  80 28        
001E85  1  E4 19                cpx zp7f
001E87  1  08 68 48 09          tst_stat ~fnz
001E8B  1  08 C9 7D D0  
001E8F  1  FE 28        
001E91  1  CA                   dex
001E92  1  E4 19                cpx zp7f
001E94  1  08 68 48 09          tst_stat ~fn
001E98  1  08 C9 7F D0  
001E9C  1  FE 28        
001E9E  1  CA                   dex
001E9F  1  E4 19                cpx zp7f
001EA1  1  08 E0 7E D0          tst_x $7e,~fzc
001EA5  1  FE 68 48 09  
001EA9  1  08 C9 FC D0  
001EAF  1               
001EAF  1  A9 00 48 A2          set_x $80,0
001EB3  1  80 28        
001EB5  1  EC 1C 02             cpx abs7f
001EB8  1  08 68 48 09          tst_stat fc
001EBC  1  08 C9 39 D0  
001EC0  1  FE 28        
001EC2  1  CA                   dex
001EC3  1  EC 1C 02             cpx abs7f
001EC6  1  08 68 48 09          tst_stat fzc
001ECA  1  08 C9 3B D0  
001ECE  1  FE 28        
001ED0  1  CA                   dex
001ED1  1  EC 1C 02             cpx abs7f
001ED4  1  08 E0 7E D0          tst_x $7e,fn
001ED8  1  FE 68 48 09  
001EDC  1  08 C9 B8 D0  
001EE2  1  A9 FF 48 A2          set_x $80,$ff
001EE6  1  80 28        
001EE8  1  EC 1C 02             cpx abs7f
001EEB  1  08 68 48 09          tst_stat ~fnz
001EEF  1  08 C9 7D D0  
001EF3  1  FE 28        
001EF5  1  CA                   dex
001EF6  1  EC 1C 02             cpx abs7f
001EF9  1  08 68 48 09          tst_stat ~fn
001EFD  1  08 C9 7F D0  
001F01  1  FE 28        
001F03  1  CA                   dex
001F04  1  EC 1C 02             cpx abs7f
001F07  1  08 E0 7E D0          tst_x $7e,~fzc
001F0B  1  FE 68 48 09  
001F0F  1  08 C9 FC D0  
001F15  1               
001F15  1  A9 00 48 A2          set_x $80,0
001F19  1  80 28        
001F1B  1  E0 7F                cpx #$7f
001F1D  1  08 68 48 09          tst_stat fc
001F21  1  08 C9 39 D0  
001F25  1  FE 28        
001F27  1  CA                   dex
001F28  1  E0 7F                cpx #$7f
001F2A  1  08 68 48 09          tst_stat fzc
001F2E  1  08 C9 3B D0  
001F32  1  FE 28        
001F34  1  CA                   dex
001F35  1  E0 7F                cpx #$7f
001F37  1  08 E0 7E D0          tst_x $7e,fn
001F3B  1  FE 68 48 09  
001F3F  1  08 C9 B8 D0  
001F45  1  A9 FF 48 A2          set_x $80,$ff
001F49  1  80 28        
001F4B  1  E0 7F                cpx #$7f
001F4D  1  08 68 48 09          tst_stat ~fnz
001F51  1  08 C9 7D D0  
001F55  1  FE 28        
001F57  1  CA                   dex
001F58  1  E0 7F                cpx #$7f
001F5A  1  08 68 48 09          tst_stat ~fn
001F5E  1  08 C9 7F D0  
001F62  1  FE 28        
001F64  1  CA                   dex
001F65  1  E0 7F                cpx #$7f
001F67  1  08 E0 7E D0          tst_x $7e,~fzc
001F6B  1  FE 68 48 09  
001F6F  1  08 C9 FC D0  
001F75  1  AD 00 02 C9          next_test
001F79  1  1A D0 FE A9  
001F7D  1  1B 8D 00 02  
001F81  1               
001F81  1               ; CPY - zp / abs / #
001F81  1  A9 00 48 A0          set_y $80,0
001F85  1  80 28        
001F87  1  C4 19                cpy zp7f
001F89  1  08 68 48 09          tst_stat fc
001F8D  1  08 C9 39 D0  
001F91  1  FE 28        
001F93  1  88                   dey
001F94  1  C4 19                cpy zp7f
001F96  1  08 68 48 09          tst_stat fzc
001F9A  1  08 C9 3B D0  
001F9E  1  FE 28        
001FA0  1  88                   dey
001FA1  1  C4 19                cpy zp7f
001FA3  1  08 C0 7E D0          tst_y $7e,fn
001FA7  1  FE 68 48 09  
001FAB  1  08 C9 B8 D0  
001FB1  1  A9 FF 48 A0          set_y $80,$ff
001FB5  1  80 28        
001FB7  1  C4 19                cpy zp7f
001FB9  1  08 68 48 09          tst_stat ~fnz
001FBD  1  08 C9 7D D0  
001FC1  1  FE 28        
001FC3  1  88                   dey
001FC4  1  C4 19                cpy zp7f
001FC6  1  08 68 48 09          tst_stat ~fn
001FCA  1  08 C9 7F D0  
001FCE  1  FE 28        
001FD0  1  88                   dey
001FD1  1  C4 19                cpy zp7f
001FD3  1  08 C0 7E D0          tst_y $7e,~fzc
001FD7  1  FE 68 48 09  
001FDB  1  08 C9 FC D0  
001FE1  1               
001FE1  1  A9 00 48 A0          set_y $80,0
001FE5  1  80 28        
001FE7  1  CC 1C 02             cpy abs7f
001FEA  1  08 68 48 09          tst_stat fc
001FEE  1  08 C9 39 D0  
001FF2  1  FE 28        
001FF4  1  88                   dey
001FF5  1  CC 1C 02             cpy abs7f
001FF8  1  08 68 48 09          tst_stat fzc
001FFC  1  08 C9 3B D0  
002000  1  FE 28        
002002  1  88                   dey
002003  1  CC 1C 02             cpy abs7f
002006  1  08 C0 7E D0          tst_y $7e,fn
00200A  1  FE 68 48 09  
00200E  1  08 C9 B8 D0  
002014  1  A9 FF 48 A0          set_y $80,$ff
002018  1  80 28        
00201A  1  CC 1C 02             cpy abs7f
00201D  1  08 68 48 09          tst_stat ~fnz
002021  1  08 C9 7D D0  
002025  1  FE 28        
002027  1  88                   dey
002028  1  CC 1C 02             cpy abs7f
00202B  1  08 68 48 09          tst_stat ~fn
00202F  1  08 C9 7F D0  
002033  1  FE 28        
002035  1  88                   dey
002036  1  CC 1C 02             cpy abs7f
002039  1  08 C0 7E D0          tst_y $7e,~fzc
00203D  1  FE 68 48 09  
002041  1  08 C9 FC D0  
002047  1               
002047  1  A9 00 48 A0          set_y $80,0
00204B  1  80 28        
00204D  1  C0 7F                cpy #$7f
00204F  1  08 68 48 09          tst_stat fc
002053  1  08 C9 39 D0  
002057  1  FE 28        
002059  1  88                   dey
00205A  1  C0 7F                cpy #$7f
00205C  1  08 68 48 09          tst_stat fzc
002060  1  08 C9 3B D0  
002064  1  FE 28        
002066  1  88                   dey
002067  1  C0 7F                cpy #$7f
002069  1  08 C0 7E D0          tst_y $7e,fn
00206D  1  FE 68 48 09  
002071  1  08 C9 B8 D0  
002077  1  A9 FF 48 A0          set_y $80,$ff
00207B  1  80 28        
00207D  1  C0 7F                cpy #$7f
00207F  1  08 68 48 09          tst_stat ~fnz
002083  1  08 C9 7D D0  
002087  1  FE 28        
002089  1  88                   dey
00208A  1  C0 7F                cpy #$7f
00208C  1  08 68 48 09          tst_stat ~fn
002090  1  08 C9 7F D0  
002094  1  FE 28        
002096  1  88                   dey
002097  1  C0 7F                cpy #$7f
002099  1  08 C0 7E D0          tst_y $7e,~fzc
00209D  1  FE 68 48 09  
0020A1  1  08 C9 FC D0  
0020A7  1  AD 00 02 C9          next_test
0020AB  1  1B D0 FE A9  
0020AF  1  1C 8D 00 02  
0020B3  1               
0020B3  1               ; CMP - zp / abs / #
0020B3  1  A9 00 48 A9          set_a $80,0
0020B7  1  80 28        
0020B9  1  C5 19                cmp zp7f
0020BB  1  08 C9 80 D0          tst_a $80,fc
0020BF  1  FE 68 48 09  
0020C3  1  08 C9 39 D0  
0020C9  1  A9 00 48 A9          set_a $7f,0
0020CD  1  7F 28        
0020CF  1  C5 19                cmp zp7f
0020D1  1  08 C9 7F D0          tst_a $7f,fzc
0020D5  1  FE 68 48 09  
0020D9  1  08 C9 3B D0  
0020DF  1  A9 00 48 A9          set_a $7e,0
0020E3  1  7E 28        
0020E5  1  C5 19                cmp zp7f
0020E7  1  08 C9 7E D0          tst_a $7e,fn
0020EB  1  FE 68 48 09  
0020EF  1  08 C9 B8 D0  
0020F5  1  A9 FF 48 A9          set_a $80,$ff
0020F9  1  80 28        
0020FB  1  C5 19                cmp zp7f
0020FD  1  08 C9 80 D0          tst_a $80,~fnz
002101  1  FE 68 48 09  
002105  1  08 C9 7D D0  
00210B  1  A9 FF 48 A9          set_a $7f,$ff
00210F  1  7F 28        
002111  1  C5 19                cmp zp7f
002113  1  08 C9 7F D0          tst_a $7f,~fn
002117  1  FE 68 48 09  
00211B  1  08 C9 7F D0  
002121  1  A9 FF 48 A9          set_a $7e,$ff
002125  1  7E 28        
002127  1  C5 19                cmp zp7f
002129  1  08 C9 7E D0          tst_a $7e,~fzc
00212D  1  FE 68 48 09  
002131  1  08 C9 FC D0  
002137  1               
002137  1  A9 00 48 A9          set_a $80,0
00213B  1  80 28        
00213D  1  CD 1C 02             cmp abs7f
002140  1  08 C9 80 D0          tst_a $80,fc
002144  1  FE 68 48 09  
002148  1  08 C9 39 D0  
00214E  1  A9 00 48 A9          set_a $7f,0
002152  1  7F 28        
002154  1  CD 1C 02             cmp abs7f
002157  1  08 C9 7F D0          tst_a $7f,fzc
00215B  1  FE 68 48 09  
00215F  1  08 C9 3B D0  
002165  1  A9 00 48 A9          set_a $7e,0
002169  1  7E 28        
00216B  1  CD 1C 02             cmp abs7f
00216E  1  08 C9 7E D0          tst_a $7e,fn
002172  1  FE 68 48 09  
002176  1  08 C9 B8 D0  
00217C  1  A9 FF 48 A9          set_a $80,$ff
002180  1  80 28        
002182  1  CD 1C 02             cmp abs7f
002185  1  08 C9 80 D0          tst_a $80,~fnz
002189  1  FE 68 48 09  
00218D  1  08 C9 7D D0  
002193  1  A9 FF 48 A9          set_a $7f,$ff
002197  1  7F 28        
002199  1  CD 1C 02             cmp abs7f
00219C  1  08 C9 7F D0          tst_a $7f,~fn
0021A0  1  FE 68 48 09  
0021A4  1  08 C9 7F D0  
0021AA  1  A9 FF 48 A9          set_a $7e,$ff
0021AE  1  7E 28        
0021B0  1  CD 1C 02             cmp abs7f
0021B3  1  08 C9 7E D0          tst_a $7e,~fzc
0021B7  1  FE 68 48 09  
0021BB  1  08 C9 FC D0  
0021C1  1               
0021C1  1  A9 00 48 A9          set_a $80,0
0021C5  1  80 28        
0021C7  1  C9 7F                cmp #$7f
0021C9  1  08 C9 80 D0          tst_a $80,fc
0021CD  1  FE 68 48 09  
0021D1  1  08 C9 39 D0  
0021D7  1  A9 00 48 A9          set_a $7f,0
0021DB  1  7F 28        
0021DD  1  C9 7F                cmp #$7f
0021DF  1  08 C9 7F D0          tst_a $7f,fzc
0021E3  1  FE 68 48 09  
0021E7  1  08 C9 3B D0  
0021ED  1  A9 00 48 A9          set_a $7e,0
0021F1  1  7E 28        
0021F3  1  C9 7F                cmp #$7f
0021F5  1  08 C9 7E D0          tst_a $7e,fn
0021F9  1  FE 68 48 09  
0021FD  1  08 C9 B8 D0  
002203  1  A9 FF 48 A9          set_a $80,$ff
002207  1  80 28        
002209  1  C9 7F                cmp #$7f
00220B  1  08 C9 80 D0          tst_a $80,~fnz
00220F  1  FE 68 48 09  
002213  1  08 C9 7D D0  
002219  1  A9 FF 48 A9          set_a $7f,$ff
00221D  1  7F 28        
00221F  1  C9 7F                cmp #$7f
002221  1  08 C9 7F D0          tst_a $7f,~fn
002225  1  FE 68 48 09  
002229  1  08 C9 7F D0  
00222F  1  A9 FF 48 A9          set_a $7e,$ff
002233  1  7E 28        
002235  1  C9 7F                cmp #$7f
002237  1  08 C9 7E D0          tst_a $7e,~fzc
00223B  1  FE 68 48 09  
00223F  1  08 C9 FC D0  
002245  1               
002245  1  A2 04                ldx #4          ;with indexing by X
002247  1  A9 00 48 A9          set_a $80,0
00224B  1  80 28        
00224D  1  D5 15                cmp zp1,x
00224F  1  08 C9 80 D0          tst_a $80,fc
002253  1  FE 68 48 09  
002257  1  08 C9 39 D0  
00225D  1  A9 00 48 A9          set_a $7f,0
002261  1  7F 28        
002263  1  D5 15                cmp zp1,x
002265  1  08 C9 7F D0          tst_a $7f,fzc
002269  1  FE 68 48 09  
00226D  1  08 C9 3B D0  
002273  1  A9 00 48 A9          set_a $7e,0
002277  1  7E 28        
002279  1  D5 15                cmp zp1,x
00227B  1  08 C9 7E D0          tst_a $7e,fn
00227F  1  FE 68 48 09  
002283  1  08 C9 B8 D0  
002289  1  A9 FF 48 A9          set_a $80,$ff
00228D  1  80 28        
00228F  1  D5 15                cmp zp1,x
002291  1  08 C9 80 D0          tst_a $80,~fnz
002295  1  FE 68 48 09  
002299  1  08 C9 7D D0  
00229F  1  A9 FF 48 A9          set_a $7f,$ff
0022A3  1  7F 28        
0022A5  1  D5 15                cmp zp1,x
0022A7  1  08 C9 7F D0          tst_a $7f,~fn
0022AB  1  FE 68 48 09  
0022AF  1  08 C9 7F D0  
0022B5  1  A9 FF 48 A9          set_a $7e,$ff
0022B9  1  7E 28        
0022BB  1  D5 15                cmp zp1,x
0022BD  1  08 C9 7E D0          tst_a $7e,~fzc
0022C1  1  FE 68 48 09  
0022C5  1  08 C9 FC D0  
0022CB  1               
0022CB  1  A9 00 48 A9          set_a $80,0
0022CF  1  80 28        
0022D1  1  DD 18 02             cmp abs1,x
0022D4  1  08 C9 80 D0          tst_a $80,fc
0022D8  1  FE 68 48 09  
0022DC  1  08 C9 39 D0  
0022E2  1  A9 00 48 A9          set_a $7f,0
0022E6  1  7F 28        
0022E8  1  DD 18 02             cmp abs1,x
0022EB  1  08 C9 7F D0          tst_a $7f,fzc
0022EF  1  FE 68 48 09  
0022F3  1  08 C9 3B D0  
0022F9  1  A9 00 48 A9          set_a $7e,0
0022FD  1  7E 28        
0022FF  1  DD 18 02             cmp abs1,x
002302  1  08 C9 7E D0          tst_a $7e,fn
002306  1  FE 68 48 09  
00230A  1  08 C9 B8 D0  
002310  1  A9 FF 48 A9          set_a $80,$ff
002314  1  80 28        
002316  1  DD 18 02             cmp abs1,x
002319  1  08 C9 80 D0          tst_a $80,~fnz
00231D  1  FE 68 48 09  
002321  1  08 C9 7D D0  
002327  1  A9 FF 48 A9          set_a $7f,$ff
00232B  1  7F 28        
00232D  1  DD 18 02             cmp abs1,x
002330  1  08 C9 7F D0          tst_a $7f,~fn
002334  1  FE 68 48 09  
002338  1  08 C9 7F D0  
00233E  1  A9 FF 48 A9          set_a $7e,$ff
002342  1  7E 28        
002344  1  DD 18 02             cmp abs1,x
002347  1  08 C9 7E D0          tst_a $7e,~fzc
00234B  1  FE 68 48 09  
00234F  1  08 C9 FC D0  
002355  1               
002355  1  A0 04                ldy #4          ;with indexing by Y
002357  1  A2 08                ldx #8          ;with indexed indirect
002359  1  A9 00 48 A9          set_a $80,0
00235D  1  80 28        
00235F  1  D9 18 02             cmp abs1,y
002362  1  08 C9 80 D0          tst_a $80,fc
002366  1  FE 68 48 09  
00236A  1  08 C9 39 D0  
002370  1  A9 00 48 A9          set_a $7f,0
002374  1  7F 28        
002376  1  D9 18 02             cmp abs1,y
002379  1  08 C9 7F D0          tst_a $7f,fzc
00237D  1  FE 68 48 09  
002381  1  08 C9 3B D0  
002387  1  A9 00 48 A9          set_a $7e,0
00238B  1  7E 28        
00238D  1  D9 18 02             cmp abs1,y
002390  1  08 C9 7E D0          tst_a $7e,fn
002394  1  FE 68 48 09  
002398  1  08 C9 B8 D0  
00239E  1  A9 FF 48 A9          set_a $80,$ff
0023A2  1  80 28        
0023A4  1  D9 18 02             cmp abs1,y
0023A7  1  08 C9 80 D0          tst_a $80,~fnz
0023AB  1  FE 68 48 09  
0023AF  1  08 C9 7D D0  
0023B5  1  A9 FF 48 A9          set_a $7f,$ff
0023B9  1  7F 28        
0023BB  1  D9 18 02             cmp abs1,y
0023BE  1  08 C9 7F D0          tst_a $7f,~fn
0023C2  1  FE 68 48 09  
0023C6  1  08 C9 7F D0  
0023CC  1  A9 FF 48 A9          set_a $7e,$ff
0023D0  1  7E 28        
0023D2  1  D9 18 02             cmp abs1,y
0023D5  1  08 C9 7E D0          tst_a $7e,~fzc
0023D9  1  FE 68 48 09  
0023DD  1  08 C9 FC D0  
0023E3  1               
0023E3  1  A9 00 48 A9          set_a $80,0
0023E7  1  80 28        
0023E9  1  C1 26                cmp (ind1,x)
0023EB  1  08 C9 80 D0          tst_a $80,fc
0023EF  1  FE 68 48 09  
0023F3  1  08 C9 39 D0  
0023F9  1  A9 00 48 A9          set_a $7f,0
0023FD  1  7F 28        
0023FF  1  C1 26                cmp (ind1,x)
002401  1  08 C9 7F D0          tst_a $7f,fzc
002405  1  FE 68 48 09  
002409  1  08 C9 3B D0  
00240F  1  A9 00 48 A9          set_a $7e,0
002413  1  7E 28        
002415  1  C1 26                cmp (ind1,x)
002417  1  08 C9 7E D0          tst_a $7e,fn
00241B  1  FE 68 48 09  
00241F  1  08 C9 B8 D0  
002425  1  A9 FF 48 A9          set_a $80,$ff
002429  1  80 28        
00242B  1  C1 26                cmp (ind1,x)
00242D  1  08 C9 80 D0          tst_a $80,~fnz
002431  1  FE 68 48 09  
002435  1  08 C9 7D D0  
00243B  1  A9 FF 48 A9          set_a $7f,$ff
00243F  1  7F 28        
002441  1  C1 26                cmp (ind1,x)
002443  1  08 C9 7F D0          tst_a $7f,~fn
002447  1  FE 68 48 09  
00244B  1  08 C9 7F D0  
002451  1  A9 FF 48 A9          set_a $7e,$ff
002455  1  7E 28        
002457  1  C1 26                cmp (ind1,x)
002459  1  08 C9 7E D0          tst_a $7e,~fzc
00245D  1  FE 68 48 09  
002461  1  08 C9 FC D0  
002467  1               
002467  1  A9 00 48 A9          set_a $80,0
00246B  1  80 28        
00246D  1  D1 26                cmp (ind1),y
00246F  1  08 C9 80 D0          tst_a $80,fc
002473  1  FE 68 48 09  
002477  1  08 C9 39 D0  
00247D  1  A9 00 48 A9          set_a $7f,0
002481  1  7F 28        
002483  1  D1 26                cmp (ind1),y
002485  1  08 C9 7F D0          tst_a $7f,fzc
002489  1  FE 68 48 09  
00248D  1  08 C9 3B D0  
002493  1  A9 00 48 A9          set_a $7e,0
002497  1  7E 28        
002499  1  D1 26                cmp (ind1),y
00249B  1  08 C9 7E D0          tst_a $7e,fn
00249F  1  FE 68 48 09  
0024A3  1  08 C9 B8 D0  
0024A9  1  A9 FF 48 A9          set_a $80,$ff
0024AD  1  80 28        
0024AF  1  D1 26                cmp (ind1),y
0024B1  1  08 C9 80 D0          tst_a $80,~fnz
0024B5  1  FE 68 48 09  
0024B9  1  08 C9 7D D0  
0024BF  1  A9 FF 48 A9          set_a $7f,$ff
0024C3  1  7F 28        
0024C5  1  D1 26                cmp (ind1),y
0024C7  1  08 C9 7F D0          tst_a $7f,~fn
0024CB  1  FE 68 48 09  
0024CF  1  08 C9 7F D0  
0024D5  1  A9 FF 48 A9          set_a $7e,$ff
0024D9  1  7E 28        
0024DB  1  D1 26                cmp (ind1),y
0024DD  1  08 C9 7E D0          tst_a $7e,~fzc
0024E1  1  FE 68 48 09  
0024E5  1  08 C9 FC D0  
0024EB  1  AD 00 02 C9          next_test
0024EF  1  1C D0 FE A9  
0024F3  1  1D 8D 00 02  
0024F7  1               
0024F7  1               ; testing shifts - ASL LSR ROL ROR all addressing modes
0024F7  1               ; shifts - accumulator
0024F7  1  A2 05                ldx #5
0024F9  1               tasl:
0024F9  1  A9 00 48 B5          set_ax zps,0
0024FD  1  13 28        
0024FF  1  0A                   asl a
002500  1  08 DD 21 02          tst_ax rASL,fASL,0
002504  1  D0 FE 68 09  
002508  1  08 49 38 DD  
002510  1  CA                   dex
002511  1  10 E6                bpl tasl
002513  1  A2 05                ldx #5
002515  1               tasl1:
002515  1  A9 FF 48 B5          set_ax zps,$ff
002519  1  13 28        
00251B  1  0A                   asl a
00251C  1  08 DD 21 02          tst_ax rASL,fASL,$ff-fnzc
002520  1  D0 FE 68 09  
002524  1  08 49 7C DD  
00252C  1  CA                   dex
00252D  1  10 E6                bpl tasl1
00252F  1               
00252F  1  A2 05                ldx #5
002531  1               tlsr:
002531  1  A9 00 48 B5          set_ax zps,0
002535  1  13 28        
002537  1  4A                   lsr a
002538  1  08 DD 2D 02          tst_ax rLSR,fLSR,0
00253C  1  D0 FE 68 09  
002540  1  08 49 38 DD  
002548  1  CA                   dex
002549  1  10 E6                bpl tlsr
00254B  1  A2 05                ldx #5
00254D  1               tlsr1:
00254D  1  A9 FF 48 B5          set_ax zps,$ff
002551  1  13 28        
002553  1  4A                   lsr a
002554  1  08 DD 2D 02          tst_ax rLSR,fLSR,$ff-fnzc
002558  1  D0 FE 68 09  
00255C  1  08 49 7C DD  
002564  1  CA                   dex
002565  1  10 E6                bpl tlsr1
002567  1               
002567  1  A2 05                ldx #5
002569  1               trol:
002569  1  A9 00 48 B5          set_ax zps,0
00256D  1  13 28        
00256F  1  2A                   rol a
002570  1  08 DD 21 02          tst_ax rROL,fROL,0
002574  1  D0 FE 68 09  
002578  1  08 49 38 DD  
002580  1  CA                   dex
002581  1  10 E6                bpl trol
002583  1  A2 05                ldx #5
002585  1               trol1:
002585  1  A9 FE 48 B5          set_ax zps,$ff-fc
002589  1  13 28        
00258B  1  2A                   rol a
00258C  1  08 DD 21 02          tst_ax rROL,fROL,$ff-fnzc
002590  1  D0 FE 68 09  
002594  1  08 49 7C DD  
00259C  1  CA                   dex
00259D  1  10 E6                bpl trol1
00259F  1               
00259F  1  A2 05                ldx #5
0025A1  1               trolc:
0025A1  1  A9 01 48 B5          set_ax zps,fc
0025A5  1  13 28        
0025A7  1  2A                   rol a
0025A8  1  08 DD 27 02          tst_ax rROLc,fROLc,0
0025AC  1  D0 FE 68 09  
0025B0  1  08 49 38 DD  
0025B8  1  CA                   dex
0025B9  1  10 E6                bpl trolc
0025BB  1  A2 05                ldx #5
0025BD  1               trolc1:
0025BD  1  A9 FF 48 B5          set_ax zps,$ff
0025C1  1  13 28        
0025C3  1  2A                   rol a
0025C4  1  08 DD 27 02          tst_ax rROLc,fROLc,$ff-fnzc
0025C8  1  D0 FE 68 09  
0025CC  1  08 49 7C DD  
0025D4  1  CA                   dex
0025D5  1  10 E6                bpl trolc1
0025D7  1               
0025D7  1  A2 05                ldx #5
0025D9  1               tror:
0025D9  1  A9 00 48 B5          set_ax zps,0
0025DD  1  13 28        
0025DF  1  6A                   ror a
0025E0  1  08 DD 2D 02          tst_ax rROR,fROR,0
0025E4  1  D0 FE 68 09  
0025E8  1  08 49 38 DD  
0025F0  1  CA                   dex
0025F1  1  10 E6                bpl tror
0025F3  1  A2 05                ldx #5
0025F5  1               tror1:
0025F5  1  A9 FE 48 B5          set_ax zps,$ff-fc
0025F9  1  13 28        
0025FB  1  6A                   ror a
0025FC  1  08 DD 2D 02          tst_ax rROR,fROR,$ff-fnzc
002600  1  D0 FE 68 09  
002604  1  08 49 7C DD  
00260C  1  CA                   dex
00260D  1  10 E6                bpl tror1
00260F  1               
00260F  1  A2 05                ldx #5
002611  1               trorc:
002611  1  A9 01 48 B5          set_ax zps,fc
002615  1  13 28        
002617  1  6A                   ror a
002618  1  08 DD 33 02          tst_ax rRORc,fRORc,0
00261C  1  D0 FE 68 09  
002620  1  08 49 38 DD  
002628  1  CA                   dex
002629  1  10 E6                bpl trorc
00262B  1  A2 05                ldx #5
00262D  1               trorc1:
00262D  1  A9 FF 48 B5          set_ax zps,$ff
002631  1  13 28        
002633  1  6A                   ror a
002634  1  08 DD 33 02          tst_ax rRORc,fRORc,$ff-fnzc
002638  1  D0 FE 68 09  
00263C  1  08 49 7C DD  
002644  1  CA                   dex
002645  1  10 E6                bpl trorc1
002647  1  AD 00 02 C9          next_test
00264B  1  1D D0 FE A9  
00264F  1  1E 8D 00 02  
002653  1               
002653  1               ; shifts - zeropage
002653  1  A2 05                ldx #5
002655  1               tasl2:
002655  1  A9 00 48 B5          set_z zps,0
002659  1  13 85 0C 28  
00265D  1  06 0C                asl zpt
00265F  1  08 A5 0C DD          tst_z rASL,fASL,0
002663  1  21 02 D0 FE  
002667  1  68 09 08 49  
002671  1  CA                   dex
002672  1  10 E1                bpl tasl2
002674  1  A2 05                ldx #5
002676  1               tasl3:
002676  1  A9 FF 48 B5          set_z zps,$ff
00267A  1  13 85 0C 28  
00267E  1  06 0C                asl zpt
002680  1  08 A5 0C DD          tst_z rASL,fASL,$ff-fnzc
002684  1  21 02 D0 FE  
002688  1  68 09 08 49  
002692  1  CA                   dex
002693  1  10 E1                bpl tasl3
002695  1               
002695  1  A2 05                ldx #5
002697  1               tlsr2:
002697  1  A9 00 48 B5          set_z zps,0
00269B  1  13 85 0C 28  
00269F  1  46 0C                lsr zpt
0026A1  1  08 A5 0C DD          tst_z rLSR,fLSR,0
0026A5  1  2D 02 D0 FE  
0026A9  1  68 09 08 49  
0026B3  1  CA                   dex
0026B4  1  10 E1                bpl tlsr2
0026B6  1  A2 05                ldx #5
0026B8  1               tlsr3:
0026B8  1  A9 FF 48 B5          set_z zps,$ff
0026BC  1  13 85 0C 28  
0026C0  1  46 0C                lsr zpt
0026C2  1  08 A5 0C DD          tst_z rLSR,fLSR,$ff-fnzc
0026C6  1  2D 02 D0 FE  
0026CA  1  68 09 08 49  
0026D4  1  CA                   dex
0026D5  1  10 E1                bpl tlsr3
0026D7  1               
0026D7  1  A2 05                ldx #5
0026D9  1               trol2:
0026D9  1  A9 00 48 B5          set_z zps,0
0026DD  1  13 85 0C 28  
0026E1  1  26 0C                rol zpt
0026E3  1  08 A5 0C DD          tst_z rROL,fROL,0
0026E7  1  21 02 D0 FE  
0026EB  1  68 09 08 49  
0026F5  1  CA                   dex
0026F6  1  10 E1                bpl trol2
0026F8  1  A2 05                ldx #5
0026FA  1               trol3:
0026FA  1  A9 FE 48 B5          set_z zps,$ff-fc
0026FE  1  13 85 0C 28  
002702  1  26 0C                rol zpt
002704  1  08 A5 0C DD          tst_z rROL,fROL,$ff-fnzc
002708  1  21 02 D0 FE  
00270C  1  68 09 08 49  
002716  1  CA                   dex
002717  1  10 E1                bpl trol3
002719  1               
002719  1  A2 05                ldx #5
00271B  1               trolc2:
00271B  1  A9 01 48 B5          set_z zps,fc
00271F  1  13 85 0C 28  
002723  1  26 0C                rol zpt
002725  1  08 A5 0C DD          tst_z rROLc,fROLc,0
002729  1  27 02 D0 FE  
00272D  1  68 09 08 49  
002737  1  CA                   dex
002738  1  10 E1                bpl trolc2
00273A  1  A2 05                ldx #5
00273C  1               trolc3:
00273C  1  A9 FF 48 B5          set_z zps,$ff
002740  1  13 85 0C 28  
002744  1  26 0C                rol zpt
002746  1  08 A5 0C DD          tst_z rROLc,fROLc,$ff-fnzc
00274A  1  27 02 D0 FE  
00274E  1  68 09 08 49  
002758  1  CA                   dex
002759  1  10 E1                bpl trolc3
00275B  1               
00275B  1  A2 05                ldx #5
00275D  1               tror2:
00275D  1  A9 00 48 B5          set_z zps,0
002761  1  13 85 0C 28  
002765  1  66 0C                ror zpt
002767  1  08 A5 0C DD          tst_z rROR,fROR,0
00276B  1  2D 02 D0 FE  
00276F  1  68 09 08 49  
002779  1  CA                   dex
00277A  1  10 E1                bpl tror2
00277C  1  A2 05                ldx #5
00277E  1               tror3:
00277E  1  A9 FE 48 B5          set_z zps,$ff-fc
002782  1  13 85 0C 28  
002786  1  66 0C                ror zpt
002788  1  08 A5 0C DD          tst_z rROR,fROR,$ff-fnzc
00278C  1  2D 02 D0 FE  
002790  1  68 09 08 49  
00279A  1  CA                   dex
00279B  1  10 E1                bpl tror3
00279D  1               
00279D  1  A2 05                ldx #5
00279F  1               trorc2:
00279F  1  A9 01 48 B5          set_z zps,fc
0027A3  1  13 85 0C 28  
0027A7  1  66 0C                ror zpt
0027A9  1  08 A5 0C DD          tst_z rRORc,fRORc,0
0027AD  1  33 02 D0 FE  
0027B1  1  68 09 08 49  
0027BB  1  CA                   dex
0027BC  1  10 E1                bpl trorc2
0027BE  1  A2 05                ldx #5
0027C0  1               trorc3:
0027C0  1  A9 FF 48 B5          set_z zps,$ff
0027C4  1  13 85 0C 28  
0027C8  1  66 0C                ror zpt
0027CA  1  08 A5 0C DD          tst_z rRORc,fRORc,$ff-fnzc
0027CE  1  33 02 D0 FE  
0027D2  1  68 09 08 49  
0027DC  1  CA                   dex
0027DD  1  10 E1                bpl trorc3
0027DF  1  AD 00 02 C9          next_test
0027E3  1  1E D0 FE A9  
0027E7  1  1F 8D 00 02  
0027EB  1               
0027EB  1               ; shifts - absolute
0027EB  1  A2 05                ldx #5
0027ED  1               tasl4:
0027ED  1  A9 00 48 B5          set_abs zps,0
0027F1  1  13 8D 03 02  
0027F5  1  28           
0027F6  1  0E 03 02             asl abst
0027F9  1  08 AD 03 02          tst_abs rASL,fASL,0
0027FD  1  DD 21 02 D0  
002801  1  FE 68 09 08  
00280C  1  CA                   dex
00280D  1  10 DE                bpl tasl4
00280F  1  A2 05                ldx #5
002811  1               tasl5:
002811  1  A9 FF 48 B5          set_abs zps,$ff
002815  1  13 8D 03 02  
002819  1  28           
00281A  1  0E 03 02             asl abst
00281D  1  08 AD 03 02          tst_abs rASL,fASL,$ff-fnzc
002821  1  DD 21 02 D0  
002825  1  FE 68 09 08  
002830  1  CA                   dex
002831  1  10 DE                bpl tasl5
002833  1               
002833  1  A2 05                ldx #5
002835  1               tlsr4:
002835  1  A9 00 48 B5          set_abs zps,0
002839  1  13 8D 03 02  
00283D  1  28           
00283E  1  4E 03 02             lsr abst
002841  1  08 AD 03 02          tst_abs rLSR,fLSR,0
002845  1  DD 2D 02 D0  
002849  1  FE 68 09 08  
002854  1  CA                   dex
002855  1  10 DE                bpl tlsr4
002857  1  A2 05                ldx #5
002859  1               tlsr5:
002859  1  A9 FF 48 B5          set_abs zps,$ff
00285D  1  13 8D 03 02  
002861  1  28           
002862  1  4E 03 02             lsr abst
002865  1  08 AD 03 02          tst_abs rLSR,fLSR,$ff-fnzc
002869  1  DD 2D 02 D0  
00286D  1  FE 68 09 08  
002878  1  CA                   dex
002879  1  10 DE                bpl tlsr5
00287B  1               
00287B  1  A2 05                ldx #5
00287D  1               trol4:
00287D  1  A9 00 48 B5          set_abs zps,0
002881  1  13 8D 03 02  
002885  1  28           
002886  1  2E 03 02             rol abst
002889  1  08 AD 03 02          tst_abs rROL,fROL,0
00288D  1  DD 21 02 D0  
002891  1  FE 68 09 08  
00289C  1  CA                   dex
00289D  1  10 DE                bpl trol4
00289F  1  A2 05                ldx #5
0028A1  1               trol5:
0028A1  1  A9 FE 48 B5          set_abs zps,$ff-fc
0028A5  1  13 8D 03 02  
0028A9  1  28           
0028AA  1  2E 03 02             rol abst
0028AD  1  08 AD 03 02          tst_abs rROL,fROL,$ff-fnzc
0028B1  1  DD 21 02 D0  
0028B5  1  FE 68 09 08  
0028C0  1  CA                   dex
0028C1  1  10 DE                bpl trol5
0028C3  1               
0028C3  1  A2 05                ldx #5
0028C5  1               trolc4:
0028C5  1  A9 01 48 B5          set_abs zps,fc
0028C9  1  13 8D 03 02  
0028CD  1  28           
0028CE  1  2E 03 02             rol abst
0028D1  1  08 AD 03 02          tst_abs rROLc,fROLc,0
0028D5  1  DD 27 02 D0  
0028D9  1  FE 68 09 08  
0028E4  1  CA                   dex
0028E5  1  10 DE                bpl trolc4
0028E7  1  A2 05                ldx #5
0028E9  1               trolc5:
0028E9  1  A9 FF 48 B5          set_abs zps,$ff
0028ED  1  13 8D 03 02  
0028F1  1  28           
0028F2  1  2E 03 02             rol abst
0028F5  1  08 AD 03 02          tst_abs rROLc,fROLc,$ff-fnzc
0028F9  1  DD 27 02 D0  
0028FD  1  FE 68 09 08  
002908  1  CA                   dex
002909  1  10 DE                bpl trolc5
00290B  1               
00290B  1  A2 05                ldx #5
00290D  1               tror4:
00290D  1  A9 00 48 B5          set_abs zps,0
002911  1  13 8D 03 02  
002915  1  28           
002916  1  6E 03 02             ror abst
002919  1  08 AD 03 02          tst_abs rROR,fROR,0
00291D  1  DD 2D 02 D0  
002921  1  FE 68 09 08  
00292C  1  CA                   dex
00292D  1  10 DE                bpl tror4
00292F  1  A2 05                ldx #5
002931  1               tror5:
002931  1  A9 FE 48 B5          set_abs zps,$ff-fc
002935  1  13 8D 03 02  
002939  1  28           
00293A  1  6E 03 02             ror abst
00293D  1  08 AD 03 02          tst_abs rROR,fROR,$ff-fnzc
002941  1  DD 2D 02 D0  
002945  1  FE 68 09 08  
002950  1  CA                   dex
002951  1  10 DE                bpl tror5
002953  1               
002953  1  A2 05                ldx #5
002955  1               trorc4:
002955  1  A9 01 48 B5          set_abs zps,fc
002959  1  13 8D 03 02  
00295D  1  28           
00295E  1  6E 03 02             ror abst
002961  1  08 AD 03 02          tst_abs rRORc,fRORc,0
002965  1  DD 33 02 D0  
002969  1  FE 68 09 08  
002974  1  CA                   dex
002975  1  10 DE                bpl trorc4
002977  1  A2 05                ldx #5
002979  1               trorc5:
002979  1  A9 FF 48 B5          set_abs zps,$ff
00297D  1  13 8D 03 02  
002981  1  28           
002982  1  6E 03 02             ror abst
002985  1  08 AD 03 02          tst_abs rRORc,fRORc,$ff-fnzc
002989  1  DD 33 02 D0  
00298D  1  FE 68 09 08  
002998  1  CA                   dex
002999  1  10 DE                bpl trorc5
00299B  1  AD 00 02 C9          next_test
00299F  1  1F D0 FE A9  
0029A3  1  20 8D 00 02  
0029A7  1               
0029A7  1               ; shifts - zp indexed
0029A7  1  A2 05                ldx #5
0029A9  1               tasl6:
0029A9  1  A9 00 48 B5          set_zx zps,0
0029AD  1  13 95 0C 28  
0029B1  1  16 0C                asl zpt,x
0029B3  1  08 B5 0C DD          tst_zx rASL,fASL,0
0029B7  1  21 02 D0 FE  
0029BB  1  68 09 08 49  
0029C5  1  CA                   dex
0029C6  1  10 E1                bpl tasl6
0029C8  1  A2 05                ldx #5
0029CA  1               tasl7:
0029CA  1  A9 FF 48 B5          set_zx zps,$ff
0029CE  1  13 95 0C 28  
0029D2  1  16 0C                asl zpt,x
0029D4  1  08 B5 0C DD          tst_zx rASL,fASL,$ff-fnzc
0029D8  1  21 02 D0 FE  
0029DC  1  68 09 08 49  
0029E6  1  CA                   dex
0029E7  1  10 E1                bpl tasl7
0029E9  1               
0029E9  1  A2 05                ldx #5
0029EB  1               tlsr6:
0029EB  1  A9 00 48 B5          set_zx zps,0
0029EF  1  13 95 0C 28  
0029F3  1  56 0C                lsr zpt,x
0029F5  1  08 B5 0C DD          tst_zx rLSR,fLSR,0
0029F9  1  2D 02 D0 FE  
0029FD  1  68 09 08 49  
002A07  1  CA                   dex
002A08  1  10 E1                bpl tlsr6
002A0A  1  A2 05                ldx #5
002A0C  1               tlsr7:
002A0C  1  A9 FF 48 B5          set_zx zps,$ff
002A10  1  13 95 0C 28  
002A14  1  56 0C                lsr zpt,x
002A16  1  08 B5 0C DD          tst_zx rLSR,fLSR,$ff-fnzc
002A1A  1  2D 02 D0 FE  
002A1E  1  68 09 08 49  
002A28  1  CA                   dex
002A29  1  10 E1                bpl tlsr7
002A2B  1               
002A2B  1  A2 05                ldx #5
002A2D  1               trol6:
002A2D  1  A9 00 48 B5          set_zx zps,0
002A31  1  13 95 0C 28  
002A35  1  36 0C                rol zpt,x
002A37  1  08 B5 0C DD          tst_zx rROL,fROL,0
002A3B  1  21 02 D0 FE  
002A3F  1  68 09 08 49  
002A49  1  CA                   dex
002A4A  1  10 E1                bpl trol6
002A4C  1  A2 05                ldx #5
002A4E  1               trol7:
002A4E  1  A9 FE 48 B5          set_zx zps,$ff-fc
002A52  1  13 95 0C 28  
002A56  1  36 0C                rol zpt,x
002A58  1  08 B5 0C DD          tst_zx rROL,fROL,$ff-fnzc
002A5C  1  21 02 D0 FE  
002A60  1  68 09 08 49  
002A6A  1  CA                   dex
002A6B  1  10 E1                bpl trol7
002A6D  1               
002A6D  1  A2 05                ldx #5
002A6F  1               trolc6:
002A6F  1  A9 01 48 B5          set_zx zps,fc
002A73  1  13 95 0C 28  
002A77  1  36 0C                rol zpt,x
002A79  1  08 B5 0C DD          tst_zx rROLc,fROLc,0
002A7D  1  27 02 D0 FE  
002A81  1  68 09 08 49  
002A8B  1  CA                   dex
002A8C  1  10 E1                bpl trolc6
002A8E  1  A2 05                ldx #5
002A90  1               trolc7:
002A90  1  A9 FF 48 B5          set_zx zps,$ff
002A94  1  13 95 0C 28  
002A98  1  36 0C                rol zpt,x
002A9A  1  08 B5 0C DD          tst_zx rROLc,fROLc,$ff-fnzc
002A9E  1  27 02 D0 FE  
002AA2  1  68 09 08 49  
002AAC  1  CA                   dex
002AAD  1  10 E1                bpl trolc7
002AAF  1               
002AAF  1  A2 05                ldx #5
002AB1  1               tror6:
002AB1  1  A9 00 48 B5          set_zx zps,0
002AB5  1  13 95 0C 28  
002AB9  1  76 0C                ror zpt,x
002ABB  1  08 B5 0C DD          tst_zx rROR,fROR,0
002ABF  1  2D 02 D0 FE  
002AC3  1  68 09 08 49  
002ACD  1  CA                   dex
002ACE  1  10 E1                bpl tror6
002AD0  1  A2 05                ldx #5
002AD2  1               tror7:
002AD2  1  A9 FE 48 B5          set_zx zps,$ff-fc
002AD6  1  13 95 0C 28  
002ADA  1  76 0C                ror zpt,x
002ADC  1  08 B5 0C DD          tst_zx rROR,fROR,$ff-fnzc
002AE0  1  2D 02 D0 FE  
002AE4  1  68 09 08 49  
002AEE  1  CA                   dex
002AEF  1  10 E1                bpl tror7
002AF1  1               
002AF1  1  A2 05                ldx #5
002AF3  1               trorc6:
002AF3  1  A9 01 48 B5          set_zx zps,fc
002AF7  1  13 95 0C 28  
002AFB  1  76 0C                ror zpt,x
002AFD  1  08 B5 0C DD          tst_zx rRORc,fRORc,0
002B01  1  33 02 D0 FE  
002B05  1  68 09 08 49  
002B0F  1  CA                   dex
002B10  1  10 E1                bpl trorc6
002B12  1  A2 05                ldx #5
002B14  1               trorc7:
002B14  1  A9 FF 48 B5          set_zx zps,$ff
002B18  1  13 95 0C 28  
002B1C  1  76 0C                ror zpt,x
002B1E  1  08 B5 0C DD          tst_zx rRORc,fRORc,$ff-fnzc
002B22  1  33 02 D0 FE  
002B26  1  68 09 08 49  
002B30  1  CA                   dex
002B31  1  10 E1                bpl trorc7
002B33  1  AD 00 02 C9          next_test
002B37  1  20 D0 FE A9  
002B3B  1  21 8D 00 02  
002B3F  1               
002B3F  1               ; shifts - abs indexed
002B3F  1  A2 05                ldx #5
002B41  1               tasl8:
002B41  1  A9 00 48 B5          set_absx zps,0
002B45  1  13 9D 03 02  
002B49  1  28           
002B4A  1  1E 03 02             asl abst,x
002B4D  1  08 BD 03 02          tst_absx rASL,fASL,0
002B51  1  DD 21 02 D0  
002B55  1  FE 68 09 08  
002B60  1  CA                   dex
002B61  1  10 DE                bpl tasl8
002B63  1  A2 05                ldx #5
002B65  1               tasl9:
002B65  1  A9 FF 48 B5          set_absx zps,$ff
002B69  1  13 9D 03 02  
002B6D  1  28           
002B6E  1  1E 03 02             asl abst,x
002B71  1  08 BD 03 02          tst_absx rASL,fASL,$ff-fnzc
002B75  1  DD 21 02 D0  
002B79  1  FE 68 09 08  
002B84  1  CA                   dex
002B85  1  10 DE                bpl tasl9
002B87  1               
002B87  1  A2 05                ldx #5
002B89  1               tlsr8:
002B89  1  A9 00 48 B5          set_absx zps,0
002B8D  1  13 9D 03 02  
002B91  1  28           
002B92  1  5E 03 02             lsr abst,x
002B95  1  08 BD 03 02          tst_absx rLSR,fLSR,0
002B99  1  DD 2D 02 D0  
002B9D  1  FE 68 09 08  
002BA8  1  CA                   dex
002BA9  1  10 DE                bpl tlsr8
002BAB  1  A2 05                ldx #5
002BAD  1               tlsr9:
002BAD  1  A9 FF 48 B5          set_absx zps,$ff
002BB1  1  13 9D 03 02  
002BB5  1  28           
002BB6  1  5E 03 02             lsr abst,x
002BB9  1  08 BD 03 02          tst_absx rLSR,fLSR,$ff-fnzc
002BBD  1  DD 2D 02 D0  
002BC1  1  FE 68 09 08  
002BCC  1  CA                   dex
002BCD  1  10 DE                bpl tlsr9
002BCF  1               
002BCF  1  A2 05                ldx #5
002BD1  1               trol8:
002BD1  1  A9 00 48 B5          set_absx zps,0
002BD5  1  13 9D 03 02  
002BD9  1  28           
002BDA  1  3E 03 02             rol abst,x
002BDD  1  08 BD 03 02          tst_absx rROL,fROL,0
002BE1  1  DD 21 02 D0  
002BE5  1  FE 68 09 08  
002BF0  1  CA                   dex
002BF1  1  10 DE                bpl trol8
002BF3  1  A2 05                ldx #5
002BF5  1               trol9:
002BF5  1  A9 FE 48 B5          set_absx zps,$ff-fc
002BF9  1  13 9D 03 02  
002BFD  1  28           
002BFE  1  3E 03 02             rol abst,x
002C01  1  08 BD 03 02          tst_absx rROL,fROL,$ff-fnzc
002C05  1  DD 21 02 D0  
002C09  1  FE 68 09 08  
002C14  1  CA                   dex
002C15  1  10 DE                bpl trol9
002C17  1               
002C17  1  A2 05                ldx #5
002C19  1               trolc8:
002C19  1  A9 01 48 B5          set_absx zps,fc
002C1D  1  13 9D 03 02  
002C21  1  28           
002C22  1  3E 03 02             rol abst,x
002C25  1  08 BD 03 02          tst_absx rROLc,fROLc,0
002C29  1  DD 27 02 D0  
002C2D  1  FE 68 09 08  
002C38  1  CA                   dex
002C39  1  10 DE                bpl trolc8
002C3B  1  A2 05                ldx #5
002C3D  1               trolc9:
002C3D  1  A9 FF 48 B5          set_absx zps,$ff
002C41  1  13 9D 03 02  
002C45  1  28           
002C46  1  3E 03 02             rol abst,x
002C49  1  08 BD 03 02          tst_absx rROLc,fROLc,$ff-fnzc
002C4D  1  DD 27 02 D0  
002C51  1  FE 68 09 08  
002C5C  1  CA                   dex
002C5D  1  10 DE                bpl trolc9
002C5F  1               
002C5F  1  A2 05                ldx #5
002C61  1               tror8:
002C61  1  A9 00 48 B5          set_absx zps,0
002C65  1  13 9D 03 02  
002C69  1  28           
002C6A  1  7E 03 02             ror abst,x
002C6D  1  08 BD 03 02          tst_absx rROR,fROR,0
002C71  1  DD 2D 02 D0  
002C75  1  FE 68 09 08  
002C80  1  CA                   dex
002C81  1  10 DE                bpl tror8
002C83  1  A2 05                ldx #5
002C85  1               tror9:
002C85  1  A9 FE 48 B5          set_absx zps,$ff-fc
002C89  1  13 9D 03 02  
002C8D  1  28           
002C8E  1  7E 03 02             ror abst,x
002C91  1  08 BD 03 02          tst_absx rROR,fROR,$ff-fnzc
002C95  1  DD 2D 02 D0  
002C99  1  FE 68 09 08  
002CA4  1  CA                   dex
002CA5  1  10 DE                bpl tror9
002CA7  1               
002CA7  1  A2 05                ldx #5
002CA9  1               trorc8:
002CA9  1  A9 01 48 B5          set_absx zps,fc
002CAD  1  13 9D 03 02  
002CB1  1  28           
002CB2  1  7E 03 02             ror abst,x
002CB5  1  08 BD 03 02          tst_absx rRORc,fRORc,0
002CB9  1  DD 33 02 D0  
002CBD  1  FE 68 09 08  
002CC8  1  CA                   dex
002CC9  1  10 DE                bpl trorc8
002CCB  1  A2 05                ldx #5
002CCD  1               trorc9:
002CCD  1  A9 FF 48 B5          set_absx zps,$ff
002CD1  1  13 9D 03 02  
002CD5  1  28           
002CD6  1  7E 03 02             ror abst,x
002CD9  1  08 BD 03 02          tst_absx rRORc,fRORc,$ff-fnzc
002CDD  1  DD 33 02 D0  
002CE1  1  FE 68 09 08  
002CEC  1  CA                   dex
002CED  1  10 DE                bpl trorc9
002CEF  1  AD 00 02 C9          next_test
002CF3  1  21 D0 FE A9  
002CF7  1  22 8D 00 02  
002CFB  1               
002CFB  1               ; testing memory increment/decrement - INC DEC all addressing modes
002CFB  1               ; zeropage
002CFB  1  A2 00                ldx #0
002CFD  1  A9 7E                lda #$7e
002CFF  1  85 0C                sta zpt
002D01  1               tinc:
002D01  1  A9 00 48 28          set_stat 0
002D05  1  E6 0C                inc zpt
002D07  1  08 A5 0C DD          tst_z rINC,fINC,0
002D0B  1  51 02 D0 FE  
002D0F  1  68 09 08 49  
002D19  1  E8                   inx
002D1A  1  E0 02                cpx #2
002D1C  1  D0 04                bne tinc1
002D1E  1  A9 FE                lda #$fe
002D20  1  85 0C                sta zpt
002D22  1  E0 05        tinc1:  cpx #5
002D24  1  D0 DB                bne tinc
002D26  1  CA                   dex
002D27  1  E6 0C                inc zpt
002D29  1               tdec:
002D29  1  A9 00 48 28          set_stat 0
002D2D  1  C6 0C                dec zpt
002D2F  1  08 A5 0C DD          tst_z rINC,fINC,0
002D33  1  51 02 D0 FE  
002D37  1  68 09 08 49  
002D41  1  CA                   dex
002D42  1  30 0A                bmi tdec1
002D44  1  E0 01                cpx #1
002D46  1  D0 E1                bne tdec
002D48  1  A9 81                lda #$81
002D4A  1  85 0C                sta zpt
002D4C  1  D0 DB                bne tdec
002D4E  1               tdec1:
002D4E  1  A2 00                ldx #0
002D50  1  A9 7E                lda #$7e
002D52  1  85 0C                sta zpt
002D54  1               tinc10:
002D54  1  A9 FF 48 28          set_stat $ff
002D58  1  E6 0C                inc zpt
002D5A  1  08 A5 0C DD          tst_z rINC,fINC,$ff-fnz
002D5E  1  51 02 D0 FE  
002D62  1  68 09 08 49  
002D6C  1  E8                   inx
002D6D  1  E0 02                cpx #2
002D6F  1  D0 04                bne tinc11
002D71  1  A9 FE                lda #$fe
002D73  1  85 0C                sta zpt
002D75  1  E0 05        tinc11: cpx #5
002D77  1  D0 DB                bne tinc10
002D79  1  CA                   dex
002D7A  1  E6 0C                inc zpt
002D7C  1               tdec10:
002D7C  1  A9 FF 48 28          set_stat $ff
002D80  1  C6 0C                dec zpt
002D82  1  08 A5 0C DD          tst_z rINC,fINC,$ff-fnz
002D86  1  51 02 D0 FE  
002D8A  1  68 09 08 49  
002D94  1  CA                   dex
002D95  1  30 0A                bmi tdec11
002D97  1  E0 01                cpx #1
002D99  1  D0 E1                bne tdec10
002D9B  1  A9 81                lda #$81
002D9D  1  85 0C                sta zpt
002D9F  1  D0 DB                bne tdec10
002DA1  1               tdec11:
002DA1  1  AD 00 02 C9          next_test
002DA5  1  22 D0 FE A9  
002DA9  1  23 8D 00 02  
002DAD  1               
002DAD  1               ; absolute memory
002DAD  1  A2 00                ldx #0
002DAF  1  A9 7E                lda #$7e
002DB1  1  8D 03 02             sta abst
002DB4  1               tinc2:
002DB4  1  A9 00 48 28          set_stat 0
002DB8  1  EE 03 02             inc abst
002DBB  1  08 AD 03 02          tst_abs rINC,fINC,0
002DBF  1  DD 51 02 D0  
002DC3  1  FE 68 09 08  
002DCE  1  E8                   inx
002DCF  1  E0 02                cpx #2
002DD1  1  D0 05                bne tinc3
002DD3  1  A9 FE                lda #$fe
002DD5  1  8D 03 02             sta abst
002DD8  1  E0 05        tinc3:  cpx #5
002DDA  1  D0 D8                bne tinc2
002DDC  1  CA                   dex
002DDD  1  EE 03 02             inc abst
002DE0  1               tdec2:
002DE0  1  A9 00 48 28          set_stat 0
002DE4  1  CE 03 02             dec abst
002DE7  1  08 AD 03 02          tst_abs rINC,fINC,0
002DEB  1  DD 51 02 D0  
002DEF  1  FE 68 09 08  
002DFA  1  CA                   dex
002DFB  1  30 0B                bmi tdec3
002DFD  1  E0 01                cpx #1
002DFF  1  D0 DF                bne tdec2
002E01  1  A9 81                lda #$81
002E03  1  8D 03 02             sta abst
002E06  1  D0 D8                bne tdec2
002E08  1               tdec3:
002E08  1  A2 00                ldx #0
002E0A  1  A9 7E                lda #$7e
002E0C  1  8D 03 02             sta abst
002E0F  1               tinc12:
002E0F  1  A9 FF 48 28          set_stat $ff
002E13  1  EE 03 02             inc abst
002E16  1  08 AD 03 02          tst_abs rINC,fINC,$ff-fnz
002E1A  1  DD 51 02 D0  
002E1E  1  FE 68 09 08  
002E29  1  E8                   inx
002E2A  1  E0 02                cpx #2
002E2C  1  D0 05                bne tinc13
002E2E  1  A9 FE                lda #$fe
002E30  1  8D 03 02             sta abst
002E33  1  E0 05        tinc13:  cpx #5
002E35  1  D0 D8                bne tinc12
002E37  1  CA                   dex
002E38  1  EE 03 02             inc abst
002E3B  1               tdec12:
002E3B  1  A9 FF 48 28          set_stat $ff
002E3F  1  CE 03 02             dec abst
002E42  1  08 AD 03 02          tst_abs rINC,fINC,$ff-fnz
002E46  1  DD 51 02 D0  
002E4A  1  FE 68 09 08  
002E55  1  CA                   dex
002E56  1  30 0B                bmi tdec13
002E58  1  E0 01                cpx #1
002E5A  1  D0 DF                bne tdec12
002E5C  1  A9 81                lda #$81
002E5E  1  8D 03 02             sta abst
002E61  1  D0 D8                bne tdec12
002E63  1               tdec13:
002E63  1  AD 00 02 C9          next_test
002E67  1  23 D0 FE A9  
002E6B  1  24 8D 00 02  
002E6F  1               
002E6F  1               ; zeropage indexed
002E6F  1  A2 00                ldx #0
002E71  1  A9 7E                lda #$7e
002E73  1  95 0C        tinc4:  sta zpt,x
002E75  1  A9 00 48 28          set_stat 0
002E79  1  F6 0C                inc zpt,x
002E7B  1  08 B5 0C DD          tst_zx rINC,fINC,0
002E7F  1  51 02 D0 FE  
002E83  1  68 09 08 49  
002E8D  1  B5 0C                lda zpt,x
002E8F  1  E8                   inx
002E90  1  E0 02                cpx #2
002E92  1  D0 02                bne tinc5
002E94  1  A9 FE                lda #$fe
002E96  1  E0 05        tinc5:  cpx #5
002E98  1  D0 D9                bne tinc4
002E9A  1  CA                   dex
002E9B  1  A9 02                lda #2
002E9D  1  95 0C        tdec4:  sta zpt,x
002E9F  1  A9 00 48 28          set_stat 0
002EA3  1  D6 0C                dec zpt,x
002EA5  1  08 B5 0C DD          tst_zx rINC,fINC,0
002EA9  1  51 02 D0 FE  
002EAD  1  68 09 08 49  
002EB7  1  B5 0C                lda zpt,x
002EB9  1  CA                   dex
002EBA  1  30 08                bmi tdec5
002EBC  1  E0 01                cpx #1
002EBE  1  D0 DD                bne tdec4
002EC0  1  A9 81                lda #$81
002EC2  1  D0 D9                bne tdec4
002EC4  1               tdec5:
002EC4  1  A2 00                ldx #0
002EC6  1  A9 7E                lda #$7e
002EC8  1  95 0C        tinc14: sta zpt,x
002ECA  1  A9 FF 48 28          set_stat $ff
002ECE  1  F6 0C                inc zpt,x
002ED0  1  08 B5 0C DD          tst_zx rINC,fINC,$ff-fnz
002ED4  1  51 02 D0 FE  
002ED8  1  68 09 08 49  
002EE2  1  B5 0C                lda zpt,x
002EE4  1  E8                   inx
002EE5  1  E0 02                cpx #2
002EE7  1  D0 02                bne tinc15
002EE9  1  A9 FE                lda #$fe
002EEB  1  E0 05        tinc15: cpx #5
002EED  1  D0 D9                bne tinc14
002EEF  1  CA                   dex
002EF0  1  A9 02                lda #2
002EF2  1  95 0C        tdec14: sta zpt,x
002EF4  1  A9 FF 48 28          set_stat $ff
002EF8  1  D6 0C                dec zpt,x
002EFA  1  08 B5 0C DD          tst_zx rINC,fINC,$ff-fnz
002EFE  1  51 02 D0 FE  
002F02  1  68 09 08 49  
002F0C  1  B5 0C                lda zpt,x
002F0E  1  CA                   dex
002F0F  1  30 08                bmi tdec15
002F11  1  E0 01                cpx #1
002F13  1  D0 DD                bne tdec14
002F15  1  A9 81                lda #$81
002F17  1  D0 D9                bne tdec14
002F19  1               tdec15:
002F19  1  AD 00 02 C9          next_test
002F1D  1  24 D0 FE A9  
002F21  1  25 8D 00 02  
002F25  1               
002F25  1               ; memory indexed
002F25  1  A2 00                ldx #0
002F27  1  A9 7E                lda #$7e
002F29  1  9D 03 02     tinc6:  sta abst,x
002F2C  1  A9 00 48 28          set_stat 0
002F30  1  FE 03 02             inc abst,x
002F33  1  08 BD 03 02          tst_absx rINC,fINC,0
002F37  1  DD 51 02 D0  
002F3B  1  FE 68 09 08  
002F46  1  BD 03 02             lda abst,x
002F49  1  E8                   inx
002F4A  1  E0 02                cpx #2
002F4C  1  D0 02                bne tinc7
002F4E  1  A9 FE                lda #$fe
002F50  1  E0 05        tinc7:  cpx #5
002F52  1  D0 D5                bne tinc6
002F54  1  CA                   dex
002F55  1  A9 02                lda #2
002F57  1  9D 03 02     tdec6:  sta abst,x
002F5A  1  A9 00 48 28          set_stat 0
002F5E  1  DE 03 02             dec abst,x
002F61  1  08 BD 03 02          tst_absx rINC,fINC,0
002F65  1  DD 51 02 D0  
002F69  1  FE 68 09 08  
002F74  1  BD 03 02             lda abst,x
002F77  1  CA                   dex
002F78  1  30 08                bmi tdec7
002F7A  1  E0 01                cpx #1
002F7C  1  D0 D9                bne tdec6
002F7E  1  A9 81                lda #$81
002F80  1  D0 D5                bne tdec6
002F82  1               tdec7:
002F82  1  A2 00                ldx #0
002F84  1  A9 7E                lda #$7e
002F86  1  9D 03 02     tinc16: sta abst,x
002F89  1  A9 FF 48 28          set_stat $ff
002F8D  1  FE 03 02             inc abst,x
002F90  1  08 BD 03 02          tst_absx rINC,fINC,$ff-fnz
002F94  1  DD 51 02 D0  
002F98  1  FE 68 09 08  
002FA3  1  BD 03 02             lda abst,x
002FA6  1  E8                   inx
002FA7  1  E0 02                cpx #2
002FA9  1  D0 02                bne tinc17
002FAB  1  A9 FE                lda #$fe
002FAD  1  E0 05        tinc17: cpx #5
002FAF  1  D0 D5                bne tinc16
002FB1  1  CA                   dex
002FB2  1  A9 02                lda #2
002FB4  1  9D 03 02     tdec16: sta abst,x
002FB7  1  A9 FF 48 28          set_stat $ff
002FBB  1  DE 03 02             dec abst,x
002FBE  1  08 BD 03 02          tst_absx rINC,fINC,$ff-fnz
002FC2  1  DD 51 02 D0  
002FC6  1  FE 68 09 08  
002FD1  1  BD 03 02             lda abst,x
002FD4  1  CA                   dex
002FD5  1  30 08                bmi tdec17
002FD7  1  E0 01                cpx #1
002FD9  1  D0 D9                bne tdec16
002FDB  1  A9 81                lda #$81
002FDD  1  D0 D5                bne tdec16
002FDF  1               tdec17:
002FDF  1  AD 00 02 C9          next_test
002FE3  1  25 D0 FE A9  
002FE7  1  26 8D 00 02  
002FEB  1               
002FEB  1               ; testing logical instructions - AND EOR ORA all addressing modes
002FEB  1               ; AND
002FEB  1  A2 03                ldx #3          ;immediate
002FED  1  B5 1E        tand:   lda zpAN,x
002FEF  1  8D 0A 02             sta ex_andi+1   ;set AND # operand
002FF2  1  A9 00 48 BD          set_ax  absANa,0
002FF6  1  6B 02 28     
002FF9  1  20 09 02             jsr ex_andi     ;execute AND # in RAM
002FFC  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003000  1  D0 FE 68 09  
003004  1  08 49 38 DD  
00300C  1  CA                   dex
00300D  1  10 DE                bpl tand
00300F  1  A2 03                ldx #3
003011  1  B5 1E        tand1:  lda zpAN,x
003013  1  8D 0A 02             sta ex_andi+1   ;set AND # operand
003016  1  A9 FF 48 BD          set_ax  absANa,$ff
00301A  1  6B 02 28     
00301D  1  20 09 02             jsr ex_andi     ;execute AND # in RAM
003020  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003024  1  D0 FE 68 09  
003028  1  08 49 7D DD  
003030  1  CA                   dex
003031  1  10 DE                bpl tand1
003033  1               
003033  1  A2 03                ldx #3      ;zp
003035  1  B5 1E        tand2:  lda zpAN,x
003037  1  85 0C                sta zpt
003039  1  A9 00 48 BD          set_ax  absANa,0
00303D  1  6B 02 28     
003040  1  25 0C                and zpt
003042  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003046  1  D0 FE 68 09  
00304A  1  08 49 38 DD  
003052  1  CA                   dex
003053  1  10 E0                bpl tand2
003055  1  A2 03                ldx #3
003057  1  B5 1E        tand3:  lda zpAN,x
003059  1  85 0C                sta zpt
00305B  1  A9 FF 48 BD          set_ax  absANa,$ff
00305F  1  6B 02 28     
003062  1  25 0C                and zpt
003064  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003068  1  D0 FE 68 09  
00306C  1  08 49 7D DD  
003074  1  CA                   dex
003075  1  10 E0                bpl tand3
003077  1               
003077  1  A2 03                ldx #3      ;abs
003079  1  B5 1E        tand4:  lda zpAN,x
00307B  1  8D 03 02             sta abst
00307E  1  A9 00 48 BD          set_ax  absANa,0
003082  1  6B 02 28     
003085  1  2D 03 02             and abst
003088  1  08 DD 73 02          tst_ax  absrlo,absflo,0
00308C  1  D0 FE 68 09  
003090  1  08 49 38 DD  
003098  1  CA                   dex
003099  1  10 DE                bpl tand4
00309B  1  A2 03                ldx #3
00309D  1  B5 1E        tand5:  lda zpAN,x
00309F  1  8D 03 02             sta abst
0030A2  1  A9 FF 48 BD          set_ax  absANa,$ff
0030A6  1  6B 02 28     
0030A9  1  2D 03 02             and abst
0030AC  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
0030B0  1  D0 FE 68 09  
0030B4  1  08 49 7D DD  
0030BC  1  CA                   dex
0030BD  1  10 02                bpl tand6
0030BF  1               
0030BF  1  A2 03                ldx #3      ;zp,x
0030C1  1               tand6:
0030C1  1  A9 00 48 BD          set_ax  absANa,0
0030C5  1  6B 02 28     
0030C8  1  35 1E                and zpAN,x
0030CA  1  08 DD 73 02          tst_ax  absrlo,absflo,0
0030CE  1  D0 FE 68 09  
0030D2  1  08 49 38 DD  
0030DA  1  CA                   dex
0030DB  1  10 E4                bpl tand6
0030DD  1  A2 03                ldx #3
0030DF  1               tand7:
0030DF  1  A9 FF 48 BD          set_ax  absANa,$ff
0030E3  1  6B 02 28     
0030E6  1  35 1E                and zpAN,x
0030E8  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
0030EC  1  D0 FE 68 09  
0030F0  1  08 49 7D DD  
0030F8  1  CA                   dex
0030F9  1  10 E4                bpl tand7
0030FB  1               
0030FB  1  A2 03                ldx #3      ;abs,x
0030FD  1               tand8:
0030FD  1  A9 00 48 BD          set_ax  absANa,0
003101  1  6B 02 28     
003104  1  3D 5F 02             and absAN,x
003107  1  08 DD 73 02          tst_ax  absrlo,absflo,0
00310B  1  D0 FE 68 09  
00310F  1  08 49 38 DD  
003117  1  CA                   dex
003118  1  10 E3                bpl tand8
00311A  1  A2 03                ldx #3
00311C  1               tand9:
00311C  1  A9 FF 48 BD          set_ax  absANa,$ff
003120  1  6B 02 28     
003123  1  3D 5F 02             and absAN,x
003126  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
00312A  1  D0 FE 68 09  
00312E  1  08 49 7D DD  
003136  1  CA                   dex
003137  1  10 E3                bpl tand9
003139  1               
003139  1  A0 03                ldy #3      ;abs,y
00313B  1               tand10:
00313B  1  A9 00 48 B9          set_ay  absANa,0
00313F  1  6B 02 28     
003142  1  39 5F 02             and absAN,y
003145  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003149  1  D0 FE 68 09  
00314D  1  08 49 38 D9  
003155  1  88                   dey
003156  1  10 E3                bpl tand10
003158  1  A0 03                ldy #3
00315A  1               tand11:
00315A  1  A9 FF 48 B9          set_ay  absANa,$ff
00315E  1  6B 02 28     
003161  1  39 5F 02             and absAN,y
003164  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003168  1  D0 FE 68 09  
00316C  1  08 49 7D D9  
003174  1  88                   dey
003175  1  10 E3                bpl tand11
003177  1               
003177  1  A2 06                ldx #6      ;(zp,x)
003179  1  A0 03                ldy #3
00317B  1               tand12:
00317B  1  A9 00 48 B9          set_ay  absANa,0
00317F  1  6B 02 28     
003182  1  21 3C                and (indAN,x)
003184  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003188  1  D0 FE 68 09  
00318C  1  08 49 38 D9  
003194  1  CA                   dex
003195  1  CA                   dex
003196  1  88                   dey
003197  1  10 E2                bpl tand12
003199  1  A2 06                ldx #6
00319B  1  A0 03                ldy #3
00319D  1               tand13:
00319D  1  A9 FF 48 B9          set_ay  absANa,$ff
0031A1  1  6B 02 28     
0031A4  1  21 3C                and (indAN,x)
0031A6  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
0031AA  1  D0 FE 68 09  
0031AE  1  08 49 7D D9  
0031B6  1  CA                   dex
0031B7  1  CA                   dex
0031B8  1  88                   dey
0031B9  1  10 E2                bpl tand13
0031BB  1               
0031BB  1  A0 03                ldy #3      ;(zp),y
0031BD  1               tand14:
0031BD  1  A9 00 48 B9          set_ay  absANa,0
0031C1  1  6B 02 28     
0031C4  1  31 3C                and (indAN),y
0031C6  1  08 D9 73 02          tst_ay  absrlo,absflo,0
0031CA  1  D0 FE 68 09  
0031CE  1  08 49 38 D9  
0031D6  1  88                   dey
0031D7  1  10 E4                bpl tand14
0031D9  1  A0 03                ldy #3
0031DB  1               tand15:
0031DB  1  A9 FF 48 B9          set_ay  absANa,$ff
0031DF  1  6B 02 28     
0031E2  1  31 3C                and (indAN),y
0031E4  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
0031E8  1  D0 FE 68 09  
0031EC  1  08 49 7D D9  
0031F4  1  88                   dey
0031F5  1  10 E4                bpl tand15
0031F7  1  AD 00 02 C9          next_test
0031FB  1  26 D0 FE A9  
0031FF  1  27 8D 00 02  
003203  1               
003203  1               ; EOR
003203  1  A2 03                ldx #3          ;immediate - self modifying code
003205  1  B5 22        teor:   lda zpEO,x
003207  1  8D 0D 02             sta ex_eori+1   ;set EOR # operand
00320A  1  A9 00 48 BD          set_ax  absEOa,0
00320E  1  6F 02 28     
003211  1  20 0C 02             jsr ex_eori     ;execute EOR # in RAM
003214  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003218  1  D0 FE 68 09  
00321C  1  08 49 38 DD  
003224  1  CA                   dex
003225  1  10 DE                bpl teor
003227  1  A2 03                ldx #3
003229  1  B5 22        teor1:  lda zpEO,x
00322B  1  8D 0D 02             sta ex_eori+1   ;set EOR # operand
00322E  1  A9 FF 48 BD          set_ax  absEOa,$ff
003232  1  6F 02 28     
003235  1  20 0C 02             jsr ex_eori     ;execute EOR # in RAM
003238  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
00323C  1  D0 FE 68 09  
003240  1  08 49 7D DD  
003248  1  CA                   dex
003249  1  10 DE                bpl teor1
00324B  1               
00324B  1  A2 03                ldx #3      ;zp
00324D  1  B5 22        teor2:   lda zpEO,x
00324F  1  85 0C                sta zpt
003251  1  A9 00 48 BD          set_ax  absEOa,0
003255  1  6F 02 28     
003258  1  45 0C                eor zpt
00325A  1  08 DD 73 02          tst_ax  absrlo,absflo,0
00325E  1  D0 FE 68 09  
003262  1  08 49 38 DD  
00326A  1  CA                   dex
00326B  1  10 E0                bpl teor2
00326D  1  A2 03                ldx #3
00326F  1  B5 22        teor3:  lda zpEO,x
003271  1  85 0C                sta zpt
003273  1  A9 FF 48 BD          set_ax  absEOa,$ff
003277  1  6F 02 28     
00327A  1  45 0C                eor zpt
00327C  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003280  1  D0 FE 68 09  
003284  1  08 49 7D DD  
00328C  1  CA                   dex
00328D  1  10 E0                bpl teor3
00328F  1               
00328F  1  A2 03                ldx #3      ;abs
003291  1  B5 22        teor4:  lda zpEO,x
003293  1  8D 03 02             sta abst
003296  1  A9 00 48 BD          set_ax  absEOa,0
00329A  1  6F 02 28     
00329D  1  4D 03 02             eor abst
0032A0  1  08 DD 73 02          tst_ax  absrlo,absflo,0
0032A4  1  D0 FE 68 09  
0032A8  1  08 49 38 DD  
0032B0  1  CA                   dex
0032B1  1  10 DE                bpl teor4
0032B3  1  A2 03                ldx #3
0032B5  1  B5 22        teor5:  lda zpEO,x
0032B7  1  8D 03 02             sta abst
0032BA  1  A9 FF 48 BD          set_ax  absEOa,$ff
0032BE  1  6F 02 28     
0032C1  1  4D 03 02             eor abst
0032C4  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
0032C8  1  D0 FE 68 09  
0032CC  1  08 49 7D DD  
0032D4  1  CA                   dex
0032D5  1  10 02                bpl teor6
0032D7  1               
0032D7  1  A2 03                ldx #3      ;zp,x
0032D9  1               teor6:
0032D9  1  A9 00 48 BD          set_ax  absEOa,0
0032DD  1  6F 02 28     
0032E0  1  55 22                eor zpEO,x
0032E2  1  08 DD 73 02          tst_ax  absrlo,absflo,0
0032E6  1  D0 FE 68 09  
0032EA  1  08 49 38 DD  
0032F2  1  CA                   dex
0032F3  1  10 E4                bpl teor6
0032F5  1  A2 03                ldx #3
0032F7  1               teor7:
0032F7  1  A9 FF 48 BD          set_ax  absEOa,$ff
0032FB  1  6F 02 28     
0032FE  1  55 22                eor zpEO,x
003300  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003304  1  D0 FE 68 09  
003308  1  08 49 7D DD  
003310  1  CA                   dex
003311  1  10 E4                bpl teor7
003313  1               
003313  1  A2 03                ldx #3      ;abs,x
003315  1               teor8:
003315  1  A9 00 48 BD          set_ax  absEOa,0
003319  1  6F 02 28     
00331C  1  5D 63 02             eor absEO,x
00331F  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003323  1  D0 FE 68 09  
003327  1  08 49 38 DD  
00332F  1  CA                   dex
003330  1  10 E3                bpl teor8
003332  1  A2 03                ldx #3
003334  1               teor9:
003334  1  A9 FF 48 BD          set_ax  absEOa,$ff
003338  1  6F 02 28     
00333B  1  5D 63 02             eor absEO,x
00333E  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003342  1  D0 FE 68 09  
003346  1  08 49 7D DD  
00334E  1  CA                   dex
00334F  1  10 E3                bpl teor9
003351  1               
003351  1  A0 03                ldy #3      ;abs,y
003353  1               teor10:
003353  1  A9 00 48 B9          set_ay  absEOa,0
003357  1  6F 02 28     
00335A  1  59 63 02             eor absEO,y
00335D  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003361  1  D0 FE 68 09  
003365  1  08 49 38 D9  
00336D  1  88                   dey
00336E  1  10 E3                bpl teor10
003370  1  A0 03                ldy #3
003372  1               teor11:
003372  1  A9 FF 48 B9          set_ay  absEOa,$ff
003376  1  6F 02 28     
003379  1  59 63 02             eor absEO,y
00337C  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003380  1  D0 FE 68 09  
003384  1  08 49 7D D9  
00338C  1  88                   dey
00338D  1  10 E3                bpl teor11
00338F  1               
00338F  1  A2 06                ldx #6      ;(zp,x)
003391  1  A0 03                ldy #3
003393  1               teor12:
003393  1  A9 00 48 B9          set_ay  absEOa,0
003397  1  6F 02 28     
00339A  1  41 44                eor (indEO,x)
00339C  1  08 D9 73 02          tst_ay  absrlo,absflo,0
0033A0  1  D0 FE 68 09  
0033A4  1  08 49 38 D9  
0033AC  1  CA                   dex
0033AD  1  CA                   dex
0033AE  1  88                   dey
0033AF  1  10 E2                bpl teor12
0033B1  1  A2 06                ldx #6
0033B3  1  A0 03                ldy #3
0033B5  1               teor13:
0033B5  1  A9 FF 48 B9          set_ay  absEOa,$ff
0033B9  1  6F 02 28     
0033BC  1  41 44                eor (indEO,x)
0033BE  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
0033C2  1  D0 FE 68 09  
0033C6  1  08 49 7D D9  
0033CE  1  CA                   dex
0033CF  1  CA                   dex
0033D0  1  88                   dey
0033D1  1  10 E2                bpl teor13
0033D3  1               
0033D3  1  A0 03                ldy #3      ;(zp),y
0033D5  1               teor14:
0033D5  1  A9 00 48 B9          set_ay  absEOa,0
0033D9  1  6F 02 28     
0033DC  1  51 44                eor (indEO),y
0033DE  1  08 D9 73 02          tst_ay  absrlo,absflo,0
0033E2  1  D0 FE 68 09  
0033E6  1  08 49 38 D9  
0033EE  1  88                   dey
0033EF  1  10 E4                bpl teor14
0033F1  1  A0 03                ldy #3
0033F3  1               teor15:
0033F3  1  A9 FF 48 B9          set_ay  absEOa,$ff
0033F7  1  6F 02 28     
0033FA  1  51 44                eor (indEO),y
0033FC  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003400  1  D0 FE 68 09  
003404  1  08 49 7D D9  
00340C  1  88                   dey
00340D  1  10 E4                bpl teor15
00340F  1  AD 00 02 C9          next_test
003413  1  27 D0 FE A9  
003417  1  28 8D 00 02  
00341B  1               
00341B  1               ; OR
00341B  1  A2 03                ldx #3          ;immediate - self modifying code
00341D  1  B5 1A        tora:   lda zpOR,x
00341F  1  8D 10 02             sta ex_orai+1   ;set ORA # operand
003422  1  A9 00 48 BD          set_ax  absORa,0
003426  1  67 02 28     
003429  1  20 0F 02             jsr ex_orai     ;execute ORA # in RAM
00342C  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003430  1  D0 FE 68 09  
003434  1  08 49 38 DD  
00343C  1  CA                   dex
00343D  1  10 DE                bpl tora
00343F  1  A2 03                ldx #3
003441  1  B5 1A        tora1:  lda zpOR,x
003443  1  8D 10 02             sta ex_orai+1   ;set ORA # operand
003446  1  A9 FF 48 BD          set_ax  absORa,$ff
00344A  1  67 02 28     
00344D  1  20 0F 02             jsr ex_orai     ;execute ORA # in RAM
003450  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003454  1  D0 FE 68 09  
003458  1  08 49 7D DD  
003460  1  CA                   dex
003461  1  10 DE                bpl tora1
003463  1               
003463  1  A2 03                ldx #3      ;zp
003465  1  B5 1A        tora2:  lda zpOR,x
003467  1  85 0C                sta zpt
003469  1  A9 00 48 BD          set_ax  absORa,0
00346D  1  67 02 28     
003470  1  05 0C                ora zpt
003472  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003476  1  D0 FE 68 09  
00347A  1  08 49 38 DD  
003482  1  CA                   dex
003483  1  10 E0                bpl tora2
003485  1  A2 03                ldx #3
003487  1  B5 1A        tora3:  lda zpOR,x
003489  1  85 0C                sta zpt
00348B  1  A9 FF 48 BD          set_ax  absORa,$ff
00348F  1  67 02 28     
003492  1  05 0C                ora zpt
003494  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003498  1  D0 FE 68 09  
00349C  1  08 49 7D DD  
0034A4  1  CA                   dex
0034A5  1  10 E0                bpl tora3
0034A7  1               
0034A7  1  A2 03                ldx #3      ;abs
0034A9  1  B5 1A        tora4:  lda zpOR,x
0034AB  1  8D 03 02             sta abst
0034AE  1  A9 00 48 BD          set_ax  absORa,0
0034B2  1  67 02 28     
0034B5  1  0D 03 02             ora abst
0034B8  1  08 DD 73 02          tst_ax  absrlo,absflo,0
0034BC  1  D0 FE 68 09  
0034C0  1  08 49 38 DD  
0034C8  1  CA                   dex
0034C9  1  10 DE                bpl tora4
0034CB  1  A2 03                ldx #3
0034CD  1  B5 1A        tora5:  lda zpOR,x
0034CF  1  8D 03 02             sta abst
0034D2  1  A9 FF 48 BD          set_ax  absORa,$ff
0034D6  1  67 02 28     
0034D9  1  0D 03 02             ora abst
0034DC  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
0034E0  1  D0 FE 68 09  
0034E4  1  08 49 7D DD  
0034EC  1  CA                   dex
0034ED  1  10 02                bpl tora6
0034EF  1               
0034EF  1  A2 03                ldx #3      ;zp,x
0034F1  1               tora6:
0034F1  1  A9 00 48 BD          set_ax  absORa,0
0034F5  1  67 02 28     
0034F8  1  15 1A                ora zpOR,x
0034FA  1  08 DD 73 02          tst_ax  absrlo,absflo,0
0034FE  1  D0 FE 68 09  
003502  1  08 49 38 DD  
00350A  1  CA                   dex
00350B  1  10 E4                bpl tora6
00350D  1  A2 03                ldx #3
00350F  1               tora7:
00350F  1  A9 FF 48 BD          set_ax  absORa,$ff
003513  1  67 02 28     
003516  1  15 1A                ora zpOR,x
003518  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
00351C  1  D0 FE 68 09  
003520  1  08 49 7D DD  
003528  1  CA                   dex
003529  1  10 E4                bpl tora7
00352B  1               
00352B  1  A2 03                ldx #3      ;abs,x
00352D  1               tora8:
00352D  1  A9 00 48 BD          set_ax  absORa,0
003531  1  67 02 28     
003534  1  1D 5B 02             ora absOR,x
003537  1  08 DD 73 02          tst_ax  absrlo,absflo,0
00353B  1  D0 FE 68 09  
00353F  1  08 49 38 DD  
003547  1  CA                   dex
003548  1  10 E3                bpl tora8
00354A  1  A2 03                ldx #3
00354C  1               tora9:
00354C  1  A9 FF 48 BD          set_ax  absORa,$ff
003550  1  67 02 28     
003553  1  1D 5B 02             ora absOR,x
003556  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
00355A  1  D0 FE 68 09  
00355E  1  08 49 7D DD  
003566  1  CA                   dex
003567  1  10 E3                bpl tora9
003569  1               
003569  1  A0 03                ldy #3      ;abs,y
00356B  1               tora10:
00356B  1  A9 00 48 B9          set_ay  absORa,0
00356F  1  67 02 28     
003572  1  19 5B 02             ora absOR,y
003575  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003579  1  D0 FE 68 09  
00357D  1  08 49 38 D9  
003585  1  88                   dey
003586  1  10 E3                bpl tora10
003588  1  A0 03                ldy #3
00358A  1               tora11:
00358A  1  A9 FF 48 B9          set_ay  absORa,$ff
00358E  1  67 02 28     
003591  1  19 5B 02             ora absOR,y
003594  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003598  1  D0 FE 68 09  
00359C  1  08 49 7D D9  
0035A4  1  88                   dey
0035A5  1  10 E3                bpl tora11
0035A7  1               
0035A7  1  A2 06                ldx #6      ;(zp,x)
0035A9  1  A0 03                ldy #3
0035AB  1               tora12:
0035AB  1  A9 00 48 B9          set_ay  absORa,0
0035AF  1  67 02 28     
0035B2  1  01 4C                ora (indOR,x)
0035B4  1  08 D9 73 02          tst_ay  absrlo,absflo,0
0035B8  1  D0 FE 68 09  
0035BC  1  08 49 38 D9  
0035C4  1  CA                   dex
0035C5  1  CA                   dex
0035C6  1  88                   dey
0035C7  1  10 E2                bpl tora12
0035C9  1  A2 06                ldx #6
0035CB  1  A0 03                ldy #3
0035CD  1               tora13:
0035CD  1  A9 FF 48 B9          set_ay  absORa,$ff
0035D1  1  67 02 28     
0035D4  1  01 4C                ora (indOR,x)
0035D6  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
0035DA  1  D0 FE 68 09  
0035DE  1  08 49 7D D9  
0035E6  1  CA                   dex
0035E7  1  CA                   dex
0035E8  1  88                   dey
0035E9  1  10 E2                bpl tora13
0035EB  1               
0035EB  1  A0 03                ldy #3      ;(zp),y
0035ED  1               tora14:
0035ED  1  A9 00 48 B9          set_ay  absORa,0
0035F1  1  67 02 28     
0035F4  1  11 4C                ora (indOR),y
0035F6  1  08 D9 73 02          tst_ay  absrlo,absflo,0
0035FA  1  D0 FE 68 09  
0035FE  1  08 49 38 D9  
003606  1  88                   dey
003607  1  10 E4                bpl tora14
003609  1  A0 03                ldy #3
00360B  1               tora15:
00360B  1  A9 FF 48 B9          set_ay  absORa,$ff
00360F  1  67 02 28     
003612  1  11 4C                ora (indOR),y
003614  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003618  1  D0 FE 68 09  
00361C  1  08 49 7D D9  
003624  1  88                   dey
003625  1  10 E4                bpl tora15
003627  1                   .if I_flag = 3
003627  1  58                   cli
003628  1                   .endif
003628  1  AD 00 02 C9          next_test
00362C  1  28 D0 FE A9  
003630  1  29 8D 00 02  
003634  1               
003634  1               ; full binary add/subtract test
003634  1               ; iterates through all combinations of operands and carry input
003634  1               ; uses increments/decrements to predict result & result flags
003634  1  D8                   cld
003635  1  A2 0E                ldx #ad2        ;for indexed test
003637  1  A0 FF                ldy #$ff        ;max range
003639  1  A9 00                lda #0          ;start with adding zeroes & no carry
00363B  1  85 0C                sta adfc        ;carry in - for diag
00363D  1  85 0D                sta ad1         ;operand 1 - accumulator
00363F  1  85 0E                sta ad2         ;operand 2 - memory or immediate
003641  1  8D 03 02             sta ada2        ;non zp
003644  1  85 0F                sta adrl        ;expected result bits 0-7
003646  1  85 10                sta adrh        ;expected result bit 8 (carry out)
003648  1  A9 FF                lda #$ff        ;complemented operand 2 for subtract
00364A  1  85 12                sta sb2
00364C  1  8D 04 02             sta sba2        ;non zp
00364F  1  A9 02                lda #2          ;expected Z-flag
003651  1  85 11                sta adrf
003653  1  18           tadd:   clc             ;test with carry clear
003654  1  20 9F 36             jsr chkadd
003657  1  E6 0C                inc adfc        ;now with carry
003659  1  E6 0F                inc adrl        ;result +1
00365B  1  08                   php             ;save N & Z from low result
00365C  1  08                   php
00365D  1  68                   pla             ;accu holds expected flags
00365E  1  29 82                and #$82        ;mask N & Z
003660  1  28                   plp
003661  1  D0 02                bne tadd1
003663  1  E6 10                inc adrh        ;result bit 8 - carry
003665  1  05 10        tadd1:  ora adrh        ;merge C to expected flags
003667  1  85 11                sta adrf        ;save expected flags except overflow
003669  1  38                   sec             ;test with carry set
00366A  1  20 9F 36             jsr chkadd
00366D  1  C6 0C                dec adfc        ;same for operand +1 but no carry
00366F  1  E6 0D                inc ad1
003671  1  D0 E0                bne tadd        ;iterate op1
003673  1  A9 00                lda #0          ;preset result to op2 when op1 = 0
003675  1  85 10                sta adrh
003677  1  EE 03 02             inc ada2
00367A  1  E6 0E                inc ad2
00367C  1  08                   php             ;save NZ as operand 2 becomes the new result
00367D  1  68                   pla
00367E  1  29 82                and #$82        ;mask N00000Z0
003680  1  85 11                sta adrf        ;no need to check carry as we are adding to 0
003682  1  C6 12                dec sb2         ;complement subtract operand 2
003684  1  CE 04 02             dec sba2
003687  1  A5 0E                lda ad2
003689  1  85 0F                sta adrl
00368B  1  D0 C6                bne tadd        ;iterate op2
00368D  1                   .if disable_decimal < 1
00368D  1                       next_test
00368D  1               
00368D  1               ; decimal add/subtract test
00368D  1               ; *** WARNING - tests documented behavior only! ***
00368D  1               ;   only valid BCD operands are tested, N V Z flags are ignored
00368D  1               ; iterates through all valid combinations of operands and carry input
00368D  1               ; uses increments/decrements to predict result & carry flag
00368D  1                       sed
00368D  1                       ldx #ad2        ;for indexed test
00368D  1                       ldy #$ff        ;max range
00368D  1                       lda #$99        ;start with adding 99 to 99 with carry
00368D  1                       sta ad1         ;operand 1 - accumulator
00368D  1                       sta ad2         ;operand 2 - memory or immediate
00368D  1                       sta ada2        ;non zp
00368D  1                       sta adrl        ;expected result bits 0-7
00368D  1                       lda #1          ;set carry in & out
00368D  1                       sta adfc        ;carry in - for diag
00368D  1                       sta adrh        ;expected result bit 8 (carry out)
00368D  1                       lda #0          ;complemented operand 2 for subtract
00368D  1                       sta sb2
00368D  1                       sta sba2        ;non zp
00368D  1               tdad:   sec             ;test with carry set
00368D  1                       jsr chkdad
00368D  1                       dec adfc        ;now with carry clear
00368D  1                       lda adrl        ;decimal adjust result
00368D  1                       bne tdad1       ;skip clear carry & preset result 99 (9A-1)
00368D  1                       dec adrh
00368D  1                       lda #$99
00368D  1                       sta adrl
00368D  1                       bne tdad3
00368D  1               tdad1:  and #$f         ;lower nibble mask
00368D  1                       bne tdad2       ;no decimal adjust needed
00368D  1                       dec adrl        ;decimal adjust (?0-6)
00368D  1                       dec adrl
00368D  1                       dec adrl
00368D  1                       dec adrl
00368D  1                       dec adrl
00368D  1                       dec adrl
00368D  1               tdad2:  dec adrl        ;result -1
00368D  1               tdad3:  clc             ;test with carry clear
00368D  1                       jsr chkdad
00368D  1                       inc adfc        ;same for operand -1 but with carry
00368D  1                       lda ad1         ;decimal adjust operand 1
00368D  1                       beq tdad5       ;iterate operand 2
00368D  1                       and #$f         ;lower nibble mask
00368D  1                       bne tdad4       ;skip decimal adjust
00368D  1                       dec ad1         ;decimal adjust (?0-6)
00368D  1                       dec ad1
00368D  1                       dec ad1
00368D  1                       dec ad1
00368D  1                       dec ad1
00368D  1                       dec ad1
00368D  1               tdad4:  dec ad1         ;operand 1 -1
00368D  1                       jmp tdad        ;iterate op1
00368D  1               
00368D  1               tdad5:  lda #$99        ;precharge op1 max
00368D  1                       sta ad1
00368D  1                       lda ad2         ;decimal adjust operand 2
00368D  1                       beq tdad7       ;end of iteration
00368D  1                       and #$f         ;lower nibble mask
00368D  1                       bne tdad6       ;skip decimal adjust
00368D  1                       dec ad2         ;decimal adjust (?0-6)
00368D  1                       dec ad2
00368D  1                       dec ad2
00368D  1                       dec ad2
00368D  1                       dec ad2
00368D  1                       dec ad2
00368D  1                       inc sb2         ;complemented decimal adjust for subtract (?9+6)
00368D  1                       inc sb2
00368D  1                       inc sb2
00368D  1                       inc sb2
00368D  1                       inc sb2
00368D  1                       inc sb2
00368D  1               tdad6:  dec ad2         ;operand 2 -1
00368D  1                       inc sb2         ;complemented operand for subtract
00368D  1                       lda sb2
00368D  1                       sta sba2        ;copy as non zp operand
00368D  1                       lda ad2
00368D  1                       sta ada2        ;copy as non zp operand
00368D  1                       sta adrl        ;new result since op1+carry=00+carry +op2=op2
00368D  1                       inc adrh        ;result carry
00368D  1                       bne tdad        ;iterate op2
00368D  1               tdad7:
00368D  1                       next_test
00368D  1               
00368D  1               ; decimal/binary switch test
00368D  1               ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
00368D  1               ;   tables
00368D  1                       clc
00368D  1                       cld
00368D  1                       php
00368D  1                       lda #$55
00368D  1                       adc #$55
00368D  1                       cmp #$aa
00368D  1                       trap_ne         ;expected binary result after cld
00368D  1                       clc
00368D  1                       sed
00368D  1                       php
00368D  1                       lda #$55
00368D  1                       adc #$55
00368D  1                       cmp #$10
00368D  1                       trap_ne         ;expected decimal result after sed
00368D  1                       cld
00368D  1                       plp
00368D  1                       lda #$55
00368D  1                       adc #$55
00368D  1                       cmp #$10
00368D  1                       trap_ne         ;expected decimal result after plp D=1
00368D  1                       plp
00368D  1                       lda #$55
00368D  1                       adc #$55
00368D  1                       cmp #$aa
00368D  1                       trap_ne         ;expected binary result after plp D=0
00368D  1                       clc
00368D  1                       lda #>bin_rti_ret ;emulated interrupt for rti
00368D  1                       pha
00368D  1                       lda #<bin_rti_ret
00368D  1                       pha
00368D  1                       php
00368D  1                       sed
00368D  1                       lda #>dec_rti_ret ;emulated interrupt for rti
00368D  1                       pha
00368D  1                       lda #<dec_rti_ret
00368D  1                       pha
00368D  1                       php
00368D  1                       cld
00368D  1                       rti
00368D  1               dec_rti_ret:
00368D  1                       lda #$55
00368D  1                       adc #$55
00368D  1                       cmp #$10
00368D  1                       trap_ne         ;expected decimal result after rti D=1
00368D  1                       rti
00368D  1               bin_rti_ret:
00368D  1                       lda #$55
00368D  1                       adc #$55
00368D  1                       cmp #$aa
00368D  1                       trap_ne         ;expected binary result after rti D=0
00368D  1                   .endif
00368D  1               
00368D  1  AD 00 02             lda test_case
003690  1  C9 29                cmp #test_num
003692  1  D0 FE                trap_ne         ;previous test is out of sequence
003694  1  A9 F0                lda #$f0        ;mark opcode testing complete
003696  1  8D 00 02             sta test_case
003699  1               
003699  1               ; final RAM integrity test
003699  1               ;   verifies that none of the previous tests has altered RAM outside of the
003699  1               ;   designated write areas.
003699  1                       check_ram
003699  1               ; *** DEBUG INFO ***
003699  1               ; to debug checksum errors uncomment check_ram in the next_test macro to
003699  1               ; narrow down the responsible opcode.
003699  1               ; may give false errors when monitor, OS or other background activity is
003699  1               ; allowed during previous tests.
003699  1               
003699  1               
003699  1               ; S U C C E S S ************************************************
003699  1               ; -------------
003699  1  4C 99 36             success         ;if you get here everything went well
00369C  1               ; -------------
00369C  1               ; S U C C E S S ************************************************
00369C  1  4C 00 04             jmp start       ;run again
00369F  1               
00369F  1                   .if disable_decimal < 1
00369F  1               ; core subroutine of the decimal add/subtract test
00369F  1               ; *** WARNING - tests documented behavior only! ***
00369F  1               ;   only valid BCD operands are tested, N V Z flags are ignored
00369F  1               ; iterates through all valid combinations of operands and carry input
00369F  1               ; uses increments/decrements to predict result & carry flag
00369F  1               chkdad:
00369F  1               ; decimal ADC / SBC zp
00369F  1                       php             ;save carry for subtract
00369F  1                       lda ad1
00369F  1                       adc ad2         ;perform add
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1                       php             ;save carry for next add
00369F  1                       lda ad1
00369F  1                       sbc sb2         ;perform subtract
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad flags
00369F  1                       plp
00369F  1               ; decimal ADC / SBC abs
00369F  1                       php             ;save carry for subtract
00369F  1                       lda ad1
00369F  1                       adc ada2        ;perform add
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1                       php             ;save carry for next add
00369F  1                       lda ad1
00369F  1                       sbc sba2        ;perform subtract
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1               ; decimal ADC / SBC #
00369F  1                       php             ;save carry for subtract
00369F  1                       lda ad2
00369F  1                       sta ex_adci+1   ;set ADC # operand
00369F  1                       lda ad1
00369F  1                       jsr ex_adci     ;execute ADC # in RAM
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1                       php             ;save carry for next add
00369F  1                       lda sb2
00369F  1                       sta ex_sbci+1   ;set SBC # operand
00369F  1                       lda ad1
00369F  1                       jsr ex_sbci     ;execute SBC # in RAM
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1               ; decimal ADC / SBC zp,x
00369F  1                       php             ;save carry for subtract
00369F  1                       lda ad1
00369F  1                       adc 0,x         ;perform add
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1                       php             ;save carry for next add
00369F  1                       lda ad1
00369F  1                       sbc sb2-ad2,x   ;perform subtract
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1               ; decimal ADC / SBC abs,x
00369F  1                       php             ;save carry for subtract
00369F  1                       lda ad1
00369F  1                       adc ada2-ad2,x  ;perform add
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1                       php             ;save carry for next add
00369F  1                       lda ad1
00369F  1                       sbc sba2-ad2,x  ;perform subtract
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1               ; decimal ADC / SBC abs,y
00369F  1                       php             ;save carry for subtract
00369F  1                       lda ad1
00369F  1                       adc ada2-$ff,y  ;perform add
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1                       php             ;save carry for next add
00369F  1                       lda ad1
00369F  1                       sbc sba2-$ff,y  ;perform subtract
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1               ; decimal ADC / SBC (zp,x)
00369F  1                       php             ;save carry for subtract
00369F  1                       lda ad1
00369F  1                       adc (<adi2-ad2,x) ;perform add
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1                       php             ;save carry for next add
00369F  1                       lda ad1
00369F  1                       sbc (<sbi2-ad2,x) ;perform subtract
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1               ; decimal ADC / SBC (abs),y
00369F  1                       php             ;save carry for subtract
00369F  1                       lda ad1
00369F  1                       adc (adiy2),y   ;perform add
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1                       php             ;save carry for next add
00369F  1                       lda ad1
00369F  1                       sbc (sbiy2),y   ;perform subtract
00369F  1                       php
00369F  1                       cmp adrl        ;check result
00369F  1                       trap_ne         ;bad result
00369F  1                       pla             ;check flags
00369F  1                       and #1          ;mask carry
00369F  1                       cmp adrh
00369F  1                       trap_ne         ;bad carry
00369F  1                       plp
00369F  1                       rts
00369F  1                   .endif
00369F  1               
00369F  1               ; core subroutine of the full binary add/subtract test
00369F  1               ; iterates through all combinations of operands and carry input
00369F  1               ; uses increments/decrements to predict result & result flags
00369F  1  A5 11        chkadd: lda adrf        ;add V-flag if overflow
0036A1  1  29 83                and #$83        ;keep N-----ZC / clear V
0036A3  1  48                   pha
0036A4  1  A5 0D                lda ad1         ;test sign unequal between operands
0036A6  1  45 0E                eor ad2
0036A8  1  30 0A                bmi ckad1       ;no overflow possible - operands have different sign
0036AA  1  A5 0D                lda ad1         ;test sign equal between operands and result
0036AC  1  45 0F                eor adrl
0036AE  1  10 04                bpl ckad1       ;no overflow occured - operand and result have same sign
0036B0  1  68                   pla
0036B1  1  09 40                ora #$40        ;set V
0036B3  1  48                   pha
0036B4  1  68           ckad1:  pla
0036B5  1  85 11                sta adrf        ;save expected flags
0036B7  1               ; binary ADC / SBC zp
0036B7  1  08                   php             ;save carry for subtract
0036B8  1  A5 0D                lda ad1
0036BA  1  65 0E                adc ad2         ;perform add
0036BC  1  08                   php
0036BD  1  C5 0F                cmp adrl        ;check result
0036BF  1  D0 FE                trap_ne         ;bad result
0036C1  1  68                   pla             ;check flags
0036C2  1  29 C3                and #$c3        ;mask NV----ZC
0036C4  1  C5 11                cmp adrf
0036C6  1  D0 FE                trap_ne         ;bad flags
0036C8  1  28                   plp
0036C9  1  08                   php             ;save carry for next add
0036CA  1  A5 0D                lda ad1
0036CC  1  E5 12                sbc sb2         ;perform subtract
0036CE  1  08                   php
0036CF  1  C5 0F                cmp adrl        ;check result
0036D1  1  D0 FE                trap_ne         ;bad result
0036D3  1  68                   pla             ;check flags
0036D4  1  29 C3                and #$c3        ;mask NV----ZC
0036D6  1  C5 11                cmp adrf
0036D8  1  D0 FE                trap_ne         ;bad flags
0036DA  1  28                   plp
0036DB  1               ; binary ADC / SBC abs
0036DB  1  08                   php             ;save carry for subtract
0036DC  1  A5 0D                lda ad1
0036DE  1  6D 03 02             adc ada2        ;perform add
0036E1  1  08                   php
0036E2  1  C5 0F                cmp adrl        ;check result
0036E4  1  D0 FE                trap_ne         ;bad result
0036E6  1  68                   pla             ;check flags
0036E7  1  29 C3                and #$c3        ;mask NV----ZC
0036E9  1  C5 11                cmp adrf
0036EB  1  D0 FE                trap_ne         ;bad flags
0036ED  1  28                   plp
0036EE  1  08                   php             ;save carry for next add
0036EF  1  A5 0D                lda ad1
0036F1  1  ED 04 02             sbc sba2        ;perform subtract
0036F4  1  08                   php
0036F5  1  C5 0F                cmp adrl        ;check result
0036F7  1  D0 FE                trap_ne         ;bad result
0036F9  1  68                   pla             ;check flags
0036FA  1  29 C3                and #$c3        ;mask NV----ZC
0036FC  1  C5 11                cmp adrf
0036FE  1  D0 FE                trap_ne         ;bad flags
003700  1  28                   plp
003701  1               ; binary ADC / SBC #
003701  1  08                   php             ;save carry for subtract
003702  1  A5 0E                lda ad2
003704  1  8D 13 02             sta ex_adci+1   ;set ADC # operand
003707  1  A5 0D                lda ad1
003709  1  20 12 02             jsr ex_adci     ;execute ADC # in RAM
00370C  1  08                   php
00370D  1  C5 0F                cmp adrl        ;check result
00370F  1  D0 FE                trap_ne         ;bad result
003711  1  68                   pla             ;check flags
003712  1  29 C3                and #$c3        ;mask NV----ZC
003714  1  C5 11                cmp adrf
003716  1  D0 FE                trap_ne         ;bad flags
003718  1  28                   plp
003719  1  08                   php             ;save carry for next add
00371A  1  A5 12                lda sb2
00371C  1  8D 16 02             sta ex_sbci+1   ;set SBC # operand
00371F  1  A5 0D                lda ad1
003721  1  20 15 02             jsr ex_sbci     ;execute SBC # in RAM
003724  1  08                   php
003725  1  C5 0F                cmp adrl        ;check result
003727  1  D0 FE                trap_ne         ;bad result
003729  1  68                   pla             ;check flags
00372A  1  29 C3                and #$c3        ;mask NV----ZC
00372C  1  C5 11                cmp adrf
00372E  1  D0 FE                trap_ne         ;bad flags
003730  1  28                   plp
003731  1               ; binary ADC / SBC zp,x
003731  1  08                   php             ;save carry for subtract
003732  1  A5 0D                lda ad1
003734  1  75 00                adc 0,x         ;perform add
003736  1  08                   php
003737  1  C5 0F                cmp adrl        ;check result
003739  1  D0 FE                trap_ne         ;bad result
00373B  1  68                   pla             ;check flags
00373C  1  29 C3                and #$c3        ;mask NV----ZC
00373E  1  C5 11                cmp adrf
003740  1  D0 FE                trap_ne         ;bad flags
003742  1  28                   plp
003743  1  08                   php             ;save carry for next add
003744  1  A5 0D                lda ad1
003746  1  F5 04                sbc sb2-ad2,x   ;perform subtract
003748  1  08                   php
003749  1  C5 0F                cmp adrl        ;check result
00374B  1  D0 FE                trap_ne         ;bad result
00374D  1  68                   pla             ;check flags
00374E  1  29 C3                and #$c3        ;mask NV----ZC
003750  1  C5 11                cmp adrf
003752  1  D0 FE                trap_ne         ;bad flags
003754  1  28                   plp
003755  1               ; binary ADC / SBC abs,x
003755  1  08                   php             ;save carry for subtract
003756  1  A5 0D                lda ad1
003758  1  7D F5 01             adc ada2-ad2,x  ;perform add
00375B  1  08                   php
00375C  1  C5 0F                cmp adrl        ;check result
00375E  1  D0 FE                trap_ne         ;bad result
003760  1  68                   pla             ;check flags
003761  1  29 C3                and #$c3        ;mask NV----ZC
003763  1  C5 11                cmp adrf
003765  1  D0 FE                trap_ne         ;bad flags
003767  1  28                   plp
003768  1  08                   php             ;save carry for next add
003769  1  A5 0D                lda ad1
00376B  1  FD F6 01             sbc sba2-ad2,x  ;perform subtract
00376E  1  08                   php
00376F  1  C5 0F                cmp adrl        ;check result
003771  1  D0 FE                trap_ne         ;bad result
003773  1  68                   pla             ;check flags
003774  1  29 C3                and #$c3        ;mask NV----ZC
003776  1  C5 11                cmp adrf
003778  1  D0 FE                trap_ne         ;bad flags
00377A  1  28                   plp
00377B  1               ; binary ADC / SBC abs,y
00377B  1  08                   php             ;save carry for subtract
00377C  1  A5 0D                lda ad1
00377E  1  79 04 01             adc ada2-$ff,y  ;perform add
003781  1  08                   php
003782  1  C5 0F                cmp adrl        ;check result
003784  1  D0 FE                trap_ne         ;bad result
003786  1  68                   pla             ;check flags
003787  1  29 C3                and #$c3        ;mask NV----ZC
003789  1  C5 11                cmp adrf
00378B  1  D0 FE                trap_ne         ;bad flags
00378D  1  28                   plp
00378E  1  08                   php             ;save carry for next add
00378F  1  A5 0D                lda ad1
003791  1  F9 05 01             sbc sba2-$ff,y  ;perform subtract
003794  1  08                   php
003795  1  C5 0F                cmp adrl        ;check result
003797  1  D0 FE                trap_ne         ;bad result
003799  1  68                   pla             ;check flags
00379A  1  29 C3                and #$c3        ;mask NV----ZC
00379C  1  C5 11                cmp adrf
00379E  1  D0 FE                trap_ne         ;bad flags
0037A0  1  28                   plp
0037A1  1               ; binary ADC / SBC (zp,x)
0037A1  1  08                   php             ;save carry for subtract
0037A2  1  A5 0D                lda ad1
0037A4  1  61 46                adc (<adi2-ad2,x) ;perform add
0037A6  1  08                   php
0037A7  1  C5 0F                cmp adrl        ;check result
0037A9  1  D0 FE                trap_ne         ;bad result
0037AB  1  68                   pla             ;check flags
0037AC  1  29 C3                and #$c3        ;mask NV----ZC
0037AE  1  C5 11                cmp adrf
0037B0  1  D0 FE                trap_ne         ;bad flags
0037B2  1  28                   plp
0037B3  1  08                   php             ;save carry for next add
0037B4  1  A5 0D                lda ad1
0037B6  1  E1 48                sbc (<sbi2-ad2,x) ;perform subtract
0037B8  1  08                   php
0037B9  1  C5 0F                cmp adrl        ;check result
0037BB  1  D0 FE                trap_ne         ;bad result
0037BD  1  68                   pla             ;check flags
0037BE  1  29 C3                and #$c3        ;mask NV----ZC
0037C0  1  C5 11                cmp adrf
0037C2  1  D0 FE                trap_ne         ;bad flags
0037C4  1  28                   plp
0037C5  1               ; binary ADC / SBC (abs),y
0037C5  1  08                   php             ;save carry for subtract
0037C6  1  A5 0D                lda ad1
0037C8  1  71 58                adc (adiy2),y   ;perform add
0037CA  1  08                   php
0037CB  1  C5 0F                cmp adrl        ;check result
0037CD  1  D0 FE                trap_ne         ;bad result
0037CF  1  68                   pla             ;check flags
0037D0  1  29 C3                and #$c3        ;mask NV----ZC
0037D2  1  C5 11                cmp adrf
0037D4  1  D0 FE                trap_ne         ;bad flags
0037D6  1  28                   plp
0037D7  1  08                   php             ;save carry for next add
0037D8  1  A5 0D                lda ad1
0037DA  1  F1 5A                sbc (sbiy2),y   ;perform subtract
0037DC  1  08                   php
0037DD  1  C5 0F                cmp adrl        ;check result
0037DF  1  D0 FE                trap_ne         ;bad result
0037E1  1  68                   pla             ;check flags
0037E2  1  29 C3                and #$c3        ;mask NV----ZC
0037E4  1  C5 11                cmp adrf
0037E6  1  D0 FE                trap_ne         ;bad flags
0037E8  1  28                   plp
0037E9  1  60                   rts
0037EA  1               
0037EA  1               ; target for the jump absolute test
0037EA  1  88                   dey
0037EB  1  88                   dey
0037EC  1               test_far:
0037EC  1  08                   php             ;either SP or Y count will fail, if we do not hit
0037ED  1  88                   dey
0037EE  1  88                   dey
0037EF  1  88                   dey
0037F0  1  28                   plp
0037F1  1  B0 FE                trap_cs         ;flags loaded?
0037F3  1  70 FE                trap_vs
0037F5  1  30 FE                trap_mi
0037F7  1  F0 FE                trap_eq
0037F9  1  C9 46                cmp #'F'        ;registers loaded?
0037FB  1  D0 FE                trap_ne
0037FD  1  E0 41                cpx #'A'
0037FF  1  D0 FE                trap_ne
003801  1  C0 4F                cpy #('R'-3)
003803  1  D0 FE                trap_ne
003805  1  48                   pha             ;save a,x
003806  1  8A                   txa
003807  1  48                   pha
003808  1  BA                   tsx
003809  1  E0 FD                cpx #$fd        ;check SP
00380B  1  D0 FE                trap_ne
00380D  1  68                   pla             ;restore x
00380E  1  AA                   tax
00380F  1  A9 FF 48 28          set_stat $ff
003813  1  68                   pla             ;restore a
003814  1  E8                   inx             ;return registers with modifications
003815  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
003817  1  4C 33 09             jmp far_ret
00381A  1               
00381A  1               ; target for the jump indirect test
00381A  1               ;       .align 2
00381A  1                       .if * & 1       ; workaround for problems with .align 2
00381A  1                           .byte 0     ;
00381A  1                       .endif          ;
00381A  1               ptr_tst_ind:
00381A  1  23 38                .word   test_ind
00381C  1               ptr_ind_ret:
00381C  1  88 09                .word   ind_ret
00381E  1  4C 1E 38             trap            ;runover protection
003821  1  88                   dey
003822  1  88                   dey
003823  1               test_ind:
003823  1  08                   php             ;either SP or Y count will fail, if we do not hit
003824  1  88                   dey
003825  1  88                   dey
003826  1  88                   dey
003827  1  28                   plp
003828  1  B0 FE                trap_cs         ;flags loaded?
00382A  1  70 FE                trap_vs
00382C  1  30 FE                trap_mi
00382E  1  F0 FE                trap_eq
003830  1  C9 49                cmp #'I'        ;registers loaded?
003832  1  D0 FE                trap_ne
003834  1  E0 4E                cpx #'N'
003836  1  D0 FE                trap_ne
003838  1  C0 41                cpy #('D'-3)
00383A  1  D0 FE                trap_ne
00383C  1  48                   pha             ;save a,x
00383D  1  8A                   txa
00383E  1  48                   pha
00383F  1  BA                   tsx
003840  1  E0 FD                cpx #$fd        ;check SP
003842  1  D0 FE                trap_ne
003844  1  68                   pla             ;restore x
003845  1  AA                   tax
003846  1  A9 FF 48 28          set_stat $ff
00384A  1  68                   pla             ;restore a
00384B  1  E8                   inx             ;return registers with modifications
00384C  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
00384E  1  6C 1C 38             jmp (ptr_ind_ret)
003851  1  4C 51 38             trap            ;runover protection
003854  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
003857  1               
003857  1               ; target for the jump subroutine test
003857  1  88                   dey
003858  1  88                   dey
003859  1               test_jsr:
003859  1  08                   php             ;either SP or Y count will fail, if we do not hit
00385A  1  88                   dey
00385B  1  88                   dey
00385C  1  88                   dey
00385D  1  28                   plp
00385E  1  B0 FE                trap_cs         ;flags loaded?
003860  1  70 FE                trap_vs
003862  1  30 FE                trap_mi
003864  1  F0 FE                trap_eq
003866  1  C9 4A                cmp #'J'        ;registers loaded?
003868  1  D0 FE                trap_ne
00386A  1  E0 53                cpx #'S'
00386C  1  D0 FE                trap_ne
00386E  1  C0 4F                cpy #('R'-3)
003870  1  D0 FE                trap_ne
003872  1  48                   pha             ;save a,x
003873  1  8A                   txa
003874  1  48                   pha
003875  1  BA                   tsx             ;sp -4? (return addr,a,x)
003876  1  E0 FB                cpx #$fb
003878  1  D0 FE                trap_ne
00387A  1  AD FF 01             lda $1ff        ;propper return on stack
00387D  1  C9 09                cmp #>jsr_ret
00387F  1  D0 FE                trap_ne
003881  1  AD FE 01             lda $1fe
003884  1  C9 BE                cmp #<jsr_ret
003886  1  D0 FE                trap_ne
003888  1  A9 FF 48 28          set_stat $ff
00388C  1  68                   pla             ;pull x,a
00388D  1  AA                   tax
00388E  1  68                   pla
00388F  1  E8                   inx             ;return registers with modifications
003890  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
003892  1  60                   rts
003893  1  4C 93 38             trap            ;runover protection
003896  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
003899  1               
003899  1               ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
003899  1               nmi_trap:
003899  1  4C 99 38             trap            ;check stack for conditions at NMI
00389C  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
00389F  1               res_trap:
00389F  1  4C 9F 38             trap            ;unexpected RESET
0038A2  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
0038A5  1               
0038A5  1  88                   dey
0038A6  1  88                   dey
0038A7  1               irq_trap:               ;BRK test or unextpected BRK or IRQ
0038A7  1  08                   php             ;either SP or Y count will fail, if we do not hit
0038A8  1  88                   dey
0038A9  1  88                   dey
0038AA  1  88                   dey
0038AB  1                       ;next traps could be caused by unexpected BRK or IRQ
0038AB  1                       ;check stack for BREAK and originating location
0038AB  1                       ;possible jump/branch into weeds (uninitialized space)
0038AB  1  C9 BD                cmp #$ff-'B'    ;BRK pass 2 registers loaded?
0038AD  1  F0 46                beq break2
0038AF  1  C9 42                cmp #'B'        ;BRK pass 1 registers loaded?
0038B1  1  D0 FE                trap_ne
0038B3  1  E0 52                cpx #'R'
0038B5  1  D0 FE                trap_ne
0038B7  1  C0 48                cpy #'K'-3
0038B9  1  D0 FE                trap_ne
0038BB  1  85 0A                sta irq_a       ;save registers during break test
0038BD  1  86 0B                stx irq_x
0038BF  1  BA                   tsx             ;test break on stack
0038C0  1  BD 02 01             lda $102,x
0038C3  1  09 08 C9 38          cmp_flag 0      ;break test should have B=1 & unused=1 on stack
0038C7  1  D0 FE                trap_ne         ; - no break flag on stack
0038C9  1  68                   pla
0038CA  1  09 08 C9 3C          cmp_flag intdis ;should have added interrupt disable
0038CE  1  D0 FE                trap_ne
0038D0  1  BA                   tsx
0038D1  1  E0 FC                cpx #$fc        ;sp -3? (return addr, flags)
0038D3  1  D0 FE                trap_ne
0038D5  1  AD FF 01             lda $1ff        ;propper return on stack
0038D8  1  C9 09                cmp #>brk_ret0
0038DA  1  D0 FE                trap_ne
0038DC  1  AD FE 01             lda $1fe
0038DF  1  C9 F5                cmp #<brk_ret0
0038E1  1  D0 FE                trap_ne
0038E3  1  A9 FF                load_flag $ff
0038E5  1  48                   pha
0038E6  1  A6 0B                ldx irq_x
0038E8  1  E8                   inx             ;return registers with modifications
0038E9  1  A5 0A                lda irq_a
0038EB  1  49 AA                eor #$aa
0038ED  1  28                   plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
0038EE  1  40                   rti
0038EF  1  4C EF 38             trap            ;runover protection
0038F2  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
0038F5  1               
0038F5  1               break2:                 ;BRK pass 2
0038F5  1  E0 AD                cpx #$ff-'R'
0038F7  1  D0 FE                trap_ne
0038F9  1  C0 B1                cpy #$ff-'K'-3
0038FB  1  D0 FE                trap_ne
0038FD  1  85 0A                sta irq_a       ;save registers during break test
0038FF  1  86 0B                stx irq_x
003901  1  BA                   tsx             ;test break on stack
003902  1  BD 02 01             lda $102,x
003905  1  09 08 C9 FF          cmp_flag $ff    ;break test should have B=1
003909  1  D0 FE                trap_ne         ; - no break flag on stack
00390B  1  68                   pla
00390C  1  09 08                ora #decmode    ;ignore decmode cleared if 65c02
00390E  1  09 08 C9 FF          cmp_flag $ff    ;actual passed flags
003912  1  D0 FE                trap_ne
003914  1  BA                   tsx
003915  1  E0 FC                cpx #$fc        ;sp -3? (return addr, flags)
003917  1  D0 FE                trap_ne
003919  1  AD FF 01             lda $1ff        ;propper return on stack
00391C  1  C9 0A                cmp #>brk_ret1
00391E  1  D0 FE                trap_ne
003920  1  AD FE 01             lda $1fe
003923  1  C9 1D                cmp #<brk_ret1
003925  1  D0 FE                trap_ne
003927  1  A9 04                load_flag intdis
003929  1  48                   pha
00392A  1  A6 0B                ldx irq_x
00392C  1  E8                   inx             ;return registers with modifications
00392D  1  A5 0A                lda irq_a
00392F  1  49 AA                eor #$aa
003931  1  28                   plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
003932  1  40                   rti
003933  1  4C 33 39             trap            ;runover protection
003936  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
003939  1               
003939  1                   .if report = 1
003939  1                       include "report.i65"
003939  1                   .endif
003939  1               
003939  1               ;copy of data to initialize BSS segment
003939  1                   .if load_data_direct <> 1
003939  1               zp_init:
003939  1               zps_:   .byte   $80,1           ;additional shift pattern to test zero result & flag
003939  1               zp1_:   .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
003939  1               zp7f_:  .byte   $7f             ;test pattern for compare
003939  1               ;logical zeropage operands
003939  1               zpOR_:  .byte   0,$1f,$71,$80   ;test pattern for OR
003939  1               zpAN_:  .byte   $0f,$ff,$7f,$80 ;test pattern for AND
003939  1               zpEO_:  .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
003939  1               ;indirect addressing pointers
003939  1               ind1_:  .word   abs1            ;indirect pointer to pattern in absolute memory
003939  1                       .word   abs1+1
003939  1                       .word   abs1+2
003939  1                       .word   abs1+3
003939  1                       .word   abs7f
003939  1               inw1_:  .word   abs1-$f8        ;indirect pointer for wrap-test pattern
003939  1               indt_:  .word   abst            ;indirect pointer to store area in absolute memory
003939  1                       .word   abst+1
003939  1                       .word   abst+2
003939  1                       .word   abst+3
003939  1               inwt_:  .word   abst-$f8        ;indirect pointer for wrap-test store
003939  1               indAN_: .word   absAN           ;indirect pointer to AND pattern in absolute memory
003939  1                       .word   absAN+1
003939  1                       .word   absAN+2
003939  1                       .word   absAN+3
003939  1               indEO_: .word   absEO           ;indirect pointer to EOR pattern in absolute memory
003939  1                       .word   absEO+1
003939  1                       .word   absEO+2
003939  1                       .word   absEO+3
003939  1               indOR_: .word   absOR           ;indirect pointer to OR pattern in absolute memory
003939  1                       .word   absOR+1
003939  1                       .word   absOR+2
003939  1                       .word   absOR+3
003939  1               ;add/subtract indirect pointers
003939  1               adi2_:  .word   ada2            ;indirect pointer to operand 2 in absolute memory
003939  1               sbi2_:  .word   sba2            ;indirect pointer to complemented operand 2 (SBC)
003939  1               adiy2_: .word   ada2-$ff        ;with offset for indirect indexed
003939  1               sbiy2_: .word   sba2-$ff
003939  1               zp_end:
003939  1                   .if (zp_end - zp_init) <> (zp_bss_end - zp_bss)
003939  1                       ;force assembler error if size is different
003939  1                       .error "mismatch between bss and zeropage data"
003939  1                   .endif
003939  1               data_init:
003939  1               ex_and_:and #0              ;execute immediate opcodes
003939  1                       rts
003939  1               ex_eor_:eor #0              ;execute immediate opcodes
003939  1                       rts
003939  1               ex_ora_:ora #0              ;execute immediate opcodes
003939  1                       rts
003939  1               ex_adc_:adc #0              ;execute immediate opcodes
003939  1                       rts
003939  1               ex_sbc_:sbc #0              ;execute immediate opcodes
003939  1                       rts
003939  1               ;zps:   .byte   $80,1           ;additional shift patterns test zero result & flag
003939  1               abs1_:  .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
003939  1               abs7f_: .byte   $7f             ;test pattern for compare
003939  1               ;loads
003939  1               fLDx_:  .byte   fn,fn,0,fz              ;expected flags for load
003939  1               ;shifts
003939  1               rASL_:                                  ;expected result ASL & ROL -carry
003939  1               rROL_:  .byte   0,2,$86,$04,$82,0
003939  1               rROLc_: .byte   1,3,$87,$05,$83,1       ;expected result ROL +carry
003939  1               rLSR_:                                  ;expected result LSR & ROR -carry
003939  1               rROR_:  .byte   $40,0,$61,$41,$20,0
003939  1               rRORc_: .byte   $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
003939  1               fASL_:                                  ;expected flags for shifts
003939  1               fROL_:  .byte   fzc,0,fnc,fc,fn,fz      ;no carry in
003939  1               fROLc_: .byte   fc,0,fnc,fc,fn,0        ;carry in
003939  1               fLSR_:
003939  1               fROR_:  .byte   0,fzc,fc,0,fc,fz        ;no carry in
003939  1               fRORc_: .byte   fn,fnc,fnc,fn,fnc,fn    ;carry in
003939  1               ;increments (decrements)
003939  1               rINC_:  .byte   $7f,$80,$ff,0,1         ;expected result for INC/DEC
003939  1               fINC_:  .byte   0,fn,fn,fz,0            ;expected flags for INC/DEC
003939  1               ;logical memory operand
003939  1               absOR_: .byte   0,$1f,$71,$80           ;test pattern for OR
003939  1               absAN_: .byte   $0f,$ff,$7f,$80         ;test pattern for AND
003939  1               absEO_: .byte   $ff,$0f,$8f,$8f         ;test pattern for EOR
003939  1               ;logical accu operand
003939  1               absORa_:.byte   0,$f1,$1f,0             ;test pattern for OR
003939  1               absANa_:.byte   $f0,$ff,$ff,$ff         ;test pattern for AND
003939  1               absEOa_:.byte   $ff,$f0,$f0,$0f         ;test pattern for EOR
003939  1               ;logical results
003939  1               absrlo_:.byte   0,$ff,$7f,$80
003939  1               absflo_:.byte   fz,fn,0,fn
003939  1               data_end:
003939  1                   .if (data_end - data_init) <> (data_bss_end - data_bss)
003939  1                       ;force assembler error if size is different
003939  1                       .error "mismatch between bss and data"
003939  1                   .endif
003939  1               
003939  1               vec_init:
003939  1                       .word   nmi_trap
003939  1                       .word   res_trap
003939  1                       .word   irq_trap
003939  1               vec_bss equ $fffa
003939  1                   .endif                   ;end of RAM init data
003939  1               
003939  1                   .if (load_data_direct = 1) & (ROM_vectors = 1)
003939  1                       .segment "VECTORS"
003939  1                       .org $fffa       ;vectors
00FFFA  1  99 38                .word   nmi_trap
00FFFC  1  9F 38                .word   res_trap
00FFFE  1  A7 38                .word   irq_trap
010000  1                   .endif
010000  1               
